
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         00002d38  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002e44  08002e44  00012e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e64  08002e64  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08002e64  08002e64  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e64  08002e64  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e64  08002e64  00012e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e68  08002e68  00012e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08002e6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000030  08002e9c  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08002e9c  000200f4  2**0
=======
  1 .text         00002c70  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002d7c  08002d7c  00012d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d9c  08002d9c  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08002d9c  08002d9c  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d9c  08002d9c  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d9c  08002d9c  00012d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002da0  08002da0  00012da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08002da4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000030  08002dd4  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08002dd4  000200f4  2**0
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009194  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a7f  00000000  00000000  000291ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  0002ac70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000940  00000000  00000000  0002b698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ac9  00000000  00000000  0002bfd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
<<<<<<< HEAD
 17 .debug_line   0000b422  00000000  00000000  00042aa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000822f4  00000000  00000000  0004dec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d01b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028c8  00000000  00000000  000d020c  2**2
=======
 17 .debug_line   0000b3cd  00000000  00000000  00042aa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000822f4  00000000  00000000  0004de6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0162  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028c8  00000000  00000000  000d01b8  2**2
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
<<<<<<< HEAD
 800012c:	08002e2c 	.word	0x08002e2c
=======
 800012c:	08002d64 	.word	0x08002d64
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
<<<<<<< HEAD
 8000148:	08002e2c 	.word	0x08002e2c
=======
 8000148:	08002d64 	.word	0x08002d64
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a

0800014c <button_reading>:

static uint16_t buttonAddress[NO_OF_BUTTONS]={Button1_Pin,Button2_Pin,Button3_Pin};
static GPIO_TypeDef* buttonPort[NO_OF_BUTTONS]={Button1_GPIO_Port,Button2_GPIO_Port,Button3_GPIO_Port};
int DURATION;
void button_reading(void)
{
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for(uint8_t i=0;i<NO_OF_BUTTONS;i++)
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e049      	b.n	80001ec <button_reading+0xa0>
	{
		debounceButtonBuffer2[i]=debounceButtonBuffer1[i];
 8000158:	79fa      	ldrb	r2, [r7, #7]
 800015a:	79fb      	ldrb	r3, [r7, #7]
 800015c:	4927      	ldr	r1, [pc, #156]	; (80001fc <button_reading+0xb0>)
 800015e:	5c89      	ldrb	r1, [r1, r2]
 8000160:	4a27      	ldr	r2, [pc, #156]	; (8000200 <button_reading+0xb4>)
 8000162:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i]=HAL_GPIO_ReadPin(buttonPort[i], buttonAddress[i]);
 8000164:	79fb      	ldrb	r3, [r7, #7]
 8000166:	4a27      	ldr	r2, [pc, #156]	; (8000204 <button_reading+0xb8>)
 8000168:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800016c:	79fb      	ldrb	r3, [r7, #7]
 800016e:	4926      	ldr	r1, [pc, #152]	; (8000208 <button_reading+0xbc>)
 8000170:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000174:	79fc      	ldrb	r4, [r7, #7]
 8000176:	4619      	mov	r1, r3
 8000178:	4610      	mov	r0, r2
<<<<<<< HEAD
 800017a:	f001 fe17 	bl	8001dac <HAL_GPIO_ReadPin>
=======
 800017a:	f001 fdb3 	bl	8001ce4 <HAL_GPIO_ReadPin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
 800017e:	4603      	mov	r3, r0
 8000180:	461a      	mov	r2, r3
 8000182:	4b1e      	ldr	r3, [pc, #120]	; (80001fc <button_reading+0xb0>)
 8000184:	551a      	strb	r2, [r3, r4]
		if(debounceButtonBuffer1[i]==debounceButtonBuffer2[i])
 8000186:	79fb      	ldrb	r3, [r7, #7]
 8000188:	4a1c      	ldr	r2, [pc, #112]	; (80001fc <button_reading+0xb0>)
 800018a:	5cd2      	ldrb	r2, [r2, r3]
 800018c:	79fb      	ldrb	r3, [r7, #7]
 800018e:	491c      	ldr	r1, [pc, #112]	; (8000200 <button_reading+0xb4>)
 8000190:	5ccb      	ldrb	r3, [r1, r3]
 8000192:	429a      	cmp	r2, r3
 8000194:	d127      	bne.n	80001e6 <button_reading+0x9a>
		{
			if(debounceButtonBuffer3[i]!=debounceButtonBuffer1[i])
 8000196:	79fb      	ldrb	r3, [r7, #7]
 8000198:	4a1c      	ldr	r2, [pc, #112]	; (800020c <button_reading+0xc0>)
 800019a:	5cd2      	ldrb	r2, [r2, r3]
 800019c:	79fb      	ldrb	r3, [r7, #7]
 800019e:	4917      	ldr	r1, [pc, #92]	; (80001fc <button_reading+0xb0>)
 80001a0:	5ccb      	ldrb	r3, [r1, r3]
 80001a2:	429a      	cmp	r2, r3
 80001a4:	d012      	beq.n	80001cc <button_reading+0x80>
			{
				debounceButtonBuffer3[i]=debounceButtonBuffer1[i];
 80001a6:	79fa      	ldrb	r2, [r7, #7]
 80001a8:	79fb      	ldrb	r3, [r7, #7]
 80001aa:	4914      	ldr	r1, [pc, #80]	; (80001fc <button_reading+0xb0>)
 80001ac:	5c89      	ldrb	r1, [r1, r2]
 80001ae:	4a17      	ldr	r2, [pc, #92]	; (800020c <button_reading+0xc0>)
 80001b0:	54d1      	strb	r1, [r2, r3]
				if(debounceButtonBuffer1[i]==BUTTON_IS_PRESSED)
 80001b2:	79fb      	ldrb	r3, [r7, #7]
 80001b4:	4a11      	ldr	r2, [pc, #68]	; (80001fc <button_reading+0xb0>)
 80001b6:	5cd3      	ldrb	r3, [r2, r3]
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d114      	bne.n	80001e6 <button_reading+0x9a>
				{buttonBuffer[i]=BUTTON_IS_PRESSED;
 80001bc:	79fb      	ldrb	r3, [r7, #7]
 80001be:	4a14      	ldr	r2, [pc, #80]	; (8000210 <button_reading+0xc4>)
 80001c0:	2100      	movs	r1, #0
 80001c2:	54d1      	strb	r1, [r2, r3]
				DURATION=100;
 80001c4:	4b13      	ldr	r3, [pc, #76]	; (8000214 <button_reading+0xc8>)
 80001c6:	2264      	movs	r2, #100	; 0x64
 80001c8:	601a      	str	r2, [r3, #0]
 80001ca:	e00c      	b.n	80001e6 <button_reading+0x9a>
				}
			}
			else
			{	DURATION--;
 80001cc:	4b11      	ldr	r3, [pc, #68]	; (8000214 <button_reading+0xc8>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	3b01      	subs	r3, #1
 80001d2:	4a10      	ldr	r2, [pc, #64]	; (8000214 <button_reading+0xc8>)
 80001d4:	6013      	str	r3, [r2, #0]
				if(DURATION<=0)
 80001d6:	4b0f      	ldr	r3, [pc, #60]	; (8000214 <button_reading+0xc8>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	2b00      	cmp	r3, #0
 80001dc:	dc03      	bgt.n	80001e6 <button_reading+0x9a>
				{
					debounceButtonBuffer3[i]=BUTTON_IS_RELEASED;
 80001de:	79fb      	ldrb	r3, [r7, #7]
 80001e0:	4a0a      	ldr	r2, [pc, #40]	; (800020c <button_reading+0xc0>)
 80001e2:	2101      	movs	r1, #1
 80001e4:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<NO_OF_BUTTONS;i++)
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	3301      	adds	r3, #1
 80001ea:	71fb      	strb	r3, [r7, #7]
 80001ec:	79fb      	ldrb	r3, [r7, #7]
 80001ee:	2b02      	cmp	r3, #2
 80001f0:	d9b2      	bls.n	8000158 <button_reading+0xc>
				}
			}
		}
	}
}
 80001f2:	bf00      	nop
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd90      	pop	{r4, r7, pc}
 80001fc:	2000004c 	.word	0x2000004c
 8000200:	20000050 	.word	0x20000050
 8000204:	20000010 	.word	0x20000010
 8000208:	20000008 	.word	0x20000008
 800020c:	20000004 	.word	0x20000004
 8000210:	20000000 	.word	0x20000000
 8000214:	20000094 	.word	0x20000094

08000218 <is_button_pressed>:
int is_button_pressed(int index)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	if(buttonBuffer[index]==BUTTON_IS_PRESSED)
 8000220:	4a09      	ldr	r2, [pc, #36]	; (8000248 <is_button_pressed+0x30>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	4413      	add	r3, r2
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d106      	bne.n	800023a <is_button_pressed+0x22>
	{
		buttonBuffer[index]=BUTTON_IS_RELEASED;
 800022c:	4a06      	ldr	r2, [pc, #24]	; (8000248 <is_button_pressed+0x30>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	4413      	add	r3, r2
 8000232:	2201      	movs	r2, #1
 8000234:	701a      	strb	r2, [r3, #0]
		return 1;
 8000236:	2301      	movs	r3, #1
 8000238:	e000      	b.n	800023c <is_button_pressed+0x24>
	}
	else return 0;
 800023a:	2300      	movs	r3, #0
}
 800023c:	4618      	mov	r0, r3
 800023e:	370c      	adds	r7, #12
 8000240:	46bd      	mov	sp, r7
 8000242:	bc80      	pop	{r7}
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	20000000 	.word	0x20000000

0800024c <update7SEG>:
static int time2=0;
int indexled=0;
int initial_flag=0;
int led_buffer [4];

void update7SEG (int index) {
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
	switch (index)	{
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d003      	beq.n	8000262 <update7SEG+0x16>
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	2b01      	cmp	r3, #1
 800025e:	d022      	beq.n	80002a6 <update7SEG+0x5a>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
		display7SEG(led_buffer[1]);
		display7SEGforled2(led_buffer[3]);
		break;
	default:
		break;
 8000260:	e043      	b.n	80002ea <update7SEG+0x9e>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000262:	2200      	movs	r2, #0
 8000264:	2180      	movs	r1, #128	; 0x80
 8000266:	4823      	ldr	r0, [pc, #140]	; (80002f4 <update7SEG+0xa8>)
<<<<<<< HEAD
 8000268:	f001 fdb7 	bl	8001dda <HAL_GPIO_WritePin>
=======
 8000268:	f001 fd53 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 800026c:	2201      	movs	r2, #1
 800026e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000272:	4820      	ldr	r0, [pc, #128]	; (80002f4 <update7SEG+0xa8>)
<<<<<<< HEAD
 8000274:	f001 fdb1 	bl	8001dda <HAL_GPIO_WritePin>
=======
 8000274:	f001 fd4d 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800027e:	481d      	ldr	r0, [pc, #116]	; (80002f4 <update7SEG+0xa8>)
<<<<<<< HEAD
 8000280:	f001 fdab 	bl	8001dda <HAL_GPIO_WritePin>
=======
 8000280:	f001 fd47 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000284:	2201      	movs	r2, #1
 8000286:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800028a:	481a      	ldr	r0, [pc, #104]	; (80002f4 <update7SEG+0xa8>)
<<<<<<< HEAD
 800028c:	f001 fda5 	bl	8001dda <HAL_GPIO_WritePin>
=======
 800028c:	f001 fd41 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
		display7SEG(led_buffer[0]);
 8000290:	4b19      	ldr	r3, [pc, #100]	; (80002f8 <update7SEG+0xac>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4618      	mov	r0, r3
<<<<<<< HEAD
 8000296:	f000 fc93 	bl	8000bc0 <display7SEG>
=======
 8000296:	f000 fc2f 	bl	8000af8 <display7SEG>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
		display7SEGforled2(led_buffer[2]);
 800029a:	4b17      	ldr	r3, [pc, #92]	; (80002f8 <update7SEG+0xac>)
 800029c:	689b      	ldr	r3, [r3, #8]
 800029e:	4618      	mov	r0, r3
<<<<<<< HEAD
 80002a0:	f000 fe1e 	bl	8000ee0 <display7SEGforled2>
=======
 80002a0:	f000 fdba 	bl	8000e18 <display7SEGforled2>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
		break;
 80002a4:	e021      	b.n	80002ea <update7SEG+0x9e>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80002a6:	2201      	movs	r2, #1
 80002a8:	2180      	movs	r1, #128	; 0x80
 80002aa:	4812      	ldr	r0, [pc, #72]	; (80002f4 <update7SEG+0xa8>)
<<<<<<< HEAD
 80002ac:	f001 fd95 	bl	8001dda <HAL_GPIO_WritePin>
=======
 80002ac:	f001 fd31 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 80002b0:	2200      	movs	r2, #0
 80002b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002b6:	480f      	ldr	r0, [pc, #60]	; (80002f4 <update7SEG+0xa8>)
<<<<<<< HEAD
 80002b8:	f001 fd8f 	bl	8001dda <HAL_GPIO_WritePin>
=======
 80002b8:	f001 fd2b 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80002bc:	2201      	movs	r2, #1
 80002be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002c2:	480c      	ldr	r0, [pc, #48]	; (80002f4 <update7SEG+0xa8>)
<<<<<<< HEAD
 80002c4:	f001 fd89 	bl	8001dda <HAL_GPIO_WritePin>
=======
 80002c4:	f001 fd25 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 80002c8:	2200      	movs	r2, #0
 80002ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002ce:	4809      	ldr	r0, [pc, #36]	; (80002f4 <update7SEG+0xa8>)
<<<<<<< HEAD
 80002d0:	f001 fd83 	bl	8001dda <HAL_GPIO_WritePin>
=======
 80002d0:	f001 fd1f 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
		display7SEG(led_buffer[1]);
 80002d4:	4b08      	ldr	r3, [pc, #32]	; (80002f8 <update7SEG+0xac>)
 80002d6:	685b      	ldr	r3, [r3, #4]
 80002d8:	4618      	mov	r0, r3
<<<<<<< HEAD
 80002da:	f000 fc71 	bl	8000bc0 <display7SEG>
=======
 80002da:	f000 fc0d 	bl	8000af8 <display7SEG>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
		display7SEGforled2(led_buffer[3]);
 80002de:	4b06      	ldr	r3, [pc, #24]	; (80002f8 <update7SEG+0xac>)
 80002e0:	68db      	ldr	r3, [r3, #12]
 80002e2:	4618      	mov	r0, r3
<<<<<<< HEAD
 80002e4:	f000 fdfc 	bl	8000ee0 <display7SEGforled2>
=======
 80002e4:	f000 fd98 	bl	8000e18 <display7SEGforled2>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
		break;
 80002e8:	bf00      	nop
	}
 }
 80002ea:	bf00      	nop
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	40010800 	.word	0x40010800
 80002f8:	20000098 	.word	0x20000098

080002fc <updatebuffer>:
void updatebuffer(int number1, int number2)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	6039      	str	r1, [r7, #0]
	led_buffer[0]=number1/10;
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	4a18      	ldr	r2, [pc, #96]	; (800036c <updatebuffer+0x70>)
 800030a:	fb82 1203 	smull	r1, r2, r2, r3
 800030e:	1092      	asrs	r2, r2, #2
 8000310:	17db      	asrs	r3, r3, #31
 8000312:	1ad3      	subs	r3, r2, r3
 8000314:	4a16      	ldr	r2, [pc, #88]	; (8000370 <updatebuffer+0x74>)
 8000316:	6013      	str	r3, [r2, #0]
	led_buffer[1]=number1%10;
 8000318:	6879      	ldr	r1, [r7, #4]
 800031a:	4b14      	ldr	r3, [pc, #80]	; (800036c <updatebuffer+0x70>)
 800031c:	fb83 2301 	smull	r2, r3, r3, r1
 8000320:	109a      	asrs	r2, r3, #2
 8000322:	17cb      	asrs	r3, r1, #31
 8000324:	1ad2      	subs	r2, r2, r3
 8000326:	4613      	mov	r3, r2
 8000328:	009b      	lsls	r3, r3, #2
 800032a:	4413      	add	r3, r2
 800032c:	005b      	lsls	r3, r3, #1
 800032e:	1aca      	subs	r2, r1, r3
 8000330:	4b0f      	ldr	r3, [pc, #60]	; (8000370 <updatebuffer+0x74>)
 8000332:	605a      	str	r2, [r3, #4]

	led_buffer[2]=number2/10;
 8000334:	683b      	ldr	r3, [r7, #0]
 8000336:	4a0d      	ldr	r2, [pc, #52]	; (800036c <updatebuffer+0x70>)
 8000338:	fb82 1203 	smull	r1, r2, r2, r3
 800033c:	1092      	asrs	r2, r2, #2
 800033e:	17db      	asrs	r3, r3, #31
 8000340:	1ad3      	subs	r3, r2, r3
 8000342:	4a0b      	ldr	r2, [pc, #44]	; (8000370 <updatebuffer+0x74>)
 8000344:	6093      	str	r3, [r2, #8]
	led_buffer[3]=number2%10;
 8000346:	6839      	ldr	r1, [r7, #0]
 8000348:	4b08      	ldr	r3, [pc, #32]	; (800036c <updatebuffer+0x70>)
 800034a:	fb83 2301 	smull	r2, r3, r3, r1
 800034e:	109a      	asrs	r2, r3, #2
 8000350:	17cb      	asrs	r3, r1, #31
 8000352:	1ad2      	subs	r2, r2, r3
 8000354:	4613      	mov	r3, r2
 8000356:	009b      	lsls	r3, r3, #2
 8000358:	4413      	add	r3, r2
 800035a:	005b      	lsls	r3, r3, #1
 800035c:	1aca      	subs	r2, r1, r3
 800035e:	4b04      	ldr	r3, [pc, #16]	; (8000370 <updatebuffer+0x74>)
 8000360:	60da      	str	r2, [r3, #12]
}
 8000362:	bf00      	nop
 8000364:	370c      	adds	r7, #12
 8000366:	46bd      	mov	sp, r7
 8000368:	bc80      	pop	{r7}
 800036a:	4770      	bx	lr
 800036c:	66666667 	.word	0x66666667
 8000370:	20000098 	.word	0x20000098

08000374 <initial>:

void initial()
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
	status=AUTO_RED;
 8000378:	4b11      	ldr	r3, [pc, #68]	; (80003c0 <initial+0x4c>)
 800037a:	2202      	movs	r2, #2
 800037c:	601a      	str	r2, [r3, #0]
	status2=AUTO_GREEN;
 800037e:	4b11      	ldr	r3, [pc, #68]	; (80003c4 <initial+0x50>)
 8000380:	2204      	movs	r2, #4
 8000382:	601a      	str	r2, [r3, #0]
	time1=lightbufferRun[0];
 8000384:	4b10      	ldr	r3, [pc, #64]	; (80003c8 <initial+0x54>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	461a      	mov	r2, r3
 800038a:	4b10      	ldr	r3, [pc, #64]	; (80003cc <initial+0x58>)
 800038c:	601a      	str	r2, [r3, #0]
	time2=lightbufferRun[2];
 800038e:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <initial+0x54>)
 8000390:	789b      	ldrb	r3, [r3, #2]
 8000392:	461a      	mov	r2, r3
 8000394:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <initial+0x5c>)
 8000396:	601a      	str	r2, [r3, #0]
	setTimer1(1000);
 8000398:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
<<<<<<< HEAD
 800039c:	f001 f938 	bl	8001610 <setTimer1>
=======
 800039c:	f001 f8d4 	bl	8001548 <setTimer1>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
	mode=1;
 80003a0:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <initial+0x60>)
 80003a2:	2201      	movs	r2, #1
 80003a4:	701a      	strb	r2, [r3, #0]
	segment_flag=1;
 80003a6:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <initial+0x64>)
 80003a8:	2201      	movs	r2, #1
 80003aa:	601a      	str	r2, [r3, #0]
	updatebuffer(time1, time2);
 80003ac:	4b07      	ldr	r3, [pc, #28]	; (80003cc <initial+0x58>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4a07      	ldr	r2, [pc, #28]	; (80003d0 <initial+0x5c>)
 80003b2:	6812      	ldr	r2, [r2, #0]
 80003b4:	4611      	mov	r1, r2
 80003b6:	4618      	mov	r0, r3
 80003b8:	f7ff ffa0 	bl	80002fc <updatebuffer>
}
 80003bc:	bf00      	nop
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	20000064 	.word	0x20000064
 80003c4:	20000068 	.word	0x20000068
 80003c8:	20000020 	.word	0x20000020
 80003cc:	20000054 	.word	0x20000054
 80003d0:	20000058 	.word	0x20000058
 80003d4:	20000053 	.word	0x20000053
 80003d8:	20000088 	.word	0x20000088

080003dc <traffic>:
void  traffic()
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
	if(status==AUTO_RED)
 80003e0:	4b97      	ldr	r3, [pc, #604]	; (8000640 <traffic+0x264>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	2b02      	cmp	r3, #2
 80003e6:	d12a      	bne.n	800043e <traffic+0x62>
	{
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, RESET);
 80003e8:	2200      	movs	r2, #0
 80003ea:	2102      	movs	r1, #2
 80003ec:	4895      	ldr	r0, [pc, #596]	; (8000644 <traffic+0x268>)
<<<<<<< HEAD
 80003ee:	f001 fcf4 	bl	8001dda <HAL_GPIO_WritePin>
=======
 80003ee:	f001 fc90 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 80003f2:	2201      	movs	r2, #1
 80003f4:	2104      	movs	r1, #4
 80003f6:	4893      	ldr	r0, [pc, #588]	; (8000644 <traffic+0x268>)
<<<<<<< HEAD
 80003f8:	f001 fcef 	bl	8001dda <HAL_GPIO_WritePin>
=======
 80003f8:	f001 fc8b 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 80003fc:	2201      	movs	r2, #1
 80003fe:	2108      	movs	r1, #8
 8000400:	4890      	ldr	r0, [pc, #576]	; (8000644 <traffic+0x268>)
<<<<<<< HEAD
 8000402:	f001 fcea 	bl	8001dda <HAL_GPIO_WritePin>
=======
 8000402:	f001 fc86 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
		if(time1==0)
 8000406:	4b90      	ldr	r3, [pc, #576]	; (8000648 <traffic+0x26c>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	2b00      	cmp	r3, #0
 800040c:	d174      	bne.n	80004f8 <traffic+0x11c>
		{
			status=AUTO_GREEN;
 800040e:	4b8c      	ldr	r3, [pc, #560]	; (8000640 <traffic+0x264>)
 8000410:	2204      	movs	r2, #4
 8000412:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 8000414:	2201      	movs	r2, #1
 8000416:	2102      	movs	r1, #2
 8000418:	488a      	ldr	r0, [pc, #552]	; (8000644 <traffic+0x268>)
<<<<<<< HEAD
 800041a:	f001 fcde 	bl	8001dda <HAL_GPIO_WritePin>
=======
 800041a:	f001 fc7a 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
			HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 800041e:	2201      	movs	r2, #1
 8000420:	2104      	movs	r1, #4
 8000422:	4888      	ldr	r0, [pc, #544]	; (8000644 <traffic+0x268>)
<<<<<<< HEAD
 8000424:	f001 fcd9 	bl	8001dda <HAL_GPIO_WritePin>
=======
 8000424:	f001 fc75 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, RESET);
 8000428:	2200      	movs	r2, #0
 800042a:	2108      	movs	r1, #8
 800042c:	4885      	ldr	r0, [pc, #532]	; (8000644 <traffic+0x268>)
<<<<<<< HEAD
 800042e:	f001 fcd4 	bl	8001dda <HAL_GPIO_WritePin>
=======
 800042e:	f001 fc70 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
			time1=lightbufferRun[2];
 8000432:	4b86      	ldr	r3, [pc, #536]	; (800064c <traffic+0x270>)
 8000434:	789b      	ldrb	r3, [r3, #2]
 8000436:	461a      	mov	r2, r3
 8000438:	4b83      	ldr	r3, [pc, #524]	; (8000648 <traffic+0x26c>)
 800043a:	601a      	str	r2, [r3, #0]
 800043c:	e05c      	b.n	80004f8 <traffic+0x11c>
		}
	}
	else if(status==AUTO_YELLOW)
 800043e:	4b80      	ldr	r3, [pc, #512]	; (8000640 <traffic+0x264>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	2b03      	cmp	r3, #3
 8000444:	d12a      	bne.n	800049c <traffic+0xc0>
	{
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 8000446:	2201      	movs	r2, #1
 8000448:	2102      	movs	r1, #2
 800044a:	487e      	ldr	r0, [pc, #504]	; (8000644 <traffic+0x268>)
<<<<<<< HEAD
 800044c:	f001 fcc5 	bl	8001dda <HAL_GPIO_WritePin>
=======
 800044c:	f001 fc61 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, RESET);
 8000450:	2200      	movs	r2, #0
 8000452:	2104      	movs	r1, #4
 8000454:	487b      	ldr	r0, [pc, #492]	; (8000644 <traffic+0x268>)
<<<<<<< HEAD
 8000456:	f001 fcc0 	bl	8001dda <HAL_GPIO_WritePin>
=======
 8000456:	f001 fc5c 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 800045a:	2201      	movs	r2, #1
 800045c:	2108      	movs	r1, #8
 800045e:	4879      	ldr	r0, [pc, #484]	; (8000644 <traffic+0x268>)
<<<<<<< HEAD
 8000460:	f001 fcbb 	bl	8001dda <HAL_GPIO_WritePin>
=======
 8000460:	f001 fc57 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
		if(time1==0)
 8000464:	4b78      	ldr	r3, [pc, #480]	; (8000648 <traffic+0x26c>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d145      	bne.n	80004f8 <traffic+0x11c>
		{
			status=AUTO_RED;
 800046c:	4b74      	ldr	r3, [pc, #464]	; (8000640 <traffic+0x264>)
 800046e:	2202      	movs	r2, #2
 8000470:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, RESET);
 8000472:	2200      	movs	r2, #0
 8000474:	2102      	movs	r1, #2
 8000476:	4873      	ldr	r0, [pc, #460]	; (8000644 <traffic+0x268>)
<<<<<<< HEAD
 8000478:	f001 fcaf 	bl	8001dda <HAL_GPIO_WritePin>
=======
 8000478:	f001 fc4b 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
			HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 800047c:	2201      	movs	r2, #1
 800047e:	2104      	movs	r1, #4
 8000480:	4870      	ldr	r0, [pc, #448]	; (8000644 <traffic+0x268>)
<<<<<<< HEAD
 8000482:	f001 fcaa 	bl	8001dda <HAL_GPIO_WritePin>
=======
 8000482:	f001 fc46 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8000486:	2201      	movs	r2, #1
 8000488:	2108      	movs	r1, #8
 800048a:	486e      	ldr	r0, [pc, #440]	; (8000644 <traffic+0x268>)
<<<<<<< HEAD
 800048c:	f001 fca5 	bl	8001dda <HAL_GPIO_WritePin>
=======
 800048c:	f001 fc41 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
			time1=lightbufferRun[0];
 8000490:	4b6e      	ldr	r3, [pc, #440]	; (800064c <traffic+0x270>)
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	461a      	mov	r2, r3
 8000496:	4b6c      	ldr	r3, [pc, #432]	; (8000648 <traffic+0x26c>)
 8000498:	601a      	str	r2, [r3, #0]
 800049a:	e02d      	b.n	80004f8 <traffic+0x11c>
		}
	}
	else if(status==AUTO_GREEN)
 800049c:	4b68      	ldr	r3, [pc, #416]	; (8000640 <traffic+0x264>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	2b04      	cmp	r3, #4
 80004a2:	d129      	bne.n	80004f8 <traffic+0x11c>
	{
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 80004a4:	2201      	movs	r2, #1
 80004a6:	2102      	movs	r1, #2
 80004a8:	4866      	ldr	r0, [pc, #408]	; (8000644 <traffic+0x268>)
<<<<<<< HEAD
 80004aa:	f001 fc96 	bl	8001dda <HAL_GPIO_WritePin>
=======
 80004aa:	f001 fc32 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 80004ae:	2201      	movs	r2, #1
 80004b0:	2104      	movs	r1, #4
 80004b2:	4864      	ldr	r0, [pc, #400]	; (8000644 <traffic+0x268>)
<<<<<<< HEAD
 80004b4:	f001 fc91 	bl	8001dda <HAL_GPIO_WritePin>
=======
 80004b4:	f001 fc2d 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, RESET);
 80004b8:	2200      	movs	r2, #0
 80004ba:	2108      	movs	r1, #8
 80004bc:	4861      	ldr	r0, [pc, #388]	; (8000644 <traffic+0x268>)
<<<<<<< HEAD
 80004be:	f001 fc8c 	bl	8001dda <HAL_GPIO_WritePin>
=======
 80004be:	f001 fc28 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
		if(time1==0)
 80004c2:	4b61      	ldr	r3, [pc, #388]	; (8000648 <traffic+0x26c>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d116      	bne.n	80004f8 <traffic+0x11c>
		{
			status=AUTO_YELLOW;
 80004ca:	4b5d      	ldr	r3, [pc, #372]	; (8000640 <traffic+0x264>)
 80004cc:	2203      	movs	r2, #3
 80004ce:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 80004d0:	2201      	movs	r2, #1
 80004d2:	2102      	movs	r1, #2
 80004d4:	485b      	ldr	r0, [pc, #364]	; (8000644 <traffic+0x268>)
<<<<<<< HEAD
 80004d6:	f001 fc80 	bl	8001dda <HAL_GPIO_WritePin>
=======
 80004d6:	f001 fc1c 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
			HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, RESET);
 80004da:	2200      	movs	r2, #0
 80004dc:	2104      	movs	r1, #4
 80004de:	4859      	ldr	r0, [pc, #356]	; (8000644 <traffic+0x268>)
<<<<<<< HEAD
 80004e0:	f001 fc7b 	bl	8001dda <HAL_GPIO_WritePin>
=======
 80004e0:	f001 fc17 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 80004e4:	2201      	movs	r2, #1
 80004e6:	2108      	movs	r1, #8
 80004e8:	4856      	ldr	r0, [pc, #344]	; (8000644 <traffic+0x268>)
<<<<<<< HEAD
 80004ea:	f001 fc76 	bl	8001dda <HAL_GPIO_WritePin>
=======
 80004ea:	f001 fc12 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
			time1=lightbufferRun[1];
 80004ee:	4b57      	ldr	r3, [pc, #348]	; (800064c <traffic+0x270>)
 80004f0:	785b      	ldrb	r3, [r3, #1]
 80004f2:	461a      	mov	r2, r3
 80004f4:	4b54      	ldr	r3, [pc, #336]	; (8000648 <traffic+0x26c>)
 80004f6:	601a      	str	r2, [r3, #0]
		}
	}
	if(status2==AUTO_RED)
 80004f8:	4b55      	ldr	r3, [pc, #340]	; (8000650 <traffic+0x274>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	2b02      	cmp	r3, #2
 80004fe:	d12a      	bne.n	8000556 <traffic+0x17a>
	{
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, RESET);
 8000500:	2200      	movs	r2, #0
 8000502:	2110      	movs	r1, #16
 8000504:	484f      	ldr	r0, [pc, #316]	; (8000644 <traffic+0x268>)
<<<<<<< HEAD
 8000506:	f001 fc68 	bl	8001dda <HAL_GPIO_WritePin>
=======
 8000506:	f001 fc04 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 800050a:	2201      	movs	r2, #1
 800050c:	2120      	movs	r1, #32
 800050e:	484d      	ldr	r0, [pc, #308]	; (8000644 <traffic+0x268>)
<<<<<<< HEAD
 8000510:	f001 fc63 	bl	8001dda <HAL_GPIO_WritePin>
=======
 8000510:	f001 fbff 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 8000514:	2201      	movs	r2, #1
 8000516:	2140      	movs	r1, #64	; 0x40
 8000518:	484a      	ldr	r0, [pc, #296]	; (8000644 <traffic+0x268>)
<<<<<<< HEAD
 800051a:	f001 fc5e 	bl	8001dda <HAL_GPIO_WritePin>
=======
 800051a:	f001 fbfa 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
		if(time2==0)
 800051e:	4b4d      	ldr	r3, [pc, #308]	; (8000654 <traffic+0x278>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d174      	bne.n	8000610 <traffic+0x234>
		{
			status2=AUTO_GREEN;
 8000526:	4b4a      	ldr	r3, [pc, #296]	; (8000650 <traffic+0x274>)
 8000528:	2204      	movs	r2, #4
 800052a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 800052c:	2201      	movs	r2, #1
 800052e:	2110      	movs	r1, #16
 8000530:	4844      	ldr	r0, [pc, #272]	; (8000644 <traffic+0x268>)
<<<<<<< HEAD
 8000532:	f001 fc52 	bl	8001dda <HAL_GPIO_WritePin>
=======
 8000532:	f001 fbee 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
			HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 8000536:	2201      	movs	r2, #1
 8000538:	2120      	movs	r1, #32
 800053a:	4842      	ldr	r0, [pc, #264]	; (8000644 <traffic+0x268>)
<<<<<<< HEAD
 800053c:	f001 fc4d 	bl	8001dda <HAL_GPIO_WritePin>
=======
 800053c:	f001 fbe9 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	2140      	movs	r1, #64	; 0x40
 8000544:	483f      	ldr	r0, [pc, #252]	; (8000644 <traffic+0x268>)
<<<<<<< HEAD
 8000546:	f001 fc48 	bl	8001dda <HAL_GPIO_WritePin>
=======
 8000546:	f001 fbe4 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
			time2=lightbufferRun[2];
 800054a:	4b40      	ldr	r3, [pc, #256]	; (800064c <traffic+0x270>)
 800054c:	789b      	ldrb	r3, [r3, #2]
 800054e:	461a      	mov	r2, r3
 8000550:	4b40      	ldr	r3, [pc, #256]	; (8000654 <traffic+0x278>)
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	e05c      	b.n	8000610 <traffic+0x234>
		}
	}
	else if(status2==AUTO_YELLOW)
 8000556:	4b3e      	ldr	r3, [pc, #248]	; (8000650 <traffic+0x274>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	2b03      	cmp	r3, #3
 800055c:	d12a      	bne.n	80005b4 <traffic+0x1d8>
	{
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 800055e:	2201      	movs	r2, #1
 8000560:	2110      	movs	r1, #16
 8000562:	4838      	ldr	r0, [pc, #224]	; (8000644 <traffic+0x268>)
<<<<<<< HEAD
 8000564:	f001 fc39 	bl	8001dda <HAL_GPIO_WritePin>
=======
 8000564:	f001 fbd5 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	2120      	movs	r1, #32
 800056c:	4835      	ldr	r0, [pc, #212]	; (8000644 <traffic+0x268>)
<<<<<<< HEAD
 800056e:	f001 fc34 	bl	8001dda <HAL_GPIO_WritePin>
=======
 800056e:	f001 fbd0 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 8000572:	2201      	movs	r2, #1
 8000574:	2140      	movs	r1, #64	; 0x40
 8000576:	4833      	ldr	r0, [pc, #204]	; (8000644 <traffic+0x268>)
<<<<<<< HEAD
 8000578:	f001 fc2f 	bl	8001dda <HAL_GPIO_WritePin>
=======
 8000578:	f001 fbcb 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
		if(time2==0)
 800057c:	4b35      	ldr	r3, [pc, #212]	; (8000654 <traffic+0x278>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d145      	bne.n	8000610 <traffic+0x234>
		{
			status2=AUTO_RED;
 8000584:	4b32      	ldr	r3, [pc, #200]	; (8000650 <traffic+0x274>)
 8000586:	2202      	movs	r2, #2
 8000588:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	2110      	movs	r1, #16
 800058e:	482d      	ldr	r0, [pc, #180]	; (8000644 <traffic+0x268>)
<<<<<<< HEAD
 8000590:	f001 fc23 	bl	8001dda <HAL_GPIO_WritePin>
=======
 8000590:	f001 fbbf 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
			HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 8000594:	2201      	movs	r2, #1
 8000596:	2120      	movs	r1, #32
 8000598:	482a      	ldr	r0, [pc, #168]	; (8000644 <traffic+0x268>)
<<<<<<< HEAD
 800059a:	f001 fc1e 	bl	8001dda <HAL_GPIO_WritePin>
=======
 800059a:	f001 fbba 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 800059e:	2201      	movs	r2, #1
 80005a0:	2140      	movs	r1, #64	; 0x40
 80005a2:	4828      	ldr	r0, [pc, #160]	; (8000644 <traffic+0x268>)
<<<<<<< HEAD
 80005a4:	f001 fc19 	bl	8001dda <HAL_GPIO_WritePin>
=======
 80005a4:	f001 fbb5 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
			time2=lightbufferRun[0];
 80005a8:	4b28      	ldr	r3, [pc, #160]	; (800064c <traffic+0x270>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	461a      	mov	r2, r3
 80005ae:	4b29      	ldr	r3, [pc, #164]	; (8000654 <traffic+0x278>)
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	e02d      	b.n	8000610 <traffic+0x234>
		}
	}
	else if(status2==AUTO_GREEN)
 80005b4:	4b26      	ldr	r3, [pc, #152]	; (8000650 <traffic+0x274>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b04      	cmp	r3, #4
 80005ba:	d129      	bne.n	8000610 <traffic+0x234>
	{
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	2110      	movs	r1, #16
 80005c0:	4820      	ldr	r0, [pc, #128]	; (8000644 <traffic+0x268>)
<<<<<<< HEAD
 80005c2:	f001 fc0a 	bl	8001dda <HAL_GPIO_WritePin>
=======
 80005c2:	f001 fba6 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 80005c6:	2201      	movs	r2, #1
 80005c8:	2120      	movs	r1, #32
 80005ca:	481e      	ldr	r0, [pc, #120]	; (8000644 <traffic+0x268>)
<<<<<<< HEAD
 80005cc:	f001 fc05 	bl	8001dda <HAL_GPIO_WritePin>
=======
 80005cc:	f001 fba1 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2140      	movs	r1, #64	; 0x40
 80005d4:	481b      	ldr	r0, [pc, #108]	; (8000644 <traffic+0x268>)
<<<<<<< HEAD
 80005d6:	f001 fc00 	bl	8001dda <HAL_GPIO_WritePin>
=======
 80005d6:	f001 fb9c 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
		if(time2==0)
 80005da:	4b1e      	ldr	r3, [pc, #120]	; (8000654 <traffic+0x278>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d116      	bne.n	8000610 <traffic+0x234>
		{
			status2=AUTO_YELLOW;
 80005e2:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <traffic+0x274>)
 80005e4:	2203      	movs	r2, #3
 80005e6:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 80005e8:	2201      	movs	r2, #1
 80005ea:	2110      	movs	r1, #16
 80005ec:	4815      	ldr	r0, [pc, #84]	; (8000644 <traffic+0x268>)
<<<<<<< HEAD
 80005ee:	f001 fbf4 	bl	8001dda <HAL_GPIO_WritePin>
=======
 80005ee:	f001 fb90 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
			HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2120      	movs	r1, #32
 80005f6:	4813      	ldr	r0, [pc, #76]	; (8000644 <traffic+0x268>)
<<<<<<< HEAD
 80005f8:	f001 fbef 	bl	8001dda <HAL_GPIO_WritePin>
=======
 80005f8:	f001 fb8b 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 80005fc:	2201      	movs	r2, #1
 80005fe:	2140      	movs	r1, #64	; 0x40
 8000600:	4810      	ldr	r0, [pc, #64]	; (8000644 <traffic+0x268>)
<<<<<<< HEAD
 8000602:	f001 fbea 	bl	8001dda <HAL_GPIO_WritePin>
=======
 8000602:	f001 fb86 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
			time2=lightbufferRun[1];
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <traffic+0x270>)
 8000608:	785b      	ldrb	r3, [r3, #1]
 800060a:	461a      	mov	r2, r3
 800060c:	4b11      	ldr	r3, [pc, #68]	; (8000654 <traffic+0x278>)
 800060e:	601a      	str	r2, [r3, #0]
		}
	}
	if((mode==1) &&(timer1_flag==1))
 8000610:	4b11      	ldr	r3, [pc, #68]	; (8000658 <traffic+0x27c>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b01      	cmp	r3, #1
 8000616:	d111      	bne.n	800063c <traffic+0x260>
 8000618:	4b10      	ldr	r3, [pc, #64]	; (800065c <traffic+0x280>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d10d      	bne.n	800063c <traffic+0x260>
	{
		time1--;
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <traffic+0x26c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	3b01      	subs	r3, #1
 8000626:	4a08      	ldr	r2, [pc, #32]	; (8000648 <traffic+0x26c>)
 8000628:	6013      	str	r3, [r2, #0]
		time2--;
 800062a:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <traffic+0x278>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	3b01      	subs	r3, #1
 8000630:	4a08      	ldr	r2, [pc, #32]	; (8000654 <traffic+0x278>)
 8000632:	6013      	str	r3, [r2, #0]
		setTimer1(1000);
 8000634:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
<<<<<<< HEAD
 8000638:	f000 ffea 	bl	8001610 <setTimer1>
=======
 8000638:	f000 ff86 	bl	8001548 <setTimer1>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
	}
}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000064 	.word	0x20000064
 8000644:	40010800 	.word	0x40010800
 8000648:	20000054 	.word	0x20000054
 800064c:	20000020 	.word	0x20000020
 8000650:	20000068 	.word	0x20000068
 8000654:	20000058 	.word	0x20000058
 8000658:	20000053 	.word	0x20000053
 800065c:	2000006c 	.word	0x2000006c

08000660 <increasedTime>:
void  increasedTime(uint8_t led)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
	lightbufferMod[led]++;
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	4a09      	ldr	r2, [pc, #36]	; (8000694 <increasedTime+0x34>)
 800066e:	5cd2      	ldrb	r2, [r2, r3]
 8000670:	3201      	adds	r2, #1
 8000672:	b2d1      	uxtb	r1, r2
 8000674:	4a07      	ldr	r2, [pc, #28]	; (8000694 <increasedTime+0x34>)
 8000676:	54d1      	strb	r1, [r2, r3]
	if(lightbufferMod[led]>99)
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	4a06      	ldr	r2, [pc, #24]	; (8000694 <increasedTime+0x34>)
 800067c:	5cd3      	ldrb	r3, [r2, r3]
 800067e:	2b63      	cmp	r3, #99	; 0x63
 8000680:	d903      	bls.n	800068a <increasedTime+0x2a>
	{
		lightbufferMod[led]=1;
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	4a03      	ldr	r2, [pc, #12]	; (8000694 <increasedTime+0x34>)
 8000686:	2101      	movs	r1, #1
 8000688:	54d1      	strb	r1, [r2, r3]
	}
}
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr
 8000694:	2000001c 	.word	0x2000001c

08000698 <updateMode>:
void updateMode()
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
	mode++;
 800069c:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <updateMode+0x28>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	3301      	adds	r3, #1
 80006a2:	b2da      	uxtb	r2, r3
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <updateMode+0x28>)
 80006a6:	701a      	strb	r2, [r3, #0]
	if(mode>4) mode=1;
 80006a8:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <updateMode+0x28>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b04      	cmp	r3, #4
 80006ae:	d902      	bls.n	80006b6 <updateMode+0x1e>
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <updateMode+0x28>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	701a      	strb	r2, [r3, #0]
}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	20000053 	.word	0x20000053

080006c4 <copyModtoRun>:
void copyModtoRun()
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
	for(int i=0;i<3;i++)
 80006ca:	2300      	movs	r3, #0
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	e00b      	b.n	80006e8 <copyModtoRun+0x24>
	{
		lightbufferRun[i]=lightbufferMod[i];
 80006d0:	4a0a      	ldr	r2, [pc, #40]	; (80006fc <copyModtoRun+0x38>)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4413      	add	r3, r2
 80006d6:	7819      	ldrb	r1, [r3, #0]
 80006d8:	4a09      	ldr	r2, [pc, #36]	; (8000700 <copyModtoRun+0x3c>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4413      	add	r3, r2
 80006de:	460a      	mov	r2, r1
 80006e0:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<3;i++)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	3301      	adds	r3, #1
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2b02      	cmp	r3, #2
 80006ec:	ddf0      	ble.n	80006d0 <copyModtoRun+0xc>
	}
}
 80006ee:	bf00      	nop
 80006f0:	bf00      	nop
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	2000001c 	.word	0x2000001c
 8000700:	20000020 	.word	0x20000020

08000704 <blinkLed>:
void blinkLed(uint8_t led)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]
	if((mode!=1)&&(blink_flag==1))
 800070e:	4b37      	ldr	r3, [pc, #220]	; (80007ec <blinkLed+0xe8>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b01      	cmp	r3, #1
 8000714:	d066      	beq.n	80007e4 <blinkLed+0xe0>
 8000716:	4b36      	ldr	r3, [pc, #216]	; (80007f0 <blinkLed+0xec>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d162      	bne.n	80007e4 <blinkLed+0xe0>
	{
		if(led==0)
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d11c      	bne.n	800075e <blinkLed+0x5a>
		{
			HAL_GPIO_TogglePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin);
 8000724:	2102      	movs	r1, #2
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <blinkLed+0xf0>)
<<<<<<< HEAD
 8000728:	f001 fb6f 	bl	8001e0a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin);
 800072c:	2110      	movs	r1, #16
 800072e:	4831      	ldr	r0, [pc, #196]	; (80007f4 <blinkLed+0xf0>)
 8000730:	f001 fb6b 	bl	8001e0a <HAL_GPIO_TogglePin>
=======
 8000728:	f001 fb0b 	bl	8001d42 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin);
 800072c:	2110      	movs	r1, #16
 800072e:	4831      	ldr	r0, [pc, #196]	; (80007f4 <blinkLed+0xf0>)
 8000730:	f001 fb07 	bl	8001d42 <HAL_GPIO_TogglePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
			HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 8000734:	2201      	movs	r2, #1
 8000736:	2104      	movs	r1, #4
 8000738:	482e      	ldr	r0, [pc, #184]	; (80007f4 <blinkLed+0xf0>)
<<<<<<< HEAD
 800073a:	f001 fb4e 	bl	8001dda <HAL_GPIO_WritePin>
=======
 800073a:	f001 faea 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
			HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 800073e:	2201      	movs	r2, #1
 8000740:	2120      	movs	r1, #32
 8000742:	482c      	ldr	r0, [pc, #176]	; (80007f4 <blinkLed+0xf0>)
<<<<<<< HEAD
 8000744:	f001 fb49 	bl	8001dda <HAL_GPIO_WritePin>
=======
 8000744:	f001 fae5 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8000748:	2201      	movs	r2, #1
 800074a:	2108      	movs	r1, #8
 800074c:	4829      	ldr	r0, [pc, #164]	; (80007f4 <blinkLed+0xf0>)
<<<<<<< HEAD
 800074e:	f001 fb44 	bl	8001dda <HAL_GPIO_WritePin>
=======
 800074e:	f001 fae0 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 8000752:	2201      	movs	r2, #1
 8000754:	2140      	movs	r1, #64	; 0x40
 8000756:	4827      	ldr	r0, [pc, #156]	; (80007f4 <blinkLed+0xf0>)
<<<<<<< HEAD
 8000758:	f001 fb3f 	bl	8001dda <HAL_GPIO_WritePin>
=======
 8000758:	f001 fadb 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
 800075c:	e03e      	b.n	80007dc <blinkLed+0xd8>
		}
		else if(led==1)
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	2b01      	cmp	r3, #1
 8000762:	d11c      	bne.n	800079e <blinkLed+0x9a>
		{
			HAL_GPIO_TogglePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin);
 8000764:	2104      	movs	r1, #4
 8000766:	4823      	ldr	r0, [pc, #140]	; (80007f4 <blinkLed+0xf0>)
<<<<<<< HEAD
 8000768:	f001 fb4f 	bl	8001e0a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin);
 800076c:	2120      	movs	r1, #32
 800076e:	4821      	ldr	r0, [pc, #132]	; (80007f4 <blinkLed+0xf0>)
 8000770:	f001 fb4b 	bl	8001e0a <HAL_GPIO_TogglePin>
=======
 8000768:	f001 faeb 	bl	8001d42 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin);
 800076c:	2120      	movs	r1, #32
 800076e:	4821      	ldr	r0, [pc, #132]	; (80007f4 <blinkLed+0xf0>)
 8000770:	f001 fae7 	bl	8001d42 <HAL_GPIO_TogglePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 8000774:	2201      	movs	r2, #1
 8000776:	2102      	movs	r1, #2
 8000778:	481e      	ldr	r0, [pc, #120]	; (80007f4 <blinkLed+0xf0>)
<<<<<<< HEAD
 800077a:	f001 fb2e 	bl	8001dda <HAL_GPIO_WritePin>
=======
 800077a:	f001 faca 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 800077e:	2201      	movs	r2, #1
 8000780:	2110      	movs	r1, #16
 8000782:	481c      	ldr	r0, [pc, #112]	; (80007f4 <blinkLed+0xf0>)
<<<<<<< HEAD
 8000784:	f001 fb29 	bl	8001dda <HAL_GPIO_WritePin>
=======
 8000784:	f001 fac5 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8000788:	2201      	movs	r2, #1
 800078a:	2108      	movs	r1, #8
 800078c:	4819      	ldr	r0, [pc, #100]	; (80007f4 <blinkLed+0xf0>)
<<<<<<< HEAD
 800078e:	f001 fb24 	bl	8001dda <HAL_GPIO_WritePin>
=======
 800078e:	f001 fac0 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 8000792:	2201      	movs	r2, #1
 8000794:	2140      	movs	r1, #64	; 0x40
 8000796:	4817      	ldr	r0, [pc, #92]	; (80007f4 <blinkLed+0xf0>)
<<<<<<< HEAD
 8000798:	f001 fb1f 	bl	8001dda <HAL_GPIO_WritePin>
=======
 8000798:	f001 fabb 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
 800079c:	e01e      	b.n	80007dc <blinkLed+0xd8>
		}
		else if(led==2)
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	2b02      	cmp	r3, #2
 80007a2:	d11b      	bne.n	80007dc <blinkLed+0xd8>
		{
			HAL_GPIO_TogglePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin);
 80007a4:	2108      	movs	r1, #8
 80007a6:	4813      	ldr	r0, [pc, #76]	; (80007f4 <blinkLed+0xf0>)
<<<<<<< HEAD
 80007a8:	f001 fb2f 	bl	8001e0a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin);
 80007ac:	2140      	movs	r1, #64	; 0x40
 80007ae:	4811      	ldr	r0, [pc, #68]	; (80007f4 <blinkLed+0xf0>)
 80007b0:	f001 fb2b 	bl	8001e0a <HAL_GPIO_TogglePin>
=======
 80007a8:	f001 facb 	bl	8001d42 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin);
 80007ac:	2140      	movs	r1, #64	; 0x40
 80007ae:	4811      	ldr	r0, [pc, #68]	; (80007f4 <blinkLed+0xf0>)
 80007b0:	f001 fac7 	bl	8001d42 <HAL_GPIO_TogglePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
			HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 80007b4:	2201      	movs	r2, #1
 80007b6:	2104      	movs	r1, #4
 80007b8:	480e      	ldr	r0, [pc, #56]	; (80007f4 <blinkLed+0xf0>)
<<<<<<< HEAD
 80007ba:	f001 fb0e 	bl	8001dda <HAL_GPIO_WritePin>
=======
 80007ba:	f001 faaa 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
			HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 80007be:	2201      	movs	r2, #1
 80007c0:	2120      	movs	r1, #32
 80007c2:	480c      	ldr	r0, [pc, #48]	; (80007f4 <blinkLed+0xf0>)
<<<<<<< HEAD
 80007c4:	f001 fb09 	bl	8001dda <HAL_GPIO_WritePin>
=======
 80007c4:	f001 faa5 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 80007c8:	2201      	movs	r2, #1
 80007ca:	2102      	movs	r1, #2
 80007cc:	4809      	ldr	r0, [pc, #36]	; (80007f4 <blinkLed+0xf0>)
<<<<<<< HEAD
 80007ce:	f001 fb04 	bl	8001dda <HAL_GPIO_WritePin>
=======
 80007ce:	f001 faa0 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 80007d2:	2201      	movs	r2, #1
 80007d4:	2110      	movs	r1, #16
 80007d6:	4807      	ldr	r0, [pc, #28]	; (80007f4 <blinkLed+0xf0>)
<<<<<<< HEAD
 80007d8:	f001 faff 	bl	8001dda <HAL_GPIO_WritePin>
		}
		setBlink(500);
 80007dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007e0:	f000 fefa 	bl	80015d8 <setBlink>
=======
 80007d8:	f001 fa9b 	bl	8001d12 <HAL_GPIO_WritePin>
		}
		setBlink(500);
 80007dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007e0:	f000 fe96 	bl	8001510 <setBlink>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
	}
}
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000053 	.word	0x20000053
 80007f0:	20000074 	.word	0x20000074
 80007f4:	40010800 	.word	0x40010800

080007f8 <fsm_automatic>:
void fsm_automatic()
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0

<<<<<<< HEAD

	if(is_button_pressed(button1))
 80007fc:	2000      	movs	r0, #0
 80007fe:	f7ff fd0b 	bl	8000218 <is_button_pressed>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d007      	beq.n	8000818 <fsm_automatic+0x20>
	{
		updateMode();
 8000808:	f7ff ff46 	bl	8000698 <updateMode>
		indexled=0;
 800080c:	4b92      	ldr	r3, [pc, #584]	; (8000a58 <fsm_automatic+0x260>)
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
		initial_flag=1;
 8000812:	4b92      	ldr	r3, [pc, #584]	; (8000a5c <fsm_automatic+0x264>)
 8000814:	2201      	movs	r2, #1
 8000816:	601a      	str	r2, [r3, #0]
	}
	switch(mode)
 8000818:	4b91      	ldr	r3, [pc, #580]	; (8000a60 <fsm_automatic+0x268>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	3b01      	subs	r3, #1
 800081e:	2b03      	cmp	r3, #3
 8000820:	f200 819b 	bhi.w	8000b5a <fsm_automatic+0x362>
 8000824:	a201      	add	r2, pc, #4	; (adr r2, 800082c <fsm_automatic+0x34>)
 8000826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800082a:	bf00      	nop
 800082c:	0800083d 	.word	0x0800083d
 8000830:	08000891 	.word	0x08000891
 8000834:	08000975 	.word	0x08000975
 8000838:	08000a89 	.word	0x08000a89
	{
	case 1:
		if(initial_flag==1)
 800083c:	4b87      	ldr	r3, [pc, #540]	; (8000a5c <fsm_automatic+0x264>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d11a      	bne.n	800087a <fsm_automatic+0x82>
		{
			initial_flag=0;
 8000844:	4b85      	ldr	r3, [pc, #532]	; (8000a5c <fsm_automatic+0x264>)
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
			status=AUTO_RED;
 800084a:	4b86      	ldr	r3, [pc, #536]	; (8000a64 <fsm_automatic+0x26c>)
 800084c:	2202      	movs	r2, #2
 800084e:	601a      	str	r2, [r3, #0]
			status2=AUTO_GREEN;
 8000850:	4b85      	ldr	r3, [pc, #532]	; (8000a68 <fsm_automatic+0x270>)
 8000852:	2204      	movs	r2, #4
 8000854:	601a      	str	r2, [r3, #0]
			time1=lightbufferRun[0];
 8000856:	4b85      	ldr	r3, [pc, #532]	; (8000a6c <fsm_automatic+0x274>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	461a      	mov	r2, r3
 800085c:	4b84      	ldr	r3, [pc, #528]	; (8000a70 <fsm_automatic+0x278>)
 800085e:	601a      	str	r2, [r3, #0]
			time2=lightbufferRun[2];
 8000860:	4b82      	ldr	r3, [pc, #520]	; (8000a6c <fsm_automatic+0x274>)
 8000862:	789b      	ldrb	r3, [r3, #2]
 8000864:	461a      	mov	r2, r3
 8000866:	4b83      	ldr	r3, [pc, #524]	; (8000a74 <fsm_automatic+0x27c>)
 8000868:	601a      	str	r2, [r3, #0]
			indexled=0;
 800086a:	4b7b      	ldr	r3, [pc, #492]	; (8000a58 <fsm_automatic+0x260>)
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000870:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000874:	f000 fecc 	bl	8001610 <setTimer1>
		}
		else
		{traffic();
		updatebuffer(time1, time2);
		}
		break;
 8000878:	e16f      	b.n	8000b5a <fsm_automatic+0x362>
		{traffic();
 800087a:	f7ff fdaf 	bl	80003dc <traffic>
		updatebuffer(time1, time2);
 800087e:	4b7c      	ldr	r3, [pc, #496]	; (8000a70 <fsm_automatic+0x278>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a7c      	ldr	r2, [pc, #496]	; (8000a74 <fsm_automatic+0x27c>)
 8000884:	6812      	ldr	r2, [r2, #0]
 8000886:	4611      	mov	r1, r2
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff fd37 	bl	80002fc <updatebuffer>
		break;
 800088e:	e164      	b.n	8000b5a <fsm_automatic+0x362>
	case 2:

		if(initial_flag==1)
 8000890:	4b72      	ldr	r3, [pc, #456]	; (8000a5c <fsm_automatic+0x264>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b01      	cmp	r3, #1
 8000896:	d113      	bne.n	80008c0 <fsm_automatic+0xc8>
		{setTimer2(5000);
 8000898:	f241 3088 	movw	r0, #5000	; 0x1388
 800089c:	f000 fed4 	bl	8001648 <setTimer2>
		blink_flag=1;
 80008a0:	4b75      	ldr	r3, [pc, #468]	; (8000a78 <fsm_automatic+0x280>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	601a      	str	r2, [r3, #0]
		initial_flag=0;
 80008a6:	4b6d      	ldr	r3, [pc, #436]	; (8000a5c <fsm_automatic+0x264>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 80008ac:	2201      	movs	r2, #1
 80008ae:	2102      	movs	r1, #2
 80008b0:	4872      	ldr	r0, [pc, #456]	; (8000a7c <fsm_automatic+0x284>)
 80008b2:	f001 fa92 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 80008b6:	2201      	movs	r2, #1
 80008b8:	2110      	movs	r1, #16
 80008ba:	4870      	ldr	r0, [pc, #448]	; (8000a7c <fsm_automatic+0x284>)
 80008bc:	f001 fa8d 	bl	8001dda <HAL_GPIO_WritePin>
		}
		blinkLed(RED);
 80008c0:	2000      	movs	r0, #0
 80008c2:	f7ff ff1f 	bl	8000704 <blinkLed>
		if(is_button_pressed(button2))
 80008c6:	2001      	movs	r0, #1
 80008c8:	f7ff fca6 	bl	8000218 <is_button_pressed>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d015      	beq.n	80008fe <fsm_automatic+0x106>
		{
			status=MAN_RED;
 80008d2:	4b64      	ldr	r3, [pc, #400]	; (8000a64 <fsm_automatic+0x26c>)
 80008d4:	220c      	movs	r2, #12
 80008d6:	601a      	str	r2, [r3, #0]
			status2=MAN_RED;
 80008d8:	4b63      	ldr	r3, [pc, #396]	; (8000a68 <fsm_automatic+0x270>)
 80008da:	220c      	movs	r2, #12
 80008dc:	601a      	str	r2, [r3, #0]
			setTimer2(5000);
 80008de:	f241 3088 	movw	r0, #5000	; 0x1388
 80008e2:	f000 feb1 	bl	8001648 <setTimer2>
			increasedTime(0);
 80008e6:	2000      	movs	r0, #0
 80008e8:	f7ff feba 	bl	8000660 <increasedTime>
			updatebuffer(mode, lightbufferMod[2]);
 80008ec:	4b5c      	ldr	r3, [pc, #368]	; (8000a60 <fsm_automatic+0x268>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	461a      	mov	r2, r3
 80008f2:	4b63      	ldr	r3, [pc, #396]	; (8000a80 <fsm_automatic+0x288>)
 80008f4:	789b      	ldrb	r3, [r3, #2]
 80008f6:	4619      	mov	r1, r3
 80008f8:	4610      	mov	r0, r2
 80008fa:	f7ff fcff 	bl	80002fc <updatebuffer>
		}
		if(is_button_pressed(button3))
 80008fe:	2002      	movs	r0, #2
 8000900:	f7ff fc8a 	bl	8000218 <is_button_pressed>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d01a      	beq.n	8000940 <fsm_automatic+0x148>
		{
			copyModtoRun();
 800090a:	f7ff fedb 	bl	80006c4 <copyModtoRun>
			mode=1;
 800090e:	4b54      	ldr	r3, [pc, #336]	; (8000a60 <fsm_automatic+0x268>)
 8000910:	2201      	movs	r2, #1
 8000912:	701a      	strb	r2, [r3, #0]
			indexled=0;
 8000914:	4b50      	ldr	r3, [pc, #320]	; (8000a58 <fsm_automatic+0x260>)
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
			time1=lightbufferRun[0];
 800091a:	4b54      	ldr	r3, [pc, #336]	; (8000a6c <fsm_automatic+0x274>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	461a      	mov	r2, r3
 8000920:	4b53      	ldr	r3, [pc, #332]	; (8000a70 <fsm_automatic+0x278>)
 8000922:	601a      	str	r2, [r3, #0]
			time2=lightbufferRun[2];
 8000924:	4b51      	ldr	r3, [pc, #324]	; (8000a6c <fsm_automatic+0x274>)
 8000926:	789b      	ldrb	r3, [r3, #2]
 8000928:	461a      	mov	r2, r3
 800092a:	4b52      	ldr	r3, [pc, #328]	; (8000a74 <fsm_automatic+0x27c>)
 800092c:	601a      	str	r2, [r3, #0]
			status=AUTO_RED;
 800092e:	4b4d      	ldr	r3, [pc, #308]	; (8000a64 <fsm_automatic+0x26c>)
 8000930:	2202      	movs	r2, #2
 8000932:	601a      	str	r2, [r3, #0]
			status2=AUTO_GREEN;
 8000934:	4b4c      	ldr	r3, [pc, #304]	; (8000a68 <fsm_automatic+0x270>)
 8000936:	2204      	movs	r2, #4
 8000938:	601a      	str	r2, [r3, #0]
			initial_flag=1;
 800093a:	4b48      	ldr	r3, [pc, #288]	; (8000a5c <fsm_automatic+0x264>)
 800093c:	2201      	movs	r2, #1
 800093e:	601a      	str	r2, [r3, #0]
		}
		if(timer2_flag==1)
 8000940:	4b50      	ldr	r3, [pc, #320]	; (8000a84 <fsm_automatic+0x28c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b01      	cmp	r3, #1
 8000946:	d10b      	bne.n	8000960 <fsm_automatic+0x168>
		{
			status=AUTO_RED;
 8000948:	4b46      	ldr	r3, [pc, #280]	; (8000a64 <fsm_automatic+0x26c>)
 800094a:	2202      	movs	r2, #2
 800094c:	601a      	str	r2, [r3, #0]
			status2=AUTO_GREEN;
 800094e:	4b46      	ldr	r3, [pc, #280]	; (8000a68 <fsm_automatic+0x270>)
 8000950:	2204      	movs	r2, #4
 8000952:	601a      	str	r2, [r3, #0]
			mode=1;
 8000954:	4b42      	ldr	r3, [pc, #264]	; (8000a60 <fsm_automatic+0x268>)
 8000956:	2201      	movs	r2, #1
 8000958:	701a      	strb	r2, [r3, #0]
			initial_flag=1;
 800095a:	4b40      	ldr	r3, [pc, #256]	; (8000a5c <fsm_automatic+0x264>)
 800095c:	2201      	movs	r2, #1
 800095e:	601a      	str	r2, [r3, #0]
		}
		updatebuffer(mode, lightbufferMod[0]);
 8000960:	4b3f      	ldr	r3, [pc, #252]	; (8000a60 <fsm_automatic+0x268>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	461a      	mov	r2, r3
 8000966:	4b46      	ldr	r3, [pc, #280]	; (8000a80 <fsm_automatic+0x288>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	4619      	mov	r1, r3
 800096c:	4610      	mov	r0, r2
 800096e:	f7ff fcc5 	bl	80002fc <updatebuffer>
		break;
 8000972:	e0f2      	b.n	8000b5a <fsm_automatic+0x362>
	case 3:
		if(initial_flag==1)
 8000974:	4b39      	ldr	r3, [pc, #228]	; (8000a5c <fsm_automatic+0x264>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2b01      	cmp	r3, #1
 800097a:	d113      	bne.n	80009a4 <fsm_automatic+0x1ac>
		{setTimer2(5000);
 800097c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000980:	f000 fe62 	bl	8001648 <setTimer2>
		blink_flag=1;
 8000984:	4b3c      	ldr	r3, [pc, #240]	; (8000a78 <fsm_automatic+0x280>)
 8000986:	2201      	movs	r2, #1
 8000988:	601a      	str	r2, [r3, #0]
		initial_flag=0;
 800098a:	4b34      	ldr	r3, [pc, #208]	; (8000a5c <fsm_automatic+0x264>)
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 8000990:	2201      	movs	r2, #1
 8000992:	2104      	movs	r1, #4
 8000994:	4839      	ldr	r0, [pc, #228]	; (8000a7c <fsm_automatic+0x284>)
 8000996:	f001 fa20 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 800099a:	2201      	movs	r2, #1
 800099c:	2120      	movs	r1, #32
 800099e:	4837      	ldr	r0, [pc, #220]	; (8000a7c <fsm_automatic+0x284>)
 80009a0:	f001 fa1b 	bl	8001dda <HAL_GPIO_WritePin>
		}
		blinkLed(AMBER);
 80009a4:	2001      	movs	r0, #1
 80009a6:	f7ff fead 	bl	8000704 <blinkLed>
		if(is_button_pressed(button2))
 80009aa:	2001      	movs	r0, #1
 80009ac:	f7ff fc34 	bl	8000218 <is_button_pressed>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d015      	beq.n	80009e2 <fsm_automatic+0x1ea>
		{
			status=MAN_YELLOW;
 80009b6:	4b2b      	ldr	r3, [pc, #172]	; (8000a64 <fsm_automatic+0x26c>)
 80009b8:	220d      	movs	r2, #13
 80009ba:	601a      	str	r2, [r3, #0]
			status2=MAN_YELLOW;
 80009bc:	4b2a      	ldr	r3, [pc, #168]	; (8000a68 <fsm_automatic+0x270>)
 80009be:	220d      	movs	r2, #13
 80009c0:	601a      	str	r2, [r3, #0]
			setTimer2(5000);
 80009c2:	f241 3088 	movw	r0, #5000	; 0x1388
 80009c6:	f000 fe3f 	bl	8001648 <setTimer2>
			increasedTime(1);
 80009ca:	2001      	movs	r0, #1
 80009cc:	f7ff fe48 	bl	8000660 <increasedTime>
			updatebuffer(mode, lightbufferMod[2]);
 80009d0:	4b23      	ldr	r3, [pc, #140]	; (8000a60 <fsm_automatic+0x268>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	461a      	mov	r2, r3
 80009d6:	4b2a      	ldr	r3, [pc, #168]	; (8000a80 <fsm_automatic+0x288>)
 80009d8:	789b      	ldrb	r3, [r3, #2]
 80009da:	4619      	mov	r1, r3
 80009dc:	4610      	mov	r0, r2
 80009de:	f7ff fc8d 	bl	80002fc <updatebuffer>
		}
		if(is_button_pressed(button3))
 80009e2:	2002      	movs	r0, #2
 80009e4:	f7ff fc18 	bl	8000218 <is_button_pressed>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d01a      	beq.n	8000a24 <fsm_automatic+0x22c>
		{
			copyModtoRun();
 80009ee:	f7ff fe69 	bl	80006c4 <copyModtoRun>
			mode=1;
 80009f2:	4b1b      	ldr	r3, [pc, #108]	; (8000a60 <fsm_automatic+0x268>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	701a      	strb	r2, [r3, #0]
			indexled=0;
 80009f8:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <fsm_automatic+0x260>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
			time1=lightbufferRun[0];
 80009fe:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <fsm_automatic+0x274>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	461a      	mov	r2, r3
 8000a04:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <fsm_automatic+0x278>)
 8000a06:	601a      	str	r2, [r3, #0]
			time2=lightbufferRun[2];
 8000a08:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <fsm_automatic+0x274>)
 8000a0a:	789b      	ldrb	r3, [r3, #2]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <fsm_automatic+0x27c>)
 8000a10:	601a      	str	r2, [r3, #0]
			status=AUTO_RED;
 8000a12:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <fsm_automatic+0x26c>)
 8000a14:	2202      	movs	r2, #2
 8000a16:	601a      	str	r2, [r3, #0]
			status2=AUTO_GREEN;
 8000a18:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <fsm_automatic+0x270>)
 8000a1a:	2204      	movs	r2, #4
 8000a1c:	601a      	str	r2, [r3, #0]
			initial_flag=1;
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <fsm_automatic+0x264>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	601a      	str	r2, [r3, #0]
		}
		if(timer2_flag==1)
 8000a24:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <fsm_automatic+0x28c>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d10b      	bne.n	8000a44 <fsm_automatic+0x24c>
		{
			status=AUTO_RED;
 8000a2c:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <fsm_automatic+0x26c>)
 8000a2e:	2202      	movs	r2, #2
 8000a30:	601a      	str	r2, [r3, #0]
			status2=AUTO_GREEN;
 8000a32:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <fsm_automatic+0x270>)
 8000a34:	2204      	movs	r2, #4
 8000a36:	601a      	str	r2, [r3, #0]
			mode=1;
 8000a38:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <fsm_automatic+0x268>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	701a      	strb	r2, [r3, #0]
			initial_flag=1;
 8000a3e:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <fsm_automatic+0x264>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	601a      	str	r2, [r3, #0]
		}
		updatebuffer(mode, lightbufferMod[1]);
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <fsm_automatic+0x268>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <fsm_automatic+0x288>)
 8000a4c:	785b      	ldrb	r3, [r3, #1]
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4610      	mov	r0, r2
 8000a52:	f7ff fc53 	bl	80002fc <updatebuffer>
		break;
 8000a56:	e080      	b.n	8000b5a <fsm_automatic+0x362>
 8000a58:	2000005c 	.word	0x2000005c
 8000a5c:	20000060 	.word	0x20000060
 8000a60:	20000053 	.word	0x20000053
 8000a64:	20000064 	.word	0x20000064
 8000a68:	20000068 	.word	0x20000068
 8000a6c:	20000020 	.word	0x20000020
 8000a70:	20000054 	.word	0x20000054
 8000a74:	20000058 	.word	0x20000058
 8000a78:	20000074 	.word	0x20000074
 8000a7c:	40010800 	.word	0x40010800
 8000a80:	2000001c 	.word	0x2000001c
 8000a84:	2000007c 	.word	0x2000007c
	case 4:
		if(initial_flag==1)
 8000a88:	4b40      	ldr	r3, [pc, #256]	; (8000b8c <fsm_automatic+0x394>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d113      	bne.n	8000ab8 <fsm_automatic+0x2c0>
		{setTimer2(5000);
 8000a90:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a94:	f000 fdd8 	bl	8001648 <setTimer2>
		blink_flag=1;
 8000a98:	4b3d      	ldr	r3, [pc, #244]	; (8000b90 <fsm_automatic+0x398>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	601a      	str	r2, [r3, #0]
		initial_flag=0;
 8000a9e:	4b3b      	ldr	r3, [pc, #236]	; (8000b8c <fsm_automatic+0x394>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	2108      	movs	r1, #8
 8000aa8:	483a      	ldr	r0, [pc, #232]	; (8000b94 <fsm_automatic+0x39c>)
 8000aaa:	f001 f996 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 8000aae:	2201      	movs	r2, #1
 8000ab0:	2140      	movs	r1, #64	; 0x40
 8000ab2:	4838      	ldr	r0, [pc, #224]	; (8000b94 <fsm_automatic+0x39c>)
 8000ab4:	f001 f991 	bl	8001dda <HAL_GPIO_WritePin>
		}
		blinkLed(GREEN);
 8000ab8:	2002      	movs	r0, #2
 8000aba:	f7ff fe23 	bl	8000704 <blinkLed>
		if(is_button_pressed(button2))
 8000abe:	2001      	movs	r0, #1
 8000ac0:	f7ff fbaa 	bl	8000218 <is_button_pressed>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d015      	beq.n	8000af6 <fsm_automatic+0x2fe>
		{
			status=MAN_GREEN;
 8000aca:	4b33      	ldr	r3, [pc, #204]	; (8000b98 <fsm_automatic+0x3a0>)
 8000acc:	220e      	movs	r2, #14
 8000ace:	601a      	str	r2, [r3, #0]
			status2=MAN_GREEN;
 8000ad0:	4b32      	ldr	r3, [pc, #200]	; (8000b9c <fsm_automatic+0x3a4>)
 8000ad2:	220e      	movs	r2, #14
 8000ad4:	601a      	str	r2, [r3, #0]
			setTimer2(5000);
 8000ad6:	f241 3088 	movw	r0, #5000	; 0x1388
 8000ada:	f000 fdb5 	bl	8001648 <setTimer2>
			increasedTime(2);
 8000ade:	2002      	movs	r0, #2
 8000ae0:	f7ff fdbe 	bl	8000660 <increasedTime>
			updatebuffer(mode, lightbufferMod[2]);
 8000ae4:	4b2e      	ldr	r3, [pc, #184]	; (8000ba0 <fsm_automatic+0x3a8>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4b2e      	ldr	r3, [pc, #184]	; (8000ba4 <fsm_automatic+0x3ac>)
 8000aec:	789b      	ldrb	r3, [r3, #2]
 8000aee:	4619      	mov	r1, r3
 8000af0:	4610      	mov	r0, r2
 8000af2:	f7ff fc03 	bl	80002fc <updatebuffer>
		}
		if(is_button_pressed(button3))
 8000af6:	2002      	movs	r0, #2
 8000af8:	f7ff fb8e 	bl	8000218 <is_button_pressed>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d01a      	beq.n	8000b38 <fsm_automatic+0x340>
		{
			copyModtoRun();
 8000b02:	f7ff fddf 	bl	80006c4 <copyModtoRun>
			mode=1;
 8000b06:	4b26      	ldr	r3, [pc, #152]	; (8000ba0 <fsm_automatic+0x3a8>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	701a      	strb	r2, [r3, #0]
			indexled=0;
 8000b0c:	4b26      	ldr	r3, [pc, #152]	; (8000ba8 <fsm_automatic+0x3b0>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
			time1=lightbufferRun[0];
 8000b12:	4b26      	ldr	r3, [pc, #152]	; (8000bac <fsm_automatic+0x3b4>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	461a      	mov	r2, r3
 8000b18:	4b25      	ldr	r3, [pc, #148]	; (8000bb0 <fsm_automatic+0x3b8>)
 8000b1a:	601a      	str	r2, [r3, #0]
			time2=lightbufferRun[2];
 8000b1c:	4b23      	ldr	r3, [pc, #140]	; (8000bac <fsm_automatic+0x3b4>)
 8000b1e:	789b      	ldrb	r3, [r3, #2]
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b24      	ldr	r3, [pc, #144]	; (8000bb4 <fsm_automatic+0x3bc>)
 8000b24:	601a      	str	r2, [r3, #0]
			status=AUTO_RED;
 8000b26:	4b1c      	ldr	r3, [pc, #112]	; (8000b98 <fsm_automatic+0x3a0>)
 8000b28:	2202      	movs	r2, #2
 8000b2a:	601a      	str	r2, [r3, #0]
			status2=AUTO_GREEN;
 8000b2c:	4b1b      	ldr	r3, [pc, #108]	; (8000b9c <fsm_automatic+0x3a4>)
 8000b2e:	2204      	movs	r2, #4
 8000b30:	601a      	str	r2, [r3, #0]
			initial_flag=1;
 8000b32:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <fsm_automatic+0x394>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	601a      	str	r2, [r3, #0]
		}
		if(timer2_flag==1)
 8000b38:	4b1f      	ldr	r3, [pc, #124]	; (8000bb8 <fsm_automatic+0x3c0>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d10b      	bne.n	8000b58 <fsm_automatic+0x360>
		{
			status=AUTO_RED;
 8000b40:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <fsm_automatic+0x3a0>)
 8000b42:	2202      	movs	r2, #2
 8000b44:	601a      	str	r2, [r3, #0]
			status2=AUTO_GREEN;
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <fsm_automatic+0x3a4>)
 8000b48:	2204      	movs	r2, #4
 8000b4a:	601a      	str	r2, [r3, #0]
			mode=1;
 8000b4c:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <fsm_automatic+0x3a8>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	701a      	strb	r2, [r3, #0]
			initial_flag=1;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <fsm_automatic+0x394>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	601a      	str	r2, [r3, #0]
		}

		break;
 8000b58:	bf00      	nop
	}
	if(segment_flag==1)
 8000b5a:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <fsm_automatic+0x3c4>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d112      	bne.n	8000b88 <fsm_automatic+0x390>
	{
	update7SEG(indexled++);
 8000b62:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <fsm_automatic+0x3b0>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	1c5a      	adds	r2, r3, #1
 8000b68:	490f      	ldr	r1, [pc, #60]	; (8000ba8 <fsm_automatic+0x3b0>)
 8000b6a:	600a      	str	r2, [r1, #0]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff fb6d 	bl	800024c <update7SEG>
	if(indexled>1)
 8000b72:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <fsm_automatic+0x3b0>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	dd02      	ble.n	8000b80 <fsm_automatic+0x388>
	{
		indexled=0;
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <fsm_automatic+0x3b0>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
	}
	setTimer3(500);
 8000b80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b84:	f000 fd7c 	bl	8001680 <setTimer3>
	}
}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000060 	.word	0x20000060
 8000b90:	20000074 	.word	0x20000074
 8000b94:	40010800 	.word	0x40010800
 8000b98:	20000064 	.word	0x20000064
 8000b9c:	20000068 	.word	0x20000068
 8000ba0:	20000053 	.word	0x20000053
 8000ba4:	2000001c 	.word	0x2000001c
 8000ba8:	2000005c 	.word	0x2000005c
 8000bac:	20000020 	.word	0x20000020
 8000bb0:	20000054 	.word	0x20000054
 8000bb4:	20000058 	.word	0x20000058
 8000bb8:	2000007c 	.word	0x2000007c
 8000bbc:	20000088 	.word	0x20000088

08000bc0 <display7SEG>:
=======
	if(is_button_pressed(button3))
 80007fc:	2002      	movs	r0, #2
 80007fe:	f7ff fd0b 	bl	8000218 <is_button_pressed>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d01a      	beq.n	800083e <fsm_automatic+0x46>
	{
		copyModtoRun();
 8000808:	f7ff ff5c 	bl	80006c4 <copyModtoRun>
		mode=1;
 800080c:	4bad      	ldr	r3, [pc, #692]	; (8000ac4 <fsm_automatic+0x2cc>)
 800080e:	2201      	movs	r2, #1
 8000810:	701a      	strb	r2, [r3, #0]
		indexled=0;
 8000812:	4bad      	ldr	r3, [pc, #692]	; (8000ac8 <fsm_automatic+0x2d0>)
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
		time1=lightbufferRun[0];
 8000818:	4bac      	ldr	r3, [pc, #688]	; (8000acc <fsm_automatic+0x2d4>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	461a      	mov	r2, r3
 800081e:	4bac      	ldr	r3, [pc, #688]	; (8000ad0 <fsm_automatic+0x2d8>)
 8000820:	601a      	str	r2, [r3, #0]
		time2=lightbufferRun[2];
 8000822:	4baa      	ldr	r3, [pc, #680]	; (8000acc <fsm_automatic+0x2d4>)
 8000824:	789b      	ldrb	r3, [r3, #2]
 8000826:	461a      	mov	r2, r3
 8000828:	4baa      	ldr	r3, [pc, #680]	; (8000ad4 <fsm_automatic+0x2dc>)
 800082a:	601a      	str	r2, [r3, #0]
		status=AUTO_RED;
 800082c:	4baa      	ldr	r3, [pc, #680]	; (8000ad8 <fsm_automatic+0x2e0>)
 800082e:	2202      	movs	r2, #2
 8000830:	601a      	str	r2, [r3, #0]
		status2=AUTO_GREEN;
 8000832:	4baa      	ldr	r3, [pc, #680]	; (8000adc <fsm_automatic+0x2e4>)
 8000834:	2204      	movs	r2, #4
 8000836:	601a      	str	r2, [r3, #0]
		initial_flag=1;
 8000838:	4ba9      	ldr	r3, [pc, #676]	; (8000ae0 <fsm_automatic+0x2e8>)
 800083a:	2201      	movs	r2, #1
 800083c:	601a      	str	r2, [r3, #0]
	}
	if(is_button_pressed(button1))
 800083e:	2000      	movs	r0, #0
 8000840:	f7ff fcea 	bl	8000218 <is_button_pressed>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d007      	beq.n	800085a <fsm_automatic+0x62>
	{
		updateMode();
 800084a:	f7ff ff25 	bl	8000698 <updateMode>
		indexled=0;
 800084e:	4b9e      	ldr	r3, [pc, #632]	; (8000ac8 <fsm_automatic+0x2d0>)
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
		initial_flag=1;
 8000854:	4ba2      	ldr	r3, [pc, #648]	; (8000ae0 <fsm_automatic+0x2e8>)
 8000856:	2201      	movs	r2, #1
 8000858:	601a      	str	r2, [r3, #0]
	}
	switch(mode)
 800085a:	4b9a      	ldr	r3, [pc, #616]	; (8000ac4 <fsm_automatic+0x2cc>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	3b01      	subs	r3, #1
 8000860:	2b03      	cmp	r3, #3
 8000862:	f200 8116 	bhi.w	8000a92 <fsm_automatic+0x29a>
 8000866:	a201      	add	r2, pc, #4	; (adr r2, 800086c <fsm_automatic+0x74>)
 8000868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800086c:	0800087d 	.word	0x0800087d
 8000870:	080008e3 	.word	0x080008e3
 8000874:	08000973 	.word	0x08000973
 8000878:	08000a03 	.word	0x08000a03
	{
	case 1:
		if(initial_flag==1)
 800087c:	4b98      	ldr	r3, [pc, #608]	; (8000ae0 <fsm_automatic+0x2e8>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b01      	cmp	r3, #1
 8000882:	d123      	bne.n	80008cc <fsm_automatic+0xd4>
		{
			initial_flag=0;
 8000884:	4b96      	ldr	r3, [pc, #600]	; (8000ae0 <fsm_automatic+0x2e8>)
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
			status=AUTO_RED;
 800088a:	4b93      	ldr	r3, [pc, #588]	; (8000ad8 <fsm_automatic+0x2e0>)
 800088c:	2202      	movs	r2, #2
 800088e:	601a      	str	r2, [r3, #0]
			status2=AUTO_GREEN;
 8000890:	4b92      	ldr	r3, [pc, #584]	; (8000adc <fsm_automatic+0x2e4>)
 8000892:	2204      	movs	r2, #4
 8000894:	601a      	str	r2, [r3, #0]
			time1=lightbufferRun[0];
 8000896:	4b8d      	ldr	r3, [pc, #564]	; (8000acc <fsm_automatic+0x2d4>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	461a      	mov	r2, r3
 800089c:	4b8c      	ldr	r3, [pc, #560]	; (8000ad0 <fsm_automatic+0x2d8>)
 800089e:	601a      	str	r2, [r3, #0]
			time2=lightbufferRun[2];
 80008a0:	4b8a      	ldr	r3, [pc, #552]	; (8000acc <fsm_automatic+0x2d4>)
 80008a2:	789b      	ldrb	r3, [r3, #2]
 80008a4:	461a      	mov	r2, r3
 80008a6:	4b8b      	ldr	r3, [pc, #556]	; (8000ad4 <fsm_automatic+0x2dc>)
 80008a8:	601a      	str	r2, [r3, #0]
			indexled=0;
 80008aa:	4b87      	ldr	r3, [pc, #540]	; (8000ac8 <fsm_automatic+0x2d0>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 80008b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008b4:	f000 fe48 	bl	8001548 <setTimer1>
			lightbufferMod[0]=1;
 80008b8:	4b8a      	ldr	r3, [pc, #552]	; (8000ae4 <fsm_automatic+0x2ec>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	701a      	strb	r2, [r3, #0]
			lightbufferMod[1]=1;
 80008be:	4b89      	ldr	r3, [pc, #548]	; (8000ae4 <fsm_automatic+0x2ec>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	705a      	strb	r2, [r3, #1]
			lightbufferMod[2]=1;
 80008c4:	4b87      	ldr	r3, [pc, #540]	; (8000ae4 <fsm_automatic+0x2ec>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	709a      	strb	r2, [r3, #2]
 80008ca:	e001      	b.n	80008d0 <fsm_automatic+0xd8>
		}
		else
			{traffic();}
 80008cc:	f7ff fd86 	bl	80003dc <traffic>
		updatebuffer(time1, time2);
 80008d0:	4b7f      	ldr	r3, [pc, #508]	; (8000ad0 <fsm_automatic+0x2d8>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a7f      	ldr	r2, [pc, #508]	; (8000ad4 <fsm_automatic+0x2dc>)
 80008d6:	6812      	ldr	r2, [r2, #0]
 80008d8:	4611      	mov	r1, r2
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff fd0e 	bl	80002fc <updatebuffer>
		break;
 80008e0:	e0d7      	b.n	8000a92 <fsm_automatic+0x29a>
	case 2:

		if(initial_flag==1)
 80008e2:	4b7f      	ldr	r3, [pc, #508]	; (8000ae0 <fsm_automatic+0x2e8>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d113      	bne.n	8000912 <fsm_automatic+0x11a>
		{setTimer2(5000);
 80008ea:	f241 3088 	movw	r0, #5000	; 0x1388
 80008ee:	f000 fe47 	bl	8001580 <setTimer2>
		blink_flag=1;
 80008f2:	4b7d      	ldr	r3, [pc, #500]	; (8000ae8 <fsm_automatic+0x2f0>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	601a      	str	r2, [r3, #0]
		initial_flag=0;
 80008f8:	4b79      	ldr	r3, [pc, #484]	; (8000ae0 <fsm_automatic+0x2e8>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 80008fe:	2201      	movs	r2, #1
 8000900:	2102      	movs	r1, #2
 8000902:	487a      	ldr	r0, [pc, #488]	; (8000aec <fsm_automatic+0x2f4>)
 8000904:	f001 fa05 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 8000908:	2201      	movs	r2, #1
 800090a:	2110      	movs	r1, #16
 800090c:	4877      	ldr	r0, [pc, #476]	; (8000aec <fsm_automatic+0x2f4>)
 800090e:	f001 fa00 	bl	8001d12 <HAL_GPIO_WritePin>
		}
		blinkLed(RED);
 8000912:	2000      	movs	r0, #0
 8000914:	f7ff fef6 	bl	8000704 <blinkLed>
		if(is_button_pressed(button2))
 8000918:	2001      	movs	r0, #1
 800091a:	f7ff fc7d 	bl	8000218 <is_button_pressed>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d00c      	beq.n	800093e <fsm_automatic+0x146>
		{
			status=MAN_RED;
 8000924:	4b6c      	ldr	r3, [pc, #432]	; (8000ad8 <fsm_automatic+0x2e0>)
 8000926:	220c      	movs	r2, #12
 8000928:	601a      	str	r2, [r3, #0]
			status2=MAN_RED;
 800092a:	4b6c      	ldr	r3, [pc, #432]	; (8000adc <fsm_automatic+0x2e4>)
 800092c:	220c      	movs	r2, #12
 800092e:	601a      	str	r2, [r3, #0]
			setTimer2(5000);
 8000930:	f241 3088 	movw	r0, #5000	; 0x1388
 8000934:	f000 fe24 	bl	8001580 <setTimer2>
			increasedTime(0);
 8000938:	2000      	movs	r0, #0
 800093a:	f7ff fe91 	bl	8000660 <increasedTime>
		}
		if(timer2_flag==1)
 800093e:	4b6c      	ldr	r3, [pc, #432]	; (8000af0 <fsm_automatic+0x2f8>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	2b01      	cmp	r3, #1
 8000944:	d10b      	bne.n	800095e <fsm_automatic+0x166>
		{
			status=AUTO_RED;
 8000946:	4b64      	ldr	r3, [pc, #400]	; (8000ad8 <fsm_automatic+0x2e0>)
 8000948:	2202      	movs	r2, #2
 800094a:	601a      	str	r2, [r3, #0]
			status2=AUTO_GREEN;
 800094c:	4b63      	ldr	r3, [pc, #396]	; (8000adc <fsm_automatic+0x2e4>)
 800094e:	2204      	movs	r2, #4
 8000950:	601a      	str	r2, [r3, #0]
			mode=1;
 8000952:	4b5c      	ldr	r3, [pc, #368]	; (8000ac4 <fsm_automatic+0x2cc>)
 8000954:	2201      	movs	r2, #1
 8000956:	701a      	strb	r2, [r3, #0]
			initial_flag=1;
 8000958:	4b61      	ldr	r3, [pc, #388]	; (8000ae0 <fsm_automatic+0x2e8>)
 800095a:	2201      	movs	r2, #1
 800095c:	601a      	str	r2, [r3, #0]
		}
		updatebuffer(mode, lightbufferMod[0]);
 800095e:	4b59      	ldr	r3, [pc, #356]	; (8000ac4 <fsm_automatic+0x2cc>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	461a      	mov	r2, r3
 8000964:	4b5f      	ldr	r3, [pc, #380]	; (8000ae4 <fsm_automatic+0x2ec>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	4619      	mov	r1, r3
 800096a:	4610      	mov	r0, r2
 800096c:	f7ff fcc6 	bl	80002fc <updatebuffer>
		break;
 8000970:	e08f      	b.n	8000a92 <fsm_automatic+0x29a>
	case 3:
		if(initial_flag==1)
 8000972:	4b5b      	ldr	r3, [pc, #364]	; (8000ae0 <fsm_automatic+0x2e8>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d113      	bne.n	80009a2 <fsm_automatic+0x1aa>
		{setTimer2(5000);
 800097a:	f241 3088 	movw	r0, #5000	; 0x1388
 800097e:	f000 fdff 	bl	8001580 <setTimer2>
		blink_flag=1;
 8000982:	4b59      	ldr	r3, [pc, #356]	; (8000ae8 <fsm_automatic+0x2f0>)
 8000984:	2201      	movs	r2, #1
 8000986:	601a      	str	r2, [r3, #0]
		initial_flag=0;
 8000988:	4b55      	ldr	r3, [pc, #340]	; (8000ae0 <fsm_automatic+0x2e8>)
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 800098e:	2201      	movs	r2, #1
 8000990:	2104      	movs	r1, #4
 8000992:	4856      	ldr	r0, [pc, #344]	; (8000aec <fsm_automatic+0x2f4>)
 8000994:	f001 f9bd 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 8000998:	2201      	movs	r2, #1
 800099a:	2120      	movs	r1, #32
 800099c:	4853      	ldr	r0, [pc, #332]	; (8000aec <fsm_automatic+0x2f4>)
 800099e:	f001 f9b8 	bl	8001d12 <HAL_GPIO_WritePin>
		}
		blinkLed(AMBER);
 80009a2:	2001      	movs	r0, #1
 80009a4:	f7ff feae 	bl	8000704 <blinkLed>
		if(is_button_pressed(button2))
 80009a8:	2001      	movs	r0, #1
 80009aa:	f7ff fc35 	bl	8000218 <is_button_pressed>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d00c      	beq.n	80009ce <fsm_automatic+0x1d6>
		{
			status=MAN_YELLOW;
 80009b4:	4b48      	ldr	r3, [pc, #288]	; (8000ad8 <fsm_automatic+0x2e0>)
 80009b6:	220d      	movs	r2, #13
 80009b8:	601a      	str	r2, [r3, #0]
			status2=MAN_YELLOW;
 80009ba:	4b48      	ldr	r3, [pc, #288]	; (8000adc <fsm_automatic+0x2e4>)
 80009bc:	220d      	movs	r2, #13
 80009be:	601a      	str	r2, [r3, #0]
			setTimer2(5000);
 80009c0:	f241 3088 	movw	r0, #5000	; 0x1388
 80009c4:	f000 fddc 	bl	8001580 <setTimer2>
			increasedTime(1);
 80009c8:	2001      	movs	r0, #1
 80009ca:	f7ff fe49 	bl	8000660 <increasedTime>
		}
		if(timer2_flag==1)
 80009ce:	4b48      	ldr	r3, [pc, #288]	; (8000af0 <fsm_automatic+0x2f8>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d10b      	bne.n	80009ee <fsm_automatic+0x1f6>
		{
			status=AUTO_RED;
 80009d6:	4b40      	ldr	r3, [pc, #256]	; (8000ad8 <fsm_automatic+0x2e0>)
 80009d8:	2202      	movs	r2, #2
 80009da:	601a      	str	r2, [r3, #0]
			status2=AUTO_GREEN;
 80009dc:	4b3f      	ldr	r3, [pc, #252]	; (8000adc <fsm_automatic+0x2e4>)
 80009de:	2204      	movs	r2, #4
 80009e0:	601a      	str	r2, [r3, #0]
			mode=1;
 80009e2:	4b38      	ldr	r3, [pc, #224]	; (8000ac4 <fsm_automatic+0x2cc>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	701a      	strb	r2, [r3, #0]
		initial_flag=1;
 80009e8:	4b3d      	ldr	r3, [pc, #244]	; (8000ae0 <fsm_automatic+0x2e8>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	601a      	str	r2, [r3, #0]
		}
		updatebuffer(mode, lightbufferMod[1]);
 80009ee:	4b35      	ldr	r3, [pc, #212]	; (8000ac4 <fsm_automatic+0x2cc>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	461a      	mov	r2, r3
 80009f4:	4b3b      	ldr	r3, [pc, #236]	; (8000ae4 <fsm_automatic+0x2ec>)
 80009f6:	785b      	ldrb	r3, [r3, #1]
 80009f8:	4619      	mov	r1, r3
 80009fa:	4610      	mov	r0, r2
 80009fc:	f7ff fc7e 	bl	80002fc <updatebuffer>
		break;
 8000a00:	e047      	b.n	8000a92 <fsm_automatic+0x29a>
	case 4:
		if(initial_flag==1)
 8000a02:	4b37      	ldr	r3, [pc, #220]	; (8000ae0 <fsm_automatic+0x2e8>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d113      	bne.n	8000a32 <fsm_automatic+0x23a>
		{setTimer2(5000);
 8000a0a:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a0e:	f000 fdb7 	bl	8001580 <setTimer2>
		blink_flag=1;
 8000a12:	4b35      	ldr	r3, [pc, #212]	; (8000ae8 <fsm_automatic+0x2f0>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	601a      	str	r2, [r3, #0]
		initial_flag=0;
 8000a18:	4b31      	ldr	r3, [pc, #196]	; (8000ae0 <fsm_automatic+0x2e8>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8000a1e:	2201      	movs	r2, #1
 8000a20:	2108      	movs	r1, #8
 8000a22:	4832      	ldr	r0, [pc, #200]	; (8000aec <fsm_automatic+0x2f4>)
 8000a24:	f001 f975 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 8000a28:	2201      	movs	r2, #1
 8000a2a:	2140      	movs	r1, #64	; 0x40
 8000a2c:	482f      	ldr	r0, [pc, #188]	; (8000aec <fsm_automatic+0x2f4>)
 8000a2e:	f001 f970 	bl	8001d12 <HAL_GPIO_WritePin>
		}
		blinkLed(GREEN);
 8000a32:	2002      	movs	r0, #2
 8000a34:	f7ff fe66 	bl	8000704 <blinkLed>
		if(is_button_pressed(button2))
 8000a38:	2001      	movs	r0, #1
 8000a3a:	f7ff fbed 	bl	8000218 <is_button_pressed>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d00c      	beq.n	8000a5e <fsm_automatic+0x266>
		{
			status=MAN_GREEN;
 8000a44:	4b24      	ldr	r3, [pc, #144]	; (8000ad8 <fsm_automatic+0x2e0>)
 8000a46:	220e      	movs	r2, #14
 8000a48:	601a      	str	r2, [r3, #0]
			status2=MAN_GREEN;
 8000a4a:	4b24      	ldr	r3, [pc, #144]	; (8000adc <fsm_automatic+0x2e4>)
 8000a4c:	220e      	movs	r2, #14
 8000a4e:	601a      	str	r2, [r3, #0]
			setTimer2(5000);
 8000a50:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a54:	f000 fd94 	bl	8001580 <setTimer2>
			increasedTime(2);
 8000a58:	2002      	movs	r0, #2
 8000a5a:	f7ff fe01 	bl	8000660 <increasedTime>
		}
		if(timer2_flag==1)
 8000a5e:	4b24      	ldr	r3, [pc, #144]	; (8000af0 <fsm_automatic+0x2f8>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d10b      	bne.n	8000a7e <fsm_automatic+0x286>
		{
			status=AUTO_RED;
 8000a66:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <fsm_automatic+0x2e0>)
 8000a68:	2202      	movs	r2, #2
 8000a6a:	601a      	str	r2, [r3, #0]
			status2=AUTO_GREEN;
 8000a6c:	4b1b      	ldr	r3, [pc, #108]	; (8000adc <fsm_automatic+0x2e4>)
 8000a6e:	2204      	movs	r2, #4
 8000a70:	601a      	str	r2, [r3, #0]
			mode=1;
 8000a72:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <fsm_automatic+0x2cc>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	701a      	strb	r2, [r3, #0]
		initial_flag=1;
 8000a78:	4b19      	ldr	r3, [pc, #100]	; (8000ae0 <fsm_automatic+0x2e8>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	601a      	str	r2, [r3, #0]
		}
		updatebuffer(mode, lightbufferMod[2]);
 8000a7e:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <fsm_automatic+0x2cc>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	461a      	mov	r2, r3
 8000a84:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <fsm_automatic+0x2ec>)
 8000a86:	789b      	ldrb	r3, [r3, #2]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4610      	mov	r0, r2
 8000a8c:	f7ff fc36 	bl	80002fc <updatebuffer>
		break;
 8000a90:	bf00      	nop
	}
	if(segment_flag==1)
 8000a92:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <fsm_automatic+0x2fc>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d112      	bne.n	8000ac0 <fsm_automatic+0x2c8>
	{
	update7SEG(indexled++);
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <fsm_automatic+0x2d0>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	1c5a      	adds	r2, r3, #1
 8000aa0:	4909      	ldr	r1, [pc, #36]	; (8000ac8 <fsm_automatic+0x2d0>)
 8000aa2:	600a      	str	r2, [r1, #0]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fbd1 	bl	800024c <update7SEG>
	if(indexled>1)
 8000aaa:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <fsm_automatic+0x2d0>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	dd02      	ble.n	8000ab8 <fsm_automatic+0x2c0>
	{
		indexled=0;
 8000ab2:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <fsm_automatic+0x2d0>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
	}
	setTimer3(500);
 8000ab8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000abc:	f000 fd7c 	bl	80015b8 <setTimer3>
	}
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000053 	.word	0x20000053
 8000ac8:	2000005c 	.word	0x2000005c
 8000acc:	20000020 	.word	0x20000020
 8000ad0:	20000054 	.word	0x20000054
 8000ad4:	20000058 	.word	0x20000058
 8000ad8:	20000064 	.word	0x20000064
 8000adc:	20000068 	.word	0x20000068
 8000ae0:	20000060 	.word	0x20000060
 8000ae4:	2000001c 	.word	0x2000001c
 8000ae8:	20000074 	.word	0x20000074
 8000aec:	40010800 	.word	0x40010800
 8000af0:	2000007c 	.word	0x2000007c
 8000af4:	20000088 	.word	0x20000088

08000af8 <display7SEG>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
int status2=0;
int man_time=10000;
int blink_time=500;

void display7SEG (int time)
{
<<<<<<< HEAD
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
	if(time==0)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d123      	bne.n	8000c16 <display7SEG+0x56>
	{
		HAL_GPIO_WritePin(P_1_GPIO_Port, P_1_Pin, RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	48c2      	ldr	r0, [pc, #776]	; (8000edc <display7SEG+0x31c>)
 8000bd4:	f001 f901 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_2_GPIO_Port, P_2_Pin, RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2102      	movs	r1, #2
 8000bdc:	48bf      	ldr	r0, [pc, #764]	; (8000edc <display7SEG+0x31c>)
 8000bde:	f001 f8fc 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_3_GPIO_Port, P_3_Pin, RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2104      	movs	r1, #4
 8000be6:	48bd      	ldr	r0, [pc, #756]	; (8000edc <display7SEG+0x31c>)
 8000be8:	f001 f8f7 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_4_GPIO_Port, P_4_Pin, RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2108      	movs	r1, #8
 8000bf0:	48ba      	ldr	r0, [pc, #744]	; (8000edc <display7SEG+0x31c>)
 8000bf2:	f001 f8f2 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_5_GPIO_Port, P_5_Pin, RESET);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2110      	movs	r1, #16
 8000bfa:	48b8      	ldr	r0, [pc, #736]	; (8000edc <display7SEG+0x31c>)
 8000bfc:	f001 f8ed 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_6_GPIO_Port, P_6_Pin, RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2120      	movs	r1, #32
 8000c04:	48b5      	ldr	r0, [pc, #724]	; (8000edc <display7SEG+0x31c>)
 8000c06:	f001 f8e8 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_7_GPIO_Port, P_7_Pin, SET);
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	2140      	movs	r1, #64	; 0x40
 8000c0e:	48b3      	ldr	r0, [pc, #716]	; (8000edc <display7SEG+0x31c>)
 8000c10:	f001 f8e3 	bl	8001dda <HAL_GPIO_WritePin>
=======
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	if(time==0)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d123      	bne.n	8000b4e <display7SEG+0x56>
	{
		HAL_GPIO_WritePin(P_1_GPIO_Port, P_1_Pin, RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2101      	movs	r1, #1
 8000b0a:	48c2      	ldr	r0, [pc, #776]	; (8000e14 <display7SEG+0x31c>)
 8000b0c:	f001 f901 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_2_GPIO_Port, P_2_Pin, RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2102      	movs	r1, #2
 8000b14:	48bf      	ldr	r0, [pc, #764]	; (8000e14 <display7SEG+0x31c>)
 8000b16:	f001 f8fc 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_3_GPIO_Port, P_3_Pin, RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2104      	movs	r1, #4
 8000b1e:	48bd      	ldr	r0, [pc, #756]	; (8000e14 <display7SEG+0x31c>)
 8000b20:	f001 f8f7 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_4_GPIO_Port, P_4_Pin, RESET);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2108      	movs	r1, #8
 8000b28:	48ba      	ldr	r0, [pc, #744]	; (8000e14 <display7SEG+0x31c>)
 8000b2a:	f001 f8f2 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_5_GPIO_Port, P_5_Pin, RESET);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2110      	movs	r1, #16
 8000b32:	48b8      	ldr	r0, [pc, #736]	; (8000e14 <display7SEG+0x31c>)
 8000b34:	f001 f8ed 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_6_GPIO_Port, P_6_Pin, RESET);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2120      	movs	r1, #32
 8000b3c:	48b5      	ldr	r0, [pc, #724]	; (8000e14 <display7SEG+0x31c>)
 8000b3e:	f001 f8e8 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_7_GPIO_Port, P_7_Pin, SET);
 8000b42:	2201      	movs	r2, #1
 8000b44:	2140      	movs	r1, #64	; 0x40
 8000b46:	48b3      	ldr	r0, [pc, #716]	; (8000e14 <display7SEG+0x31c>)
 8000b48:	f001 f8e3 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
		HAL_GPIO_WritePin(P_4_GPIO_Port, P_4_Pin, RESET);
		HAL_GPIO_WritePin(P_5_GPIO_Port, P_5_Pin, SET);
		HAL_GPIO_WritePin(P_6_GPIO_Port, P_6_Pin, RESET);
		HAL_GPIO_WritePin(P_7_GPIO_Port, P_7_Pin, RESET);
	}
}
<<<<<<< HEAD
 8000c14:	e15d      	b.n	8000ed2 <display7SEG+0x312>
	else if(time==1)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d123      	bne.n	8000c64 <display7SEG+0xa4>
		HAL_GPIO_WritePin(P_1_GPIO_Port, P_1_Pin, SET);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	2101      	movs	r1, #1
 8000c20:	48ae      	ldr	r0, [pc, #696]	; (8000edc <display7SEG+0x31c>)
 8000c22:	f001 f8da 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_2_GPIO_Port, P_2_Pin, RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2102      	movs	r1, #2
 8000c2a:	48ac      	ldr	r0, [pc, #688]	; (8000edc <display7SEG+0x31c>)
 8000c2c:	f001 f8d5 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_3_GPIO_Port, P_3_Pin, RESET);
 8000c30:	2200      	movs	r2, #0
 8000c32:	2104      	movs	r1, #4
 8000c34:	48a9      	ldr	r0, [pc, #676]	; (8000edc <display7SEG+0x31c>)
 8000c36:	f001 f8d0 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_4_GPIO_Port, P_4_Pin, SET);
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	2108      	movs	r1, #8
 8000c3e:	48a7      	ldr	r0, [pc, #668]	; (8000edc <display7SEG+0x31c>)
 8000c40:	f001 f8cb 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_5_GPIO_Port, P_5_Pin, SET);
 8000c44:	2201      	movs	r2, #1
 8000c46:	2110      	movs	r1, #16
 8000c48:	48a4      	ldr	r0, [pc, #656]	; (8000edc <display7SEG+0x31c>)
 8000c4a:	f001 f8c6 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_6_GPIO_Port, P_6_Pin, SET);
 8000c4e:	2201      	movs	r2, #1
 8000c50:	2120      	movs	r1, #32
 8000c52:	48a2      	ldr	r0, [pc, #648]	; (8000edc <display7SEG+0x31c>)
 8000c54:	f001 f8c1 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_7_GPIO_Port, P_7_Pin, SET);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	2140      	movs	r1, #64	; 0x40
 8000c5c:	489f      	ldr	r0, [pc, #636]	; (8000edc <display7SEG+0x31c>)
 8000c5e:	f001 f8bc 	bl	8001dda <HAL_GPIO_WritePin>
}
 8000c62:	e136      	b.n	8000ed2 <display7SEG+0x312>
	else if(time==2)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d123      	bne.n	8000cb2 <display7SEG+0xf2>
		HAL_GPIO_WritePin(P_1_GPIO_Port, P_1_Pin, RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	489b      	ldr	r0, [pc, #620]	; (8000edc <display7SEG+0x31c>)
 8000c70:	f001 f8b3 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_2_GPIO_Port, P_2_Pin, RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2102      	movs	r1, #2
 8000c78:	4898      	ldr	r0, [pc, #608]	; (8000edc <display7SEG+0x31c>)
 8000c7a:	f001 f8ae 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_3_GPIO_Port, P_3_Pin, SET);
 8000c7e:	2201      	movs	r2, #1
 8000c80:	2104      	movs	r1, #4
 8000c82:	4896      	ldr	r0, [pc, #600]	; (8000edc <display7SEG+0x31c>)
 8000c84:	f001 f8a9 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_4_GPIO_Port, P_4_Pin, RESET);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2108      	movs	r1, #8
 8000c8c:	4893      	ldr	r0, [pc, #588]	; (8000edc <display7SEG+0x31c>)
 8000c8e:	f001 f8a4 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_5_GPIO_Port, P_5_Pin, RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2110      	movs	r1, #16
 8000c96:	4891      	ldr	r0, [pc, #580]	; (8000edc <display7SEG+0x31c>)
 8000c98:	f001 f89f 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_6_GPIO_Port, P_6_Pin, SET);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	2120      	movs	r1, #32
 8000ca0:	488e      	ldr	r0, [pc, #568]	; (8000edc <display7SEG+0x31c>)
 8000ca2:	f001 f89a 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_7_GPIO_Port, P_7_Pin, RESET);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2140      	movs	r1, #64	; 0x40
 8000caa:	488c      	ldr	r0, [pc, #560]	; (8000edc <display7SEG+0x31c>)
 8000cac:	f001 f895 	bl	8001dda <HAL_GPIO_WritePin>
}
 8000cb0:	e10f      	b.n	8000ed2 <display7SEG+0x312>
	else if(time==3)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2b03      	cmp	r3, #3
 8000cb6:	d123      	bne.n	8000d00 <display7SEG+0x140>
		HAL_GPIO_WritePin(P_1_GPIO_Port, P_1_Pin, RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2101      	movs	r1, #1
 8000cbc:	4887      	ldr	r0, [pc, #540]	; (8000edc <display7SEG+0x31c>)
 8000cbe:	f001 f88c 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_2_GPIO_Port, P_2_Pin, RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2102      	movs	r1, #2
 8000cc6:	4885      	ldr	r0, [pc, #532]	; (8000edc <display7SEG+0x31c>)
 8000cc8:	f001 f887 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_3_GPIO_Port, P_3_Pin, RESET);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2104      	movs	r1, #4
 8000cd0:	4882      	ldr	r0, [pc, #520]	; (8000edc <display7SEG+0x31c>)
 8000cd2:	f001 f882 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_4_GPIO_Port, P_4_Pin, RESET);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2108      	movs	r1, #8
 8000cda:	4880      	ldr	r0, [pc, #512]	; (8000edc <display7SEG+0x31c>)
 8000cdc:	f001 f87d 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_5_GPIO_Port, P_5_Pin, SET);
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	2110      	movs	r1, #16
 8000ce4:	487d      	ldr	r0, [pc, #500]	; (8000edc <display7SEG+0x31c>)
 8000ce6:	f001 f878 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_6_GPIO_Port, P_6_Pin, SET);
 8000cea:	2201      	movs	r2, #1
 8000cec:	2120      	movs	r1, #32
 8000cee:	487b      	ldr	r0, [pc, #492]	; (8000edc <display7SEG+0x31c>)
 8000cf0:	f001 f873 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_7_GPIO_Port, P_7_Pin, RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2140      	movs	r1, #64	; 0x40
 8000cf8:	4878      	ldr	r0, [pc, #480]	; (8000edc <display7SEG+0x31c>)
 8000cfa:	f001 f86e 	bl	8001dda <HAL_GPIO_WritePin>
}
 8000cfe:	e0e8      	b.n	8000ed2 <display7SEG+0x312>
	else if(time==4)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2b04      	cmp	r3, #4
 8000d04:	d123      	bne.n	8000d4e <display7SEG+0x18e>
		HAL_GPIO_WritePin(P_1_GPIO_Port, P_1_Pin, SET);
 8000d06:	2201      	movs	r2, #1
 8000d08:	2101      	movs	r1, #1
 8000d0a:	4874      	ldr	r0, [pc, #464]	; (8000edc <display7SEG+0x31c>)
 8000d0c:	f001 f865 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_2_GPIO_Port, P_2_Pin, RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2102      	movs	r1, #2
 8000d14:	4871      	ldr	r0, [pc, #452]	; (8000edc <display7SEG+0x31c>)
 8000d16:	f001 f860 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_3_GPIO_Port, P_3_Pin, RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2104      	movs	r1, #4
 8000d1e:	486f      	ldr	r0, [pc, #444]	; (8000edc <display7SEG+0x31c>)
 8000d20:	f001 f85b 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_4_GPIO_Port, P_4_Pin, SET);
 8000d24:	2201      	movs	r2, #1
 8000d26:	2108      	movs	r1, #8
 8000d28:	486c      	ldr	r0, [pc, #432]	; (8000edc <display7SEG+0x31c>)
 8000d2a:	f001 f856 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_5_GPIO_Port, P_5_Pin, SET);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	2110      	movs	r1, #16
 8000d32:	486a      	ldr	r0, [pc, #424]	; (8000edc <display7SEG+0x31c>)
 8000d34:	f001 f851 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_6_GPIO_Port, P_6_Pin, RESET);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2120      	movs	r1, #32
 8000d3c:	4867      	ldr	r0, [pc, #412]	; (8000edc <display7SEG+0x31c>)
 8000d3e:	f001 f84c 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_7_GPIO_Port, P_7_Pin, RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2140      	movs	r1, #64	; 0x40
 8000d46:	4865      	ldr	r0, [pc, #404]	; (8000edc <display7SEG+0x31c>)
 8000d48:	f001 f847 	bl	8001dda <HAL_GPIO_WritePin>
}
 8000d4c:	e0c1      	b.n	8000ed2 <display7SEG+0x312>
	else if(time==5)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2b05      	cmp	r3, #5
 8000d52:	d123      	bne.n	8000d9c <display7SEG+0x1dc>
		HAL_GPIO_WritePin(P_1_GPIO_Port, P_1_Pin, RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2101      	movs	r1, #1
 8000d58:	4860      	ldr	r0, [pc, #384]	; (8000edc <display7SEG+0x31c>)
 8000d5a:	f001 f83e 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_2_GPIO_Port, P_2_Pin, SET);
 8000d5e:	2201      	movs	r2, #1
 8000d60:	2102      	movs	r1, #2
 8000d62:	485e      	ldr	r0, [pc, #376]	; (8000edc <display7SEG+0x31c>)
 8000d64:	f001 f839 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_3_GPIO_Port, P_3_Pin, RESET);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2104      	movs	r1, #4
 8000d6c:	485b      	ldr	r0, [pc, #364]	; (8000edc <display7SEG+0x31c>)
 8000d6e:	f001 f834 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_4_GPIO_Port, P_4_Pin, RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2108      	movs	r1, #8
 8000d76:	4859      	ldr	r0, [pc, #356]	; (8000edc <display7SEG+0x31c>)
 8000d78:	f001 f82f 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_5_GPIO_Port, P_5_Pin, SET);
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	2110      	movs	r1, #16
 8000d80:	4856      	ldr	r0, [pc, #344]	; (8000edc <display7SEG+0x31c>)
 8000d82:	f001 f82a 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_6_GPIO_Port, P_6_Pin, RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2120      	movs	r1, #32
 8000d8a:	4854      	ldr	r0, [pc, #336]	; (8000edc <display7SEG+0x31c>)
 8000d8c:	f001 f825 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_7_GPIO_Port, P_7_Pin, RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2140      	movs	r1, #64	; 0x40
 8000d94:	4851      	ldr	r0, [pc, #324]	; (8000edc <display7SEG+0x31c>)
 8000d96:	f001 f820 	bl	8001dda <HAL_GPIO_WritePin>
}
 8000d9a:	e09a      	b.n	8000ed2 <display7SEG+0x312>
	else if(time==6)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2b06      	cmp	r3, #6
 8000da0:	d123      	bne.n	8000dea <display7SEG+0x22a>
		HAL_GPIO_WritePin(P_1_GPIO_Port, P_1_Pin, RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2101      	movs	r1, #1
 8000da6:	484d      	ldr	r0, [pc, #308]	; (8000edc <display7SEG+0x31c>)
 8000da8:	f001 f817 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_2_GPIO_Port, P_2_Pin, SET);
 8000dac:	2201      	movs	r2, #1
 8000dae:	2102      	movs	r1, #2
 8000db0:	484a      	ldr	r0, [pc, #296]	; (8000edc <display7SEG+0x31c>)
 8000db2:	f001 f812 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_3_GPIO_Port, P_3_Pin, RESET);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2104      	movs	r1, #4
 8000dba:	4848      	ldr	r0, [pc, #288]	; (8000edc <display7SEG+0x31c>)
 8000dbc:	f001 f80d 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_4_GPIO_Port, P_4_Pin, RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2108      	movs	r1, #8
 8000dc4:	4845      	ldr	r0, [pc, #276]	; (8000edc <display7SEG+0x31c>)
 8000dc6:	f001 f808 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_5_GPIO_Port, P_5_Pin, RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2110      	movs	r1, #16
 8000dce:	4843      	ldr	r0, [pc, #268]	; (8000edc <display7SEG+0x31c>)
 8000dd0:	f001 f803 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_6_GPIO_Port, P_6_Pin, RESET);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2120      	movs	r1, #32
 8000dd8:	4840      	ldr	r0, [pc, #256]	; (8000edc <display7SEG+0x31c>)
 8000dda:	f000 fffe 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_7_GPIO_Port, P_7_Pin, RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2140      	movs	r1, #64	; 0x40
 8000de2:	483e      	ldr	r0, [pc, #248]	; (8000edc <display7SEG+0x31c>)
 8000de4:	f000 fff9 	bl	8001dda <HAL_GPIO_WritePin>
}
 8000de8:	e073      	b.n	8000ed2 <display7SEG+0x312>
	else if(time==7)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2b07      	cmp	r3, #7
 8000dee:	d123      	bne.n	8000e38 <display7SEG+0x278>
		HAL_GPIO_WritePin(P_1_GPIO_Port, P_1_Pin, RESET);
 8000df0:	2200      	movs	r2, #0
 8000df2:	2101      	movs	r1, #1
 8000df4:	4839      	ldr	r0, [pc, #228]	; (8000edc <display7SEG+0x31c>)
 8000df6:	f000 fff0 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_2_GPIO_Port, P_2_Pin, RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2102      	movs	r1, #2
 8000dfe:	4837      	ldr	r0, [pc, #220]	; (8000edc <display7SEG+0x31c>)
 8000e00:	f000 ffeb 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_3_GPIO_Port, P_3_Pin, RESET);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2104      	movs	r1, #4
 8000e08:	4834      	ldr	r0, [pc, #208]	; (8000edc <display7SEG+0x31c>)
 8000e0a:	f000 ffe6 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_4_GPIO_Port, P_4_Pin, SET);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	2108      	movs	r1, #8
 8000e12:	4832      	ldr	r0, [pc, #200]	; (8000edc <display7SEG+0x31c>)
 8000e14:	f000 ffe1 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_5_GPIO_Port, P_5_Pin, SET);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	2110      	movs	r1, #16
 8000e1c:	482f      	ldr	r0, [pc, #188]	; (8000edc <display7SEG+0x31c>)
 8000e1e:	f000 ffdc 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_6_GPIO_Port, P_6_Pin, SET);
 8000e22:	2201      	movs	r2, #1
 8000e24:	2120      	movs	r1, #32
 8000e26:	482d      	ldr	r0, [pc, #180]	; (8000edc <display7SEG+0x31c>)
 8000e28:	f000 ffd7 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_7_GPIO_Port, P_7_Pin, SET);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	2140      	movs	r1, #64	; 0x40
 8000e30:	482a      	ldr	r0, [pc, #168]	; (8000edc <display7SEG+0x31c>)
 8000e32:	f000 ffd2 	bl	8001dda <HAL_GPIO_WritePin>
}
 8000e36:	e04c      	b.n	8000ed2 <display7SEG+0x312>
	else if(time==8)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2b08      	cmp	r3, #8
 8000e3c:	d123      	bne.n	8000e86 <display7SEG+0x2c6>
		HAL_GPIO_WritePin(P_1_GPIO_Port, P_1_Pin, RESET);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2101      	movs	r1, #1
 8000e42:	4826      	ldr	r0, [pc, #152]	; (8000edc <display7SEG+0x31c>)
 8000e44:	f000 ffc9 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_2_GPIO_Port, P_2_Pin, RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2102      	movs	r1, #2
 8000e4c:	4823      	ldr	r0, [pc, #140]	; (8000edc <display7SEG+0x31c>)
 8000e4e:	f000 ffc4 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_3_GPIO_Port, P_3_Pin, RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2104      	movs	r1, #4
 8000e56:	4821      	ldr	r0, [pc, #132]	; (8000edc <display7SEG+0x31c>)
 8000e58:	f000 ffbf 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_4_GPIO_Port, P_4_Pin, RESET);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2108      	movs	r1, #8
 8000e60:	481e      	ldr	r0, [pc, #120]	; (8000edc <display7SEG+0x31c>)
 8000e62:	f000 ffba 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_5_GPIO_Port, P_5_Pin, RESET);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2110      	movs	r1, #16
 8000e6a:	481c      	ldr	r0, [pc, #112]	; (8000edc <display7SEG+0x31c>)
 8000e6c:	f000 ffb5 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_6_GPIO_Port, P_6_Pin, RESET);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2120      	movs	r1, #32
 8000e74:	4819      	ldr	r0, [pc, #100]	; (8000edc <display7SEG+0x31c>)
 8000e76:	f000 ffb0 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_7_GPIO_Port, P_7_Pin, RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2140      	movs	r1, #64	; 0x40
 8000e7e:	4817      	ldr	r0, [pc, #92]	; (8000edc <display7SEG+0x31c>)
 8000e80:	f000 ffab 	bl	8001dda <HAL_GPIO_WritePin>
}
 8000e84:	e025      	b.n	8000ed2 <display7SEG+0x312>
	else if(time==9)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2b09      	cmp	r3, #9
 8000e8a:	d122      	bne.n	8000ed2 <display7SEG+0x312>
		HAL_GPIO_WritePin(P_1_GPIO_Port, P_1_Pin, RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2101      	movs	r1, #1
 8000e90:	4812      	ldr	r0, [pc, #72]	; (8000edc <display7SEG+0x31c>)
 8000e92:	f000 ffa2 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_2_GPIO_Port, P_2_Pin, RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2102      	movs	r1, #2
 8000e9a:	4810      	ldr	r0, [pc, #64]	; (8000edc <display7SEG+0x31c>)
 8000e9c:	f000 ff9d 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_3_GPIO_Port, P_3_Pin, RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2104      	movs	r1, #4
 8000ea4:	480d      	ldr	r0, [pc, #52]	; (8000edc <display7SEG+0x31c>)
 8000ea6:	f000 ff98 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_4_GPIO_Port, P_4_Pin, RESET);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2108      	movs	r1, #8
 8000eae:	480b      	ldr	r0, [pc, #44]	; (8000edc <display7SEG+0x31c>)
 8000eb0:	f000 ff93 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_5_GPIO_Port, P_5_Pin, SET);
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	2110      	movs	r1, #16
 8000eb8:	4808      	ldr	r0, [pc, #32]	; (8000edc <display7SEG+0x31c>)
 8000eba:	f000 ff8e 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_6_GPIO_Port, P_6_Pin, RESET);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2120      	movs	r1, #32
 8000ec2:	4806      	ldr	r0, [pc, #24]	; (8000edc <display7SEG+0x31c>)
 8000ec4:	f000 ff89 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_7_GPIO_Port, P_7_Pin, RESET);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2140      	movs	r1, #64	; 0x40
 8000ecc:	4803      	ldr	r0, [pc, #12]	; (8000edc <display7SEG+0x31c>)
 8000ece:	f000 ff84 	bl	8001dda <HAL_GPIO_WritePin>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40010c00 	.word	0x40010c00

08000ee0 <display7SEGforled2>:

void display7SEGforled2(int time)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]

	if(time==0)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d129      	bne.n	8000f42 <display7SEGforled2+0x62>
	{
		HAL_GPIO_WritePin(P1_1_GPIO_Port, P1_1_Pin, RESET);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2180      	movs	r1, #128	; 0x80
 8000ef2:	48c8      	ldr	r0, [pc, #800]	; (8001214 <display7SEGforled2+0x334>)
 8000ef4:	f000 ff71 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_2_GPIO_Port, P1_2_Pin, RESET);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000efe:	48c5      	ldr	r0, [pc, #788]	; (8001214 <display7SEGforled2+0x334>)
 8000f00:	f000 ff6b 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_3_GPIO_Port, P1_3_Pin, RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f0a:	48c2      	ldr	r0, [pc, #776]	; (8001214 <display7SEGforled2+0x334>)
 8000f0c:	f000 ff65 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_4_GPIO_Port, P1_4_Pin, RESET);
 8000f10:	2200      	movs	r2, #0
 8000f12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f16:	48bf      	ldr	r0, [pc, #764]	; (8001214 <display7SEGforled2+0x334>)
 8000f18:	f000 ff5f 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_5_GPIO_Port, P1_5_Pin, RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f22:	48bc      	ldr	r0, [pc, #752]	; (8001214 <display7SEGforled2+0x334>)
 8000f24:	f000 ff59 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_6_GPIO_Port, P1_6_Pin, RESET);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f2e:	48b9      	ldr	r0, [pc, #740]	; (8001214 <display7SEGforled2+0x334>)
 8000f30:	f000 ff53 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_7_GPIO_Port, P1_7_Pin, SET);
 8000f34:	2201      	movs	r2, #1
 8000f36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f3a:	48b6      	ldr	r0, [pc, #728]	; (8001214 <display7SEGforled2+0x334>)
 8000f3c:	f000 ff4d 	bl	8001dda <HAL_GPIO_WritePin>
=======
 8000b4c:	e15d      	b.n	8000e0a <display7SEG+0x312>
	else if(time==1)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d123      	bne.n	8000b9c <display7SEG+0xa4>
		HAL_GPIO_WritePin(P_1_GPIO_Port, P_1_Pin, SET);
 8000b54:	2201      	movs	r2, #1
 8000b56:	2101      	movs	r1, #1
 8000b58:	48ae      	ldr	r0, [pc, #696]	; (8000e14 <display7SEG+0x31c>)
 8000b5a:	f001 f8da 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_2_GPIO_Port, P_2_Pin, RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2102      	movs	r1, #2
 8000b62:	48ac      	ldr	r0, [pc, #688]	; (8000e14 <display7SEG+0x31c>)
 8000b64:	f001 f8d5 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_3_GPIO_Port, P_3_Pin, RESET);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2104      	movs	r1, #4
 8000b6c:	48a9      	ldr	r0, [pc, #676]	; (8000e14 <display7SEG+0x31c>)
 8000b6e:	f001 f8d0 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_4_GPIO_Port, P_4_Pin, SET);
 8000b72:	2201      	movs	r2, #1
 8000b74:	2108      	movs	r1, #8
 8000b76:	48a7      	ldr	r0, [pc, #668]	; (8000e14 <display7SEG+0x31c>)
 8000b78:	f001 f8cb 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_5_GPIO_Port, P_5_Pin, SET);
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	2110      	movs	r1, #16
 8000b80:	48a4      	ldr	r0, [pc, #656]	; (8000e14 <display7SEG+0x31c>)
 8000b82:	f001 f8c6 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_6_GPIO_Port, P_6_Pin, SET);
 8000b86:	2201      	movs	r2, #1
 8000b88:	2120      	movs	r1, #32
 8000b8a:	48a2      	ldr	r0, [pc, #648]	; (8000e14 <display7SEG+0x31c>)
 8000b8c:	f001 f8c1 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_7_GPIO_Port, P_7_Pin, SET);
 8000b90:	2201      	movs	r2, #1
 8000b92:	2140      	movs	r1, #64	; 0x40
 8000b94:	489f      	ldr	r0, [pc, #636]	; (8000e14 <display7SEG+0x31c>)
 8000b96:	f001 f8bc 	bl	8001d12 <HAL_GPIO_WritePin>
}
 8000b9a:	e136      	b.n	8000e0a <display7SEG+0x312>
	else if(time==2)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2b02      	cmp	r3, #2
 8000ba0:	d123      	bne.n	8000bea <display7SEG+0xf2>
		HAL_GPIO_WritePin(P_1_GPIO_Port, P_1_Pin, RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	489b      	ldr	r0, [pc, #620]	; (8000e14 <display7SEG+0x31c>)
 8000ba8:	f001 f8b3 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_2_GPIO_Port, P_2_Pin, RESET);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2102      	movs	r1, #2
 8000bb0:	4898      	ldr	r0, [pc, #608]	; (8000e14 <display7SEG+0x31c>)
 8000bb2:	f001 f8ae 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_3_GPIO_Port, P_3_Pin, SET);
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	2104      	movs	r1, #4
 8000bba:	4896      	ldr	r0, [pc, #600]	; (8000e14 <display7SEG+0x31c>)
 8000bbc:	f001 f8a9 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_4_GPIO_Port, P_4_Pin, RESET);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2108      	movs	r1, #8
 8000bc4:	4893      	ldr	r0, [pc, #588]	; (8000e14 <display7SEG+0x31c>)
 8000bc6:	f001 f8a4 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_5_GPIO_Port, P_5_Pin, RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2110      	movs	r1, #16
 8000bce:	4891      	ldr	r0, [pc, #580]	; (8000e14 <display7SEG+0x31c>)
 8000bd0:	f001 f89f 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_6_GPIO_Port, P_6_Pin, SET);
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	2120      	movs	r1, #32
 8000bd8:	488e      	ldr	r0, [pc, #568]	; (8000e14 <display7SEG+0x31c>)
 8000bda:	f001 f89a 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_7_GPIO_Port, P_7_Pin, RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2140      	movs	r1, #64	; 0x40
 8000be2:	488c      	ldr	r0, [pc, #560]	; (8000e14 <display7SEG+0x31c>)
 8000be4:	f001 f895 	bl	8001d12 <HAL_GPIO_WritePin>
}
 8000be8:	e10f      	b.n	8000e0a <display7SEG+0x312>
	else if(time==3)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2b03      	cmp	r3, #3
 8000bee:	d123      	bne.n	8000c38 <display7SEG+0x140>
		HAL_GPIO_WritePin(P_1_GPIO_Port, P_1_Pin, RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	4887      	ldr	r0, [pc, #540]	; (8000e14 <display7SEG+0x31c>)
 8000bf6:	f001 f88c 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_2_GPIO_Port, P_2_Pin, RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2102      	movs	r1, #2
 8000bfe:	4885      	ldr	r0, [pc, #532]	; (8000e14 <display7SEG+0x31c>)
 8000c00:	f001 f887 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_3_GPIO_Port, P_3_Pin, RESET);
 8000c04:	2200      	movs	r2, #0
 8000c06:	2104      	movs	r1, #4
 8000c08:	4882      	ldr	r0, [pc, #520]	; (8000e14 <display7SEG+0x31c>)
 8000c0a:	f001 f882 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_4_GPIO_Port, P_4_Pin, RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2108      	movs	r1, #8
 8000c12:	4880      	ldr	r0, [pc, #512]	; (8000e14 <display7SEG+0x31c>)
 8000c14:	f001 f87d 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_5_GPIO_Port, P_5_Pin, SET);
 8000c18:	2201      	movs	r2, #1
 8000c1a:	2110      	movs	r1, #16
 8000c1c:	487d      	ldr	r0, [pc, #500]	; (8000e14 <display7SEG+0x31c>)
 8000c1e:	f001 f878 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_6_GPIO_Port, P_6_Pin, SET);
 8000c22:	2201      	movs	r2, #1
 8000c24:	2120      	movs	r1, #32
 8000c26:	487b      	ldr	r0, [pc, #492]	; (8000e14 <display7SEG+0x31c>)
 8000c28:	f001 f873 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_7_GPIO_Port, P_7_Pin, RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2140      	movs	r1, #64	; 0x40
 8000c30:	4878      	ldr	r0, [pc, #480]	; (8000e14 <display7SEG+0x31c>)
 8000c32:	f001 f86e 	bl	8001d12 <HAL_GPIO_WritePin>
}
 8000c36:	e0e8      	b.n	8000e0a <display7SEG+0x312>
	else if(time==4)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b04      	cmp	r3, #4
 8000c3c:	d123      	bne.n	8000c86 <display7SEG+0x18e>
		HAL_GPIO_WritePin(P_1_GPIO_Port, P_1_Pin, SET);
 8000c3e:	2201      	movs	r2, #1
 8000c40:	2101      	movs	r1, #1
 8000c42:	4874      	ldr	r0, [pc, #464]	; (8000e14 <display7SEG+0x31c>)
 8000c44:	f001 f865 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_2_GPIO_Port, P_2_Pin, RESET);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2102      	movs	r1, #2
 8000c4c:	4871      	ldr	r0, [pc, #452]	; (8000e14 <display7SEG+0x31c>)
 8000c4e:	f001 f860 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_3_GPIO_Port, P_3_Pin, RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2104      	movs	r1, #4
 8000c56:	486f      	ldr	r0, [pc, #444]	; (8000e14 <display7SEG+0x31c>)
 8000c58:	f001 f85b 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_4_GPIO_Port, P_4_Pin, SET);
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	2108      	movs	r1, #8
 8000c60:	486c      	ldr	r0, [pc, #432]	; (8000e14 <display7SEG+0x31c>)
 8000c62:	f001 f856 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_5_GPIO_Port, P_5_Pin, SET);
 8000c66:	2201      	movs	r2, #1
 8000c68:	2110      	movs	r1, #16
 8000c6a:	486a      	ldr	r0, [pc, #424]	; (8000e14 <display7SEG+0x31c>)
 8000c6c:	f001 f851 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_6_GPIO_Port, P_6_Pin, RESET);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2120      	movs	r1, #32
 8000c74:	4867      	ldr	r0, [pc, #412]	; (8000e14 <display7SEG+0x31c>)
 8000c76:	f001 f84c 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_7_GPIO_Port, P_7_Pin, RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2140      	movs	r1, #64	; 0x40
 8000c7e:	4865      	ldr	r0, [pc, #404]	; (8000e14 <display7SEG+0x31c>)
 8000c80:	f001 f847 	bl	8001d12 <HAL_GPIO_WritePin>
}
 8000c84:	e0c1      	b.n	8000e0a <display7SEG+0x312>
	else if(time==5)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2b05      	cmp	r3, #5
 8000c8a:	d123      	bne.n	8000cd4 <display7SEG+0x1dc>
		HAL_GPIO_WritePin(P_1_GPIO_Port, P_1_Pin, RESET);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2101      	movs	r1, #1
 8000c90:	4860      	ldr	r0, [pc, #384]	; (8000e14 <display7SEG+0x31c>)
 8000c92:	f001 f83e 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_2_GPIO_Port, P_2_Pin, SET);
 8000c96:	2201      	movs	r2, #1
 8000c98:	2102      	movs	r1, #2
 8000c9a:	485e      	ldr	r0, [pc, #376]	; (8000e14 <display7SEG+0x31c>)
 8000c9c:	f001 f839 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_3_GPIO_Port, P_3_Pin, RESET);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2104      	movs	r1, #4
 8000ca4:	485b      	ldr	r0, [pc, #364]	; (8000e14 <display7SEG+0x31c>)
 8000ca6:	f001 f834 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_4_GPIO_Port, P_4_Pin, RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2108      	movs	r1, #8
 8000cae:	4859      	ldr	r0, [pc, #356]	; (8000e14 <display7SEG+0x31c>)
 8000cb0:	f001 f82f 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_5_GPIO_Port, P_5_Pin, SET);
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	2110      	movs	r1, #16
 8000cb8:	4856      	ldr	r0, [pc, #344]	; (8000e14 <display7SEG+0x31c>)
 8000cba:	f001 f82a 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_6_GPIO_Port, P_6_Pin, RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2120      	movs	r1, #32
 8000cc2:	4854      	ldr	r0, [pc, #336]	; (8000e14 <display7SEG+0x31c>)
 8000cc4:	f001 f825 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_7_GPIO_Port, P_7_Pin, RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2140      	movs	r1, #64	; 0x40
 8000ccc:	4851      	ldr	r0, [pc, #324]	; (8000e14 <display7SEG+0x31c>)
 8000cce:	f001 f820 	bl	8001d12 <HAL_GPIO_WritePin>
}
 8000cd2:	e09a      	b.n	8000e0a <display7SEG+0x312>
	else if(time==6)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2b06      	cmp	r3, #6
 8000cd8:	d123      	bne.n	8000d22 <display7SEG+0x22a>
		HAL_GPIO_WritePin(P_1_GPIO_Port, P_1_Pin, RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2101      	movs	r1, #1
 8000cde:	484d      	ldr	r0, [pc, #308]	; (8000e14 <display7SEG+0x31c>)
 8000ce0:	f001 f817 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_2_GPIO_Port, P_2_Pin, SET);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	2102      	movs	r1, #2
 8000ce8:	484a      	ldr	r0, [pc, #296]	; (8000e14 <display7SEG+0x31c>)
 8000cea:	f001 f812 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_3_GPIO_Port, P_3_Pin, RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2104      	movs	r1, #4
 8000cf2:	4848      	ldr	r0, [pc, #288]	; (8000e14 <display7SEG+0x31c>)
 8000cf4:	f001 f80d 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_4_GPIO_Port, P_4_Pin, RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2108      	movs	r1, #8
 8000cfc:	4845      	ldr	r0, [pc, #276]	; (8000e14 <display7SEG+0x31c>)
 8000cfe:	f001 f808 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_5_GPIO_Port, P_5_Pin, RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2110      	movs	r1, #16
 8000d06:	4843      	ldr	r0, [pc, #268]	; (8000e14 <display7SEG+0x31c>)
 8000d08:	f001 f803 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_6_GPIO_Port, P_6_Pin, RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2120      	movs	r1, #32
 8000d10:	4840      	ldr	r0, [pc, #256]	; (8000e14 <display7SEG+0x31c>)
 8000d12:	f000 fffe 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_7_GPIO_Port, P_7_Pin, RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2140      	movs	r1, #64	; 0x40
 8000d1a:	483e      	ldr	r0, [pc, #248]	; (8000e14 <display7SEG+0x31c>)
 8000d1c:	f000 fff9 	bl	8001d12 <HAL_GPIO_WritePin>
}
 8000d20:	e073      	b.n	8000e0a <display7SEG+0x312>
	else if(time==7)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2b07      	cmp	r3, #7
 8000d26:	d123      	bne.n	8000d70 <display7SEG+0x278>
		HAL_GPIO_WritePin(P_1_GPIO_Port, P_1_Pin, RESET);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	4839      	ldr	r0, [pc, #228]	; (8000e14 <display7SEG+0x31c>)
 8000d2e:	f000 fff0 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_2_GPIO_Port, P_2_Pin, RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2102      	movs	r1, #2
 8000d36:	4837      	ldr	r0, [pc, #220]	; (8000e14 <display7SEG+0x31c>)
 8000d38:	f000 ffeb 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_3_GPIO_Port, P_3_Pin, RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2104      	movs	r1, #4
 8000d40:	4834      	ldr	r0, [pc, #208]	; (8000e14 <display7SEG+0x31c>)
 8000d42:	f000 ffe6 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_4_GPIO_Port, P_4_Pin, SET);
 8000d46:	2201      	movs	r2, #1
 8000d48:	2108      	movs	r1, #8
 8000d4a:	4832      	ldr	r0, [pc, #200]	; (8000e14 <display7SEG+0x31c>)
 8000d4c:	f000 ffe1 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_5_GPIO_Port, P_5_Pin, SET);
 8000d50:	2201      	movs	r2, #1
 8000d52:	2110      	movs	r1, #16
 8000d54:	482f      	ldr	r0, [pc, #188]	; (8000e14 <display7SEG+0x31c>)
 8000d56:	f000 ffdc 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_6_GPIO_Port, P_6_Pin, SET);
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	2120      	movs	r1, #32
 8000d5e:	482d      	ldr	r0, [pc, #180]	; (8000e14 <display7SEG+0x31c>)
 8000d60:	f000 ffd7 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_7_GPIO_Port, P_7_Pin, SET);
 8000d64:	2201      	movs	r2, #1
 8000d66:	2140      	movs	r1, #64	; 0x40
 8000d68:	482a      	ldr	r0, [pc, #168]	; (8000e14 <display7SEG+0x31c>)
 8000d6a:	f000 ffd2 	bl	8001d12 <HAL_GPIO_WritePin>
}
 8000d6e:	e04c      	b.n	8000e0a <display7SEG+0x312>
	else if(time==8)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2b08      	cmp	r3, #8
 8000d74:	d123      	bne.n	8000dbe <display7SEG+0x2c6>
		HAL_GPIO_WritePin(P_1_GPIO_Port, P_1_Pin, RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2101      	movs	r1, #1
 8000d7a:	4826      	ldr	r0, [pc, #152]	; (8000e14 <display7SEG+0x31c>)
 8000d7c:	f000 ffc9 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_2_GPIO_Port, P_2_Pin, RESET);
 8000d80:	2200      	movs	r2, #0
 8000d82:	2102      	movs	r1, #2
 8000d84:	4823      	ldr	r0, [pc, #140]	; (8000e14 <display7SEG+0x31c>)
 8000d86:	f000 ffc4 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_3_GPIO_Port, P_3_Pin, RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2104      	movs	r1, #4
 8000d8e:	4821      	ldr	r0, [pc, #132]	; (8000e14 <display7SEG+0x31c>)
 8000d90:	f000 ffbf 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_4_GPIO_Port, P_4_Pin, RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2108      	movs	r1, #8
 8000d98:	481e      	ldr	r0, [pc, #120]	; (8000e14 <display7SEG+0x31c>)
 8000d9a:	f000 ffba 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_5_GPIO_Port, P_5_Pin, RESET);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2110      	movs	r1, #16
 8000da2:	481c      	ldr	r0, [pc, #112]	; (8000e14 <display7SEG+0x31c>)
 8000da4:	f000 ffb5 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_6_GPIO_Port, P_6_Pin, RESET);
 8000da8:	2200      	movs	r2, #0
 8000daa:	2120      	movs	r1, #32
 8000dac:	4819      	ldr	r0, [pc, #100]	; (8000e14 <display7SEG+0x31c>)
 8000dae:	f000 ffb0 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_7_GPIO_Port, P_7_Pin, RESET);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2140      	movs	r1, #64	; 0x40
 8000db6:	4817      	ldr	r0, [pc, #92]	; (8000e14 <display7SEG+0x31c>)
 8000db8:	f000 ffab 	bl	8001d12 <HAL_GPIO_WritePin>
}
 8000dbc:	e025      	b.n	8000e0a <display7SEG+0x312>
	else if(time==9)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2b09      	cmp	r3, #9
 8000dc2:	d122      	bne.n	8000e0a <display7SEG+0x312>
		HAL_GPIO_WritePin(P_1_GPIO_Port, P_1_Pin, RESET);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	4812      	ldr	r0, [pc, #72]	; (8000e14 <display7SEG+0x31c>)
 8000dca:	f000 ffa2 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_2_GPIO_Port, P_2_Pin, RESET);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2102      	movs	r1, #2
 8000dd2:	4810      	ldr	r0, [pc, #64]	; (8000e14 <display7SEG+0x31c>)
 8000dd4:	f000 ff9d 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_3_GPIO_Port, P_3_Pin, RESET);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2104      	movs	r1, #4
 8000ddc:	480d      	ldr	r0, [pc, #52]	; (8000e14 <display7SEG+0x31c>)
 8000dde:	f000 ff98 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_4_GPIO_Port, P_4_Pin, RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2108      	movs	r1, #8
 8000de6:	480b      	ldr	r0, [pc, #44]	; (8000e14 <display7SEG+0x31c>)
 8000de8:	f000 ff93 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_5_GPIO_Port, P_5_Pin, SET);
 8000dec:	2201      	movs	r2, #1
 8000dee:	2110      	movs	r1, #16
 8000df0:	4808      	ldr	r0, [pc, #32]	; (8000e14 <display7SEG+0x31c>)
 8000df2:	f000 ff8e 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_6_GPIO_Port, P_6_Pin, RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2120      	movs	r1, #32
 8000dfa:	4806      	ldr	r0, [pc, #24]	; (8000e14 <display7SEG+0x31c>)
 8000dfc:	f000 ff89 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P_7_GPIO_Port, P_7_Pin, RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2140      	movs	r1, #64	; 0x40
 8000e04:	4803      	ldr	r0, [pc, #12]	; (8000e14 <display7SEG+0x31c>)
 8000e06:	f000 ff84 	bl	8001d12 <HAL_GPIO_WritePin>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40010c00 	.word	0x40010c00

08000e18 <display7SEGforled2>:

void display7SEGforled2(int time)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]

	if(time==0)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d129      	bne.n	8000e7a <display7SEGforled2+0x62>
	{
		HAL_GPIO_WritePin(P1_1_GPIO_Port, P1_1_Pin, RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2180      	movs	r1, #128	; 0x80
 8000e2a:	48c8      	ldr	r0, [pc, #800]	; (800114c <display7SEGforled2+0x334>)
 8000e2c:	f000 ff71 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_2_GPIO_Port, P1_2_Pin, RESET);
 8000e30:	2200      	movs	r2, #0
 8000e32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e36:	48c5      	ldr	r0, [pc, #788]	; (800114c <display7SEGforled2+0x334>)
 8000e38:	f000 ff6b 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_3_GPIO_Port, P1_3_Pin, RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e42:	48c2      	ldr	r0, [pc, #776]	; (800114c <display7SEGforled2+0x334>)
 8000e44:	f000 ff65 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_4_GPIO_Port, P1_4_Pin, RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e4e:	48bf      	ldr	r0, [pc, #764]	; (800114c <display7SEGforled2+0x334>)
 8000e50:	f000 ff5f 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_5_GPIO_Port, P1_5_Pin, RESET);
 8000e54:	2200      	movs	r2, #0
 8000e56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e5a:	48bc      	ldr	r0, [pc, #752]	; (800114c <display7SEGforled2+0x334>)
 8000e5c:	f000 ff59 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_6_GPIO_Port, P1_6_Pin, RESET);
 8000e60:	2200      	movs	r2, #0
 8000e62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e66:	48b9      	ldr	r0, [pc, #740]	; (800114c <display7SEGforled2+0x334>)
 8000e68:	f000 ff53 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_7_GPIO_Port, P1_7_Pin, SET);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e72:	48b6      	ldr	r0, [pc, #728]	; (800114c <display7SEGforled2+0x334>)
 8000e74:	f000 ff4d 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
		HAL_GPIO_WritePin(P1_4_GPIO_Port, P1_4_Pin, RESET);
		HAL_GPIO_WritePin(P1_5_GPIO_Port, P1_5_Pin, SET);
		HAL_GPIO_WritePin(P1_6_GPIO_Port, P1_6_Pin, RESET);
		HAL_GPIO_WritePin(P1_7_GPIO_Port, P1_7_Pin, RESET);
	}
}
<<<<<<< HEAD
 8000f40:	e196      	b.n	8001270 <display7SEGforled2+0x390>
	else if(time==1)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d129      	bne.n	8000f9c <display7SEGforled2+0xbc>
		HAL_GPIO_WritePin(P1_1_GPIO_Port, P1_1_Pin, SET);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	2180      	movs	r1, #128	; 0x80
 8000f4c:	48b1      	ldr	r0, [pc, #708]	; (8001214 <display7SEGforled2+0x334>)
 8000f4e:	f000 ff44 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_2_GPIO_Port, P1_2_Pin, RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f58:	48ae      	ldr	r0, [pc, #696]	; (8001214 <display7SEGforled2+0x334>)
 8000f5a:	f000 ff3e 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_3_GPIO_Port, P1_3_Pin, RESET);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f64:	48ab      	ldr	r0, [pc, #684]	; (8001214 <display7SEGforled2+0x334>)
 8000f66:	f000 ff38 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_4_GPIO_Port, P1_4_Pin, SET);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f70:	48a8      	ldr	r0, [pc, #672]	; (8001214 <display7SEGforled2+0x334>)
 8000f72:	f000 ff32 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_5_GPIO_Port, P1_5_Pin, SET);
 8000f76:	2201      	movs	r2, #1
 8000f78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f7c:	48a5      	ldr	r0, [pc, #660]	; (8001214 <display7SEGforled2+0x334>)
 8000f7e:	f000 ff2c 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_6_GPIO_Port, P1_6_Pin, SET);
 8000f82:	2201      	movs	r2, #1
 8000f84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f88:	48a2      	ldr	r0, [pc, #648]	; (8001214 <display7SEGforled2+0x334>)
 8000f8a:	f000 ff26 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_7_GPIO_Port, P1_7_Pin, SET);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f94:	489f      	ldr	r0, [pc, #636]	; (8001214 <display7SEGforled2+0x334>)
 8000f96:	f000 ff20 	bl	8001dda <HAL_GPIO_WritePin>
}
 8000f9a:	e169      	b.n	8001270 <display7SEGforled2+0x390>
	else if(time==2)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d129      	bne.n	8000ff6 <display7SEGforled2+0x116>
		HAL_GPIO_WritePin(P1_1_GPIO_Port, P1_1_Pin, RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2180      	movs	r1, #128	; 0x80
 8000fa6:	489b      	ldr	r0, [pc, #620]	; (8001214 <display7SEGforled2+0x334>)
 8000fa8:	f000 ff17 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_2_GPIO_Port, P1_2_Pin, RESET);
 8000fac:	2200      	movs	r2, #0
 8000fae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fb2:	4898      	ldr	r0, [pc, #608]	; (8001214 <display7SEGforled2+0x334>)
 8000fb4:	f000 ff11 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_3_GPIO_Port, P1_3_Pin, SET);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fbe:	4895      	ldr	r0, [pc, #596]	; (8001214 <display7SEGforled2+0x334>)
 8000fc0:	f000 ff0b 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_4_GPIO_Port, P1_4_Pin, RESET);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fca:	4892      	ldr	r0, [pc, #584]	; (8001214 <display7SEGforled2+0x334>)
 8000fcc:	f000 ff05 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_5_GPIO_Port, P1_5_Pin, RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fd6:	488f      	ldr	r0, [pc, #572]	; (8001214 <display7SEGforled2+0x334>)
 8000fd8:	f000 feff 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_6_GPIO_Port, P1_6_Pin, SET);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fe2:	488c      	ldr	r0, [pc, #560]	; (8001214 <display7SEGforled2+0x334>)
 8000fe4:	f000 fef9 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_7_GPIO_Port, P1_7_Pin, RESET);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fee:	4889      	ldr	r0, [pc, #548]	; (8001214 <display7SEGforled2+0x334>)
 8000ff0:	f000 fef3 	bl	8001dda <HAL_GPIO_WritePin>
}
 8000ff4:	e13c      	b.n	8001270 <display7SEGforled2+0x390>
	else if(time==3)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b03      	cmp	r3, #3
 8000ffa:	d129      	bne.n	8001050 <display7SEGforled2+0x170>
		HAL_GPIO_WritePin(P1_1_GPIO_Port, P1_1_Pin, RESET);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2180      	movs	r1, #128	; 0x80
 8001000:	4884      	ldr	r0, [pc, #528]	; (8001214 <display7SEGforled2+0x334>)
 8001002:	f000 feea 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_2_GPIO_Port, P1_2_Pin, RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	f44f 7180 	mov.w	r1, #256	; 0x100
 800100c:	4881      	ldr	r0, [pc, #516]	; (8001214 <display7SEGforled2+0x334>)
 800100e:	f000 fee4 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_3_GPIO_Port, P1_3_Pin, RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001018:	487e      	ldr	r0, [pc, #504]	; (8001214 <display7SEGforled2+0x334>)
 800101a:	f000 fede 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_4_GPIO_Port, P1_4_Pin, RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001024:	487b      	ldr	r0, [pc, #492]	; (8001214 <display7SEGforled2+0x334>)
 8001026:	f000 fed8 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_5_GPIO_Port, P1_5_Pin, SET);
 800102a:	2201      	movs	r2, #1
 800102c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001030:	4878      	ldr	r0, [pc, #480]	; (8001214 <display7SEGforled2+0x334>)
 8001032:	f000 fed2 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_6_GPIO_Port, P1_6_Pin, SET);
 8001036:	2201      	movs	r2, #1
 8001038:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800103c:	4875      	ldr	r0, [pc, #468]	; (8001214 <display7SEGforled2+0x334>)
 800103e:	f000 fecc 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_7_GPIO_Port, P1_7_Pin, RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001048:	4872      	ldr	r0, [pc, #456]	; (8001214 <display7SEGforled2+0x334>)
 800104a:	f000 fec6 	bl	8001dda <HAL_GPIO_WritePin>
}
 800104e:	e10f      	b.n	8001270 <display7SEGforled2+0x390>
	else if(time==4)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b04      	cmp	r3, #4
 8001054:	d129      	bne.n	80010aa <display7SEGforled2+0x1ca>
		HAL_GPIO_WritePin(P1_1_GPIO_Port, P1_1_Pin, SET);
 8001056:	2201      	movs	r2, #1
 8001058:	2180      	movs	r1, #128	; 0x80
 800105a:	486e      	ldr	r0, [pc, #440]	; (8001214 <display7SEGforled2+0x334>)
 800105c:	f000 febd 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_2_GPIO_Port, P1_2_Pin, RESET);
 8001060:	2200      	movs	r2, #0
 8001062:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001066:	486b      	ldr	r0, [pc, #428]	; (8001214 <display7SEGforled2+0x334>)
 8001068:	f000 feb7 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_3_GPIO_Port, P1_3_Pin, RESET);
 800106c:	2200      	movs	r2, #0
 800106e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001072:	4868      	ldr	r0, [pc, #416]	; (8001214 <display7SEGforled2+0x334>)
 8001074:	f000 feb1 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_4_GPIO_Port, P1_4_Pin, SET);
 8001078:	2201      	movs	r2, #1
 800107a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800107e:	4865      	ldr	r0, [pc, #404]	; (8001214 <display7SEGforled2+0x334>)
 8001080:	f000 feab 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_5_GPIO_Port, P1_5_Pin, SET);
 8001084:	2201      	movs	r2, #1
 8001086:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800108a:	4862      	ldr	r0, [pc, #392]	; (8001214 <display7SEGforled2+0x334>)
 800108c:	f000 fea5 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_6_GPIO_Port, P1_6_Pin, RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001096:	485f      	ldr	r0, [pc, #380]	; (8001214 <display7SEGforled2+0x334>)
 8001098:	f000 fe9f 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_7_GPIO_Port, P1_7_Pin, RESET);
 800109c:	2200      	movs	r2, #0
 800109e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010a2:	485c      	ldr	r0, [pc, #368]	; (8001214 <display7SEGforled2+0x334>)
 80010a4:	f000 fe99 	bl	8001dda <HAL_GPIO_WritePin>
}
 80010a8:	e0e2      	b.n	8001270 <display7SEGforled2+0x390>
	else if(time==5)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b05      	cmp	r3, #5
 80010ae:	d129      	bne.n	8001104 <display7SEGforled2+0x224>
		HAL_GPIO_WritePin(P1_1_GPIO_Port, P1_1_Pin, RESET);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2180      	movs	r1, #128	; 0x80
 80010b4:	4857      	ldr	r0, [pc, #348]	; (8001214 <display7SEGforled2+0x334>)
 80010b6:	f000 fe90 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_2_GPIO_Port, P1_2_Pin, SET);
 80010ba:	2201      	movs	r2, #1
 80010bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c0:	4854      	ldr	r0, [pc, #336]	; (8001214 <display7SEGforled2+0x334>)
 80010c2:	f000 fe8a 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_3_GPIO_Port, P1_3_Pin, RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010cc:	4851      	ldr	r0, [pc, #324]	; (8001214 <display7SEGforled2+0x334>)
 80010ce:	f000 fe84 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_4_GPIO_Port, P1_4_Pin, RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010d8:	484e      	ldr	r0, [pc, #312]	; (8001214 <display7SEGforled2+0x334>)
 80010da:	f000 fe7e 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_5_GPIO_Port, P1_5_Pin, SET);
 80010de:	2201      	movs	r2, #1
 80010e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010e4:	484b      	ldr	r0, [pc, #300]	; (8001214 <display7SEGforled2+0x334>)
 80010e6:	f000 fe78 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_6_GPIO_Port, P1_6_Pin, RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010f0:	4848      	ldr	r0, [pc, #288]	; (8001214 <display7SEGforled2+0x334>)
 80010f2:	f000 fe72 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_7_GPIO_Port, P1_7_Pin, RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010fc:	4845      	ldr	r0, [pc, #276]	; (8001214 <display7SEGforled2+0x334>)
 80010fe:	f000 fe6c 	bl	8001dda <HAL_GPIO_WritePin>
}
 8001102:	e0b5      	b.n	8001270 <display7SEGforled2+0x390>
	else if(time==6)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b06      	cmp	r3, #6
 8001108:	d129      	bne.n	800115e <display7SEGforled2+0x27e>
		HAL_GPIO_WritePin(P1_1_GPIO_Port, P1_1_Pin, RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	2180      	movs	r1, #128	; 0x80
 800110e:	4841      	ldr	r0, [pc, #260]	; (8001214 <display7SEGforled2+0x334>)
 8001110:	f000 fe63 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_2_GPIO_Port, P1_2_Pin, SET);
 8001114:	2201      	movs	r2, #1
 8001116:	f44f 7180 	mov.w	r1, #256	; 0x100
 800111a:	483e      	ldr	r0, [pc, #248]	; (8001214 <display7SEGforled2+0x334>)
 800111c:	f000 fe5d 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_3_GPIO_Port, P1_3_Pin, RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001126:	483b      	ldr	r0, [pc, #236]	; (8001214 <display7SEGforled2+0x334>)
 8001128:	f000 fe57 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_4_GPIO_Port, P1_4_Pin, RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001132:	4838      	ldr	r0, [pc, #224]	; (8001214 <display7SEGforled2+0x334>)
 8001134:	f000 fe51 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_5_GPIO_Port, P1_5_Pin, RESET);
 8001138:	2200      	movs	r2, #0
 800113a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800113e:	4835      	ldr	r0, [pc, #212]	; (8001214 <display7SEGforled2+0x334>)
 8001140:	f000 fe4b 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_6_GPIO_Port, P1_6_Pin, RESET);
 8001144:	2200      	movs	r2, #0
 8001146:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800114a:	4832      	ldr	r0, [pc, #200]	; (8001214 <display7SEGforled2+0x334>)
 800114c:	f000 fe45 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_7_GPIO_Port, P1_7_Pin, RESET);
 8001150:	2200      	movs	r2, #0
 8001152:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001156:	482f      	ldr	r0, [pc, #188]	; (8001214 <display7SEGforled2+0x334>)
 8001158:	f000 fe3f 	bl	8001dda <HAL_GPIO_WritePin>
}
 800115c:	e088      	b.n	8001270 <display7SEGforled2+0x390>
	else if(time==7)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2b07      	cmp	r3, #7
 8001162:	d129      	bne.n	80011b8 <display7SEGforled2+0x2d8>
		HAL_GPIO_WritePin(P1_1_GPIO_Port, P1_1_Pin, RESET);
 8001164:	2200      	movs	r2, #0
 8001166:	2180      	movs	r1, #128	; 0x80
 8001168:	482a      	ldr	r0, [pc, #168]	; (8001214 <display7SEGforled2+0x334>)
 800116a:	f000 fe36 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_2_GPIO_Port, P1_2_Pin, RESET);
 800116e:	2200      	movs	r2, #0
 8001170:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001174:	4827      	ldr	r0, [pc, #156]	; (8001214 <display7SEGforled2+0x334>)
 8001176:	f000 fe30 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_3_GPIO_Port, P1_3_Pin, RESET);
 800117a:	2200      	movs	r2, #0
 800117c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001180:	4824      	ldr	r0, [pc, #144]	; (8001214 <display7SEGforled2+0x334>)
 8001182:	f000 fe2a 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_4_GPIO_Port, P1_4_Pin, SET);
 8001186:	2201      	movs	r2, #1
 8001188:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800118c:	4821      	ldr	r0, [pc, #132]	; (8001214 <display7SEGforled2+0x334>)
 800118e:	f000 fe24 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_5_GPIO_Port, P1_5_Pin, SET);
 8001192:	2201      	movs	r2, #1
 8001194:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001198:	481e      	ldr	r0, [pc, #120]	; (8001214 <display7SEGforled2+0x334>)
 800119a:	f000 fe1e 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_6_GPIO_Port, P1_6_Pin, SET);
 800119e:	2201      	movs	r2, #1
 80011a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011a4:	481b      	ldr	r0, [pc, #108]	; (8001214 <display7SEGforled2+0x334>)
 80011a6:	f000 fe18 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_7_GPIO_Port, P1_7_Pin, SET);
 80011aa:	2201      	movs	r2, #1
 80011ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011b0:	4818      	ldr	r0, [pc, #96]	; (8001214 <display7SEGforled2+0x334>)
 80011b2:	f000 fe12 	bl	8001dda <HAL_GPIO_WritePin>
}
 80011b6:	e05b      	b.n	8001270 <display7SEGforled2+0x390>
	else if(time==8)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b08      	cmp	r3, #8
 80011bc:	d12c      	bne.n	8001218 <display7SEGforled2+0x338>
		HAL_GPIO_WritePin(P1_1_GPIO_Port, P1_1_Pin, RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	2180      	movs	r1, #128	; 0x80
 80011c2:	4814      	ldr	r0, [pc, #80]	; (8001214 <display7SEGforled2+0x334>)
 80011c4:	f000 fe09 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_2_GPIO_Port, P1_2_Pin, RESET);
 80011c8:	2200      	movs	r2, #0
 80011ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ce:	4811      	ldr	r0, [pc, #68]	; (8001214 <display7SEGforled2+0x334>)
 80011d0:	f000 fe03 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_3_GPIO_Port, P1_3_Pin, RESET);
 80011d4:	2200      	movs	r2, #0
 80011d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011da:	480e      	ldr	r0, [pc, #56]	; (8001214 <display7SEGforled2+0x334>)
 80011dc:	f000 fdfd 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_4_GPIO_Port, P1_4_Pin, RESET);
 80011e0:	2200      	movs	r2, #0
 80011e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011e6:	480b      	ldr	r0, [pc, #44]	; (8001214 <display7SEGforled2+0x334>)
 80011e8:	f000 fdf7 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_5_GPIO_Port, P1_5_Pin, RESET);
 80011ec:	2200      	movs	r2, #0
 80011ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011f2:	4808      	ldr	r0, [pc, #32]	; (8001214 <display7SEGforled2+0x334>)
 80011f4:	f000 fdf1 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_6_GPIO_Port, P1_6_Pin, RESET);
 80011f8:	2200      	movs	r2, #0
 80011fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011fe:	4805      	ldr	r0, [pc, #20]	; (8001214 <display7SEGforled2+0x334>)
 8001200:	f000 fdeb 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_7_GPIO_Port, P1_7_Pin, RESET);
 8001204:	2200      	movs	r2, #0
 8001206:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800120a:	4802      	ldr	r0, [pc, #8]	; (8001214 <display7SEGforled2+0x334>)
 800120c:	f000 fde5 	bl	8001dda <HAL_GPIO_WritePin>
}
 8001210:	e02e      	b.n	8001270 <display7SEGforled2+0x390>
 8001212:	bf00      	nop
 8001214:	40010c00 	.word	0x40010c00
	else if(time==9)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b09      	cmp	r3, #9
 800121c:	d128      	bne.n	8001270 <display7SEGforled2+0x390>
		HAL_GPIO_WritePin(P1_1_GPIO_Port, P1_1_Pin, RESET);
 800121e:	2200      	movs	r2, #0
 8001220:	2180      	movs	r1, #128	; 0x80
 8001222:	4815      	ldr	r0, [pc, #84]	; (8001278 <display7SEGforled2+0x398>)
 8001224:	f000 fdd9 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_2_GPIO_Port, P1_2_Pin, RESET);
 8001228:	2200      	movs	r2, #0
 800122a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800122e:	4812      	ldr	r0, [pc, #72]	; (8001278 <display7SEGforled2+0x398>)
 8001230:	f000 fdd3 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_3_GPIO_Port, P1_3_Pin, RESET);
 8001234:	2200      	movs	r2, #0
 8001236:	f44f 7100 	mov.w	r1, #512	; 0x200
 800123a:	480f      	ldr	r0, [pc, #60]	; (8001278 <display7SEGforled2+0x398>)
 800123c:	f000 fdcd 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_4_GPIO_Port, P1_4_Pin, RESET);
 8001240:	2200      	movs	r2, #0
 8001242:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001246:	480c      	ldr	r0, [pc, #48]	; (8001278 <display7SEGforled2+0x398>)
 8001248:	f000 fdc7 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_5_GPIO_Port, P1_5_Pin, SET);
 800124c:	2201      	movs	r2, #1
 800124e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001252:	4809      	ldr	r0, [pc, #36]	; (8001278 <display7SEGforled2+0x398>)
 8001254:	f000 fdc1 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_6_GPIO_Port, P1_6_Pin, RESET);
 8001258:	2200      	movs	r2, #0
 800125a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800125e:	4806      	ldr	r0, [pc, #24]	; (8001278 <display7SEGforled2+0x398>)
 8001260:	f000 fdbb 	bl	8001dda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_7_GPIO_Port, P1_7_Pin, RESET);
 8001264:	2200      	movs	r2, #0
 8001266:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800126a:	4803      	ldr	r0, [pc, #12]	; (8001278 <display7SEGforled2+0x398>)
 800126c:	f000 fdb5 	bl	8001dda <HAL_GPIO_WritePin>
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40010c00 	.word	0x40010c00

0800127c <main>:
=======
 8000e78:	e196      	b.n	80011a8 <display7SEGforled2+0x390>
	else if(time==1)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d129      	bne.n	8000ed4 <display7SEGforled2+0xbc>
		HAL_GPIO_WritePin(P1_1_GPIO_Port, P1_1_Pin, SET);
 8000e80:	2201      	movs	r2, #1
 8000e82:	2180      	movs	r1, #128	; 0x80
 8000e84:	48b1      	ldr	r0, [pc, #708]	; (800114c <display7SEGforled2+0x334>)
 8000e86:	f000 ff44 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_2_GPIO_Port, P1_2_Pin, RESET);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e90:	48ae      	ldr	r0, [pc, #696]	; (800114c <display7SEGforled2+0x334>)
 8000e92:	f000 ff3e 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_3_GPIO_Port, P1_3_Pin, RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e9c:	48ab      	ldr	r0, [pc, #684]	; (800114c <display7SEGforled2+0x334>)
 8000e9e:	f000 ff38 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_4_GPIO_Port, P1_4_Pin, SET);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ea8:	48a8      	ldr	r0, [pc, #672]	; (800114c <display7SEGforled2+0x334>)
 8000eaa:	f000 ff32 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_5_GPIO_Port, P1_5_Pin, SET);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eb4:	48a5      	ldr	r0, [pc, #660]	; (800114c <display7SEGforled2+0x334>)
 8000eb6:	f000 ff2c 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_6_GPIO_Port, P1_6_Pin, SET);
 8000eba:	2201      	movs	r2, #1
 8000ebc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ec0:	48a2      	ldr	r0, [pc, #648]	; (800114c <display7SEGforled2+0x334>)
 8000ec2:	f000 ff26 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_7_GPIO_Port, P1_7_Pin, SET);
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ecc:	489f      	ldr	r0, [pc, #636]	; (800114c <display7SEGforled2+0x334>)
 8000ece:	f000 ff20 	bl	8001d12 <HAL_GPIO_WritePin>
}
 8000ed2:	e169      	b.n	80011a8 <display7SEGforled2+0x390>
	else if(time==2)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d129      	bne.n	8000f2e <display7SEGforled2+0x116>
		HAL_GPIO_WritePin(P1_1_GPIO_Port, P1_1_Pin, RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2180      	movs	r1, #128	; 0x80
 8000ede:	489b      	ldr	r0, [pc, #620]	; (800114c <display7SEGforled2+0x334>)
 8000ee0:	f000 ff17 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_2_GPIO_Port, P1_2_Pin, RESET);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eea:	4898      	ldr	r0, [pc, #608]	; (800114c <display7SEGforled2+0x334>)
 8000eec:	f000 ff11 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_3_GPIO_Port, P1_3_Pin, SET);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ef6:	4895      	ldr	r0, [pc, #596]	; (800114c <display7SEGforled2+0x334>)
 8000ef8:	f000 ff0b 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_4_GPIO_Port, P1_4_Pin, RESET);
 8000efc:	2200      	movs	r2, #0
 8000efe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f02:	4892      	ldr	r0, [pc, #584]	; (800114c <display7SEGforled2+0x334>)
 8000f04:	f000 ff05 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_5_GPIO_Port, P1_5_Pin, RESET);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f0e:	488f      	ldr	r0, [pc, #572]	; (800114c <display7SEGforled2+0x334>)
 8000f10:	f000 feff 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_6_GPIO_Port, P1_6_Pin, SET);
 8000f14:	2201      	movs	r2, #1
 8000f16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f1a:	488c      	ldr	r0, [pc, #560]	; (800114c <display7SEGforled2+0x334>)
 8000f1c:	f000 fef9 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_7_GPIO_Port, P1_7_Pin, RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f26:	4889      	ldr	r0, [pc, #548]	; (800114c <display7SEGforled2+0x334>)
 8000f28:	f000 fef3 	bl	8001d12 <HAL_GPIO_WritePin>
}
 8000f2c:	e13c      	b.n	80011a8 <display7SEGforled2+0x390>
	else if(time==3)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2b03      	cmp	r3, #3
 8000f32:	d129      	bne.n	8000f88 <display7SEGforled2+0x170>
		HAL_GPIO_WritePin(P1_1_GPIO_Port, P1_1_Pin, RESET);
 8000f34:	2200      	movs	r2, #0
 8000f36:	2180      	movs	r1, #128	; 0x80
 8000f38:	4884      	ldr	r0, [pc, #528]	; (800114c <display7SEGforled2+0x334>)
 8000f3a:	f000 feea 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_2_GPIO_Port, P1_2_Pin, RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f44:	4881      	ldr	r0, [pc, #516]	; (800114c <display7SEGforled2+0x334>)
 8000f46:	f000 fee4 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_3_GPIO_Port, P1_3_Pin, RESET);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f50:	487e      	ldr	r0, [pc, #504]	; (800114c <display7SEGforled2+0x334>)
 8000f52:	f000 fede 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_4_GPIO_Port, P1_4_Pin, RESET);
 8000f56:	2200      	movs	r2, #0
 8000f58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f5c:	487b      	ldr	r0, [pc, #492]	; (800114c <display7SEGforled2+0x334>)
 8000f5e:	f000 fed8 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_5_GPIO_Port, P1_5_Pin, SET);
 8000f62:	2201      	movs	r2, #1
 8000f64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f68:	4878      	ldr	r0, [pc, #480]	; (800114c <display7SEGforled2+0x334>)
 8000f6a:	f000 fed2 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_6_GPIO_Port, P1_6_Pin, SET);
 8000f6e:	2201      	movs	r2, #1
 8000f70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f74:	4875      	ldr	r0, [pc, #468]	; (800114c <display7SEGforled2+0x334>)
 8000f76:	f000 fecc 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_7_GPIO_Port, P1_7_Pin, RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f80:	4872      	ldr	r0, [pc, #456]	; (800114c <display7SEGforled2+0x334>)
 8000f82:	f000 fec6 	bl	8001d12 <HAL_GPIO_WritePin>
}
 8000f86:	e10f      	b.n	80011a8 <display7SEGforled2+0x390>
	else if(time==4)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2b04      	cmp	r3, #4
 8000f8c:	d129      	bne.n	8000fe2 <display7SEGforled2+0x1ca>
		HAL_GPIO_WritePin(P1_1_GPIO_Port, P1_1_Pin, SET);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	2180      	movs	r1, #128	; 0x80
 8000f92:	486e      	ldr	r0, [pc, #440]	; (800114c <display7SEGforled2+0x334>)
 8000f94:	f000 febd 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_2_GPIO_Port, P1_2_Pin, RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f9e:	486b      	ldr	r0, [pc, #428]	; (800114c <display7SEGforled2+0x334>)
 8000fa0:	f000 feb7 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_3_GPIO_Port, P1_3_Pin, RESET);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000faa:	4868      	ldr	r0, [pc, #416]	; (800114c <display7SEGforled2+0x334>)
 8000fac:	f000 feb1 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_4_GPIO_Port, P1_4_Pin, SET);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fb6:	4865      	ldr	r0, [pc, #404]	; (800114c <display7SEGforled2+0x334>)
 8000fb8:	f000 feab 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_5_GPIO_Port, P1_5_Pin, SET);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fc2:	4862      	ldr	r0, [pc, #392]	; (800114c <display7SEGforled2+0x334>)
 8000fc4:	f000 fea5 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_6_GPIO_Port, P1_6_Pin, RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fce:	485f      	ldr	r0, [pc, #380]	; (800114c <display7SEGforled2+0x334>)
 8000fd0:	f000 fe9f 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_7_GPIO_Port, P1_7_Pin, RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fda:	485c      	ldr	r0, [pc, #368]	; (800114c <display7SEGforled2+0x334>)
 8000fdc:	f000 fe99 	bl	8001d12 <HAL_GPIO_WritePin>
}
 8000fe0:	e0e2      	b.n	80011a8 <display7SEGforled2+0x390>
	else if(time==5)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2b05      	cmp	r3, #5
 8000fe6:	d129      	bne.n	800103c <display7SEGforled2+0x224>
		HAL_GPIO_WritePin(P1_1_GPIO_Port, P1_1_Pin, RESET);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2180      	movs	r1, #128	; 0x80
 8000fec:	4857      	ldr	r0, [pc, #348]	; (800114c <display7SEGforled2+0x334>)
 8000fee:	f000 fe90 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_2_GPIO_Port, P1_2_Pin, SET);
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ff8:	4854      	ldr	r0, [pc, #336]	; (800114c <display7SEGforled2+0x334>)
 8000ffa:	f000 fe8a 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_3_GPIO_Port, P1_3_Pin, RESET);
 8000ffe:	2200      	movs	r2, #0
 8001000:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001004:	4851      	ldr	r0, [pc, #324]	; (800114c <display7SEGforled2+0x334>)
 8001006:	f000 fe84 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_4_GPIO_Port, P1_4_Pin, RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001010:	484e      	ldr	r0, [pc, #312]	; (800114c <display7SEGforled2+0x334>)
 8001012:	f000 fe7e 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_5_GPIO_Port, P1_5_Pin, SET);
 8001016:	2201      	movs	r2, #1
 8001018:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800101c:	484b      	ldr	r0, [pc, #300]	; (800114c <display7SEGforled2+0x334>)
 800101e:	f000 fe78 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_6_GPIO_Port, P1_6_Pin, RESET);
 8001022:	2200      	movs	r2, #0
 8001024:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001028:	4848      	ldr	r0, [pc, #288]	; (800114c <display7SEGforled2+0x334>)
 800102a:	f000 fe72 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_7_GPIO_Port, P1_7_Pin, RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001034:	4845      	ldr	r0, [pc, #276]	; (800114c <display7SEGforled2+0x334>)
 8001036:	f000 fe6c 	bl	8001d12 <HAL_GPIO_WritePin>
}
 800103a:	e0b5      	b.n	80011a8 <display7SEGforled2+0x390>
	else if(time==6)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b06      	cmp	r3, #6
 8001040:	d129      	bne.n	8001096 <display7SEGforled2+0x27e>
		HAL_GPIO_WritePin(P1_1_GPIO_Port, P1_1_Pin, RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	2180      	movs	r1, #128	; 0x80
 8001046:	4841      	ldr	r0, [pc, #260]	; (800114c <display7SEGforled2+0x334>)
 8001048:	f000 fe63 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_2_GPIO_Port, P1_2_Pin, SET);
 800104c:	2201      	movs	r2, #1
 800104e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001052:	483e      	ldr	r0, [pc, #248]	; (800114c <display7SEGforled2+0x334>)
 8001054:	f000 fe5d 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_3_GPIO_Port, P1_3_Pin, RESET);
 8001058:	2200      	movs	r2, #0
 800105a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800105e:	483b      	ldr	r0, [pc, #236]	; (800114c <display7SEGforled2+0x334>)
 8001060:	f000 fe57 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_4_GPIO_Port, P1_4_Pin, RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800106a:	4838      	ldr	r0, [pc, #224]	; (800114c <display7SEGforled2+0x334>)
 800106c:	f000 fe51 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_5_GPIO_Port, P1_5_Pin, RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001076:	4835      	ldr	r0, [pc, #212]	; (800114c <display7SEGforled2+0x334>)
 8001078:	f000 fe4b 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_6_GPIO_Port, P1_6_Pin, RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001082:	4832      	ldr	r0, [pc, #200]	; (800114c <display7SEGforled2+0x334>)
 8001084:	f000 fe45 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_7_GPIO_Port, P1_7_Pin, RESET);
 8001088:	2200      	movs	r2, #0
 800108a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800108e:	482f      	ldr	r0, [pc, #188]	; (800114c <display7SEGforled2+0x334>)
 8001090:	f000 fe3f 	bl	8001d12 <HAL_GPIO_WritePin>
}
 8001094:	e088      	b.n	80011a8 <display7SEGforled2+0x390>
	else if(time==7)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b07      	cmp	r3, #7
 800109a:	d129      	bne.n	80010f0 <display7SEGforled2+0x2d8>
		HAL_GPIO_WritePin(P1_1_GPIO_Port, P1_1_Pin, RESET);
 800109c:	2200      	movs	r2, #0
 800109e:	2180      	movs	r1, #128	; 0x80
 80010a0:	482a      	ldr	r0, [pc, #168]	; (800114c <display7SEGforled2+0x334>)
 80010a2:	f000 fe36 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_2_GPIO_Port, P1_2_Pin, RESET);
 80010a6:	2200      	movs	r2, #0
 80010a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ac:	4827      	ldr	r0, [pc, #156]	; (800114c <display7SEGforled2+0x334>)
 80010ae:	f000 fe30 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_3_GPIO_Port, P1_3_Pin, RESET);
 80010b2:	2200      	movs	r2, #0
 80010b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010b8:	4824      	ldr	r0, [pc, #144]	; (800114c <display7SEGforled2+0x334>)
 80010ba:	f000 fe2a 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_4_GPIO_Port, P1_4_Pin, SET);
 80010be:	2201      	movs	r2, #1
 80010c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010c4:	4821      	ldr	r0, [pc, #132]	; (800114c <display7SEGforled2+0x334>)
 80010c6:	f000 fe24 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_5_GPIO_Port, P1_5_Pin, SET);
 80010ca:	2201      	movs	r2, #1
 80010cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010d0:	481e      	ldr	r0, [pc, #120]	; (800114c <display7SEGforled2+0x334>)
 80010d2:	f000 fe1e 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_6_GPIO_Port, P1_6_Pin, SET);
 80010d6:	2201      	movs	r2, #1
 80010d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010dc:	481b      	ldr	r0, [pc, #108]	; (800114c <display7SEGforled2+0x334>)
 80010de:	f000 fe18 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_7_GPIO_Port, P1_7_Pin, SET);
 80010e2:	2201      	movs	r2, #1
 80010e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010e8:	4818      	ldr	r0, [pc, #96]	; (800114c <display7SEGforled2+0x334>)
 80010ea:	f000 fe12 	bl	8001d12 <HAL_GPIO_WritePin>
}
 80010ee:	e05b      	b.n	80011a8 <display7SEGforled2+0x390>
	else if(time==8)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b08      	cmp	r3, #8
 80010f4:	d12c      	bne.n	8001150 <display7SEGforled2+0x338>
		HAL_GPIO_WritePin(P1_1_GPIO_Port, P1_1_Pin, RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2180      	movs	r1, #128	; 0x80
 80010fa:	4814      	ldr	r0, [pc, #80]	; (800114c <display7SEGforled2+0x334>)
 80010fc:	f000 fe09 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_2_GPIO_Port, P1_2_Pin, RESET);
 8001100:	2200      	movs	r2, #0
 8001102:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001106:	4811      	ldr	r0, [pc, #68]	; (800114c <display7SEGforled2+0x334>)
 8001108:	f000 fe03 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_3_GPIO_Port, P1_3_Pin, RESET);
 800110c:	2200      	movs	r2, #0
 800110e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001112:	480e      	ldr	r0, [pc, #56]	; (800114c <display7SEGforled2+0x334>)
 8001114:	f000 fdfd 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_4_GPIO_Port, P1_4_Pin, RESET);
 8001118:	2200      	movs	r2, #0
 800111a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800111e:	480b      	ldr	r0, [pc, #44]	; (800114c <display7SEGforled2+0x334>)
 8001120:	f000 fdf7 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_5_GPIO_Port, P1_5_Pin, RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800112a:	4808      	ldr	r0, [pc, #32]	; (800114c <display7SEGforled2+0x334>)
 800112c:	f000 fdf1 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_6_GPIO_Port, P1_6_Pin, RESET);
 8001130:	2200      	movs	r2, #0
 8001132:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001136:	4805      	ldr	r0, [pc, #20]	; (800114c <display7SEGforled2+0x334>)
 8001138:	f000 fdeb 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_7_GPIO_Port, P1_7_Pin, RESET);
 800113c:	2200      	movs	r2, #0
 800113e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001142:	4802      	ldr	r0, [pc, #8]	; (800114c <display7SEGforled2+0x334>)
 8001144:	f000 fde5 	bl	8001d12 <HAL_GPIO_WritePin>
}
 8001148:	e02e      	b.n	80011a8 <display7SEGforled2+0x390>
 800114a:	bf00      	nop
 800114c:	40010c00 	.word	0x40010c00
	else if(time==9)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b09      	cmp	r3, #9
 8001154:	d128      	bne.n	80011a8 <display7SEGforled2+0x390>
		HAL_GPIO_WritePin(P1_1_GPIO_Port, P1_1_Pin, RESET);
 8001156:	2200      	movs	r2, #0
 8001158:	2180      	movs	r1, #128	; 0x80
 800115a:	4815      	ldr	r0, [pc, #84]	; (80011b0 <display7SEGforled2+0x398>)
 800115c:	f000 fdd9 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_2_GPIO_Port, P1_2_Pin, RESET);
 8001160:	2200      	movs	r2, #0
 8001162:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001166:	4812      	ldr	r0, [pc, #72]	; (80011b0 <display7SEGforled2+0x398>)
 8001168:	f000 fdd3 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_3_GPIO_Port, P1_3_Pin, RESET);
 800116c:	2200      	movs	r2, #0
 800116e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001172:	480f      	ldr	r0, [pc, #60]	; (80011b0 <display7SEGforled2+0x398>)
 8001174:	f000 fdcd 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_4_GPIO_Port, P1_4_Pin, RESET);
 8001178:	2200      	movs	r2, #0
 800117a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800117e:	480c      	ldr	r0, [pc, #48]	; (80011b0 <display7SEGforled2+0x398>)
 8001180:	f000 fdc7 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_5_GPIO_Port, P1_5_Pin, SET);
 8001184:	2201      	movs	r2, #1
 8001186:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800118a:	4809      	ldr	r0, [pc, #36]	; (80011b0 <display7SEGforled2+0x398>)
 800118c:	f000 fdc1 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_6_GPIO_Port, P1_6_Pin, RESET);
 8001190:	2200      	movs	r2, #0
 8001192:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001196:	4806      	ldr	r0, [pc, #24]	; (80011b0 <display7SEGforled2+0x398>)
 8001198:	f000 fdbb 	bl	8001d12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(P1_7_GPIO_Port, P1_7_Pin, RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011a2:	4803      	ldr	r0, [pc, #12]	; (80011b0 <display7SEGforled2+0x398>)
 80011a4:	f000 fdb5 	bl	8001d12 <HAL_GPIO_WritePin>
}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40010c00 	.word	0x40010c00

080011b4 <main>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< HEAD
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
=======
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 8001280:	f000 faaa 	bl	80017d8 <HAL_Init>
=======
 80011b8:	f000 faaa 	bl	8001710 <HAL_Init>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
 8001284:	f000 f80e 	bl	80012a4 <SystemClock_Config>
=======
 80011bc:	f000 f80e 	bl	80011dc <SystemClock_Config>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
 8001288:	f000 f894 	bl	80013b4 <MX_GPIO_Init>
  MX_TIM2_Init();
 800128c:	f000 f846 	bl	800131c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 8001290:	4803      	ldr	r0, [pc, #12]	; (80012a0 <main+0x24>)
 8001292:	f001 fa0b 	bl	80026ac <HAL_TIM_Base_Start_IT>
=======
 80011c0:	f000 f894 	bl	80012ec <MX_GPIO_Init>
  MX_TIM2_Init();
 80011c4:	f000 f846 	bl	8001254 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 80011c8:	4803      	ldr	r0, [pc, #12]	; (80011d8 <main+0x24>)
 80011ca:	f001 fa0b 	bl	80025e4 <HAL_TIM_Base_Start_IT>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  initial();
<<<<<<< HEAD
 8001296:	f7ff f86d 	bl	8000374 <initial>
  while (1)
  {
	  fsm_automatic();
 800129a:	f7ff faad 	bl	80007f8 <fsm_automatic>
 800129e:	e7fc      	b.n	800129a <main+0x1e>
 80012a0:	200000a8 	.word	0x200000a8

080012a4 <SystemClock_Config>:
=======
 80011ce:	f7ff f8d1 	bl	8000374 <initial>
  while (1)
  {
	  fsm_automatic();
 80011d2:	f7ff fb11 	bl	80007f8 <fsm_automatic>
 80011d6:	e7fc      	b.n	80011d2 <main+0x1e>
 80011d8:	200000a8 	.word	0x200000a8

080011dc <SystemClock_Config>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< HEAD
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b090      	sub	sp, #64	; 0x40
 80012a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012aa:	f107 0318 	add.w	r3, r7, #24
 80012ae:	2228      	movs	r2, #40	; 0x28
 80012b0:	2100      	movs	r1, #0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f001 fdb2 	bl	8002e1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
 80012c4:	611a      	str	r2, [r3, #16]
=======
 80011dc:	b580      	push	{r7, lr}
 80011de:	b090      	sub	sp, #64	; 0x40
 80011e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e2:	f107 0318 	add.w	r3, r7, #24
 80011e6:	2228      	movs	r2, #40	; 0x28
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f001 fdb2 	bl	8002d54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
 80011fc:	611a      	str	r2, [r3, #16]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
<<<<<<< HEAD
 80012c6:	2302      	movs	r3, #2
 80012c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012ca:	2301      	movs	r3, #1
 80012cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012ce:	2310      	movs	r3, #16
 80012d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012d2:	2300      	movs	r3, #0
 80012d4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d6:	f107 0318 	add.w	r3, r7, #24
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 fdae 	bl	8001e3c <HAL_RCC_OscConfig>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <SystemClock_Config+0x46>
  {
    Error_Handler();
 80012e6:	f000 f8e3 	bl	80014b0 <Error_Handler>
=======
 80011fe:	2302      	movs	r3, #2
 8001200:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001202:	2301      	movs	r3, #1
 8001204:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001206:	2310      	movs	r3, #16
 8001208:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800120a:	2300      	movs	r3, #0
 800120c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800120e:	f107 0318 	add.w	r3, r7, #24
 8001212:	4618      	mov	r0, r3
 8001214:	f000 fdae 	bl	8001d74 <HAL_RCC_OscConfig>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800121e:	f000 f8e3 	bl	80013e8 <Error_Handler>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
 80012ea:	230f      	movs	r3, #15
 80012ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012ee:	2300      	movs	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f001 f81a 	bl	800233c <HAL_RCC_ClockConfig>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800130e:	f000 f8cf 	bl	80014b0 <Error_Handler>
  }
}
 8001312:	bf00      	nop
 8001314:	3740      	adds	r7, #64	; 0x40
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <MX_TIM2_Init>:
=======
 8001222:	230f      	movs	r3, #15
 8001224:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	2100      	movs	r1, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f001 f81a 	bl	8002274 <HAL_RCC_ClockConfig>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001246:	f000 f8cf 	bl	80013e8 <Error_Handler>
  }
}
 800124a:	bf00      	nop
 800124c:	3740      	adds	r7, #64	; 0x40
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <MX_TIM2_Init>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
<<<<<<< HEAD
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
=======
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< HEAD
 8001322:	f107 0308 	add.w	r3, r7, #8
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001330:	463b      	mov	r3, r7
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
=======
 800125a:	f107 0308 	add.w	r3, r7, #8
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001268:	463b      	mov	r3, r7
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
<<<<<<< HEAD
 8001338:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <MX_TIM2_Init+0x94>)
 800133a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800133e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001340:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <MX_TIM2_Init+0x94>)
 8001342:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001346:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001348:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <MX_TIM2_Init+0x94>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800134e:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <MX_TIM2_Init+0x94>)
 8001350:	2209      	movs	r2, #9
 8001352:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001354:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <MX_TIM2_Init+0x94>)
 8001356:	2200      	movs	r2, #0
 8001358:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <MX_TIM2_Init+0x94>)
 800135c:	2200      	movs	r2, #0
 800135e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001360:	4813      	ldr	r0, [pc, #76]	; (80013b0 <MX_TIM2_Init+0x94>)
 8001362:	f001 f953 	bl	800260c <HAL_TIM_Base_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800136c:	f000 f8a0 	bl	80014b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001370:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001374:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001376:	f107 0308 	add.w	r3, r7, #8
 800137a:	4619      	mov	r1, r3
 800137c:	480c      	ldr	r0, [pc, #48]	; (80013b0 <MX_TIM2_Init+0x94>)
 800137e:	f001 fae9 	bl	8002954 <HAL_TIM_ConfigClockSource>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001388:	f000 f892 	bl	80014b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800138c:	2300      	movs	r3, #0
 800138e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001390:	2300      	movs	r3, #0
 8001392:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001394:	463b      	mov	r3, r7
 8001396:	4619      	mov	r1, r3
 8001398:	4805      	ldr	r0, [pc, #20]	; (80013b0 <MX_TIM2_Init+0x94>)
 800139a:	f001 fcb1 	bl	8002d00 <HAL_TIMEx_MasterConfigSynchronization>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80013a4:	f000 f884 	bl	80014b0 <Error_Handler>
=======
 8001270:	4b1d      	ldr	r3, [pc, #116]	; (80012e8 <MX_TIM2_Init+0x94>)
 8001272:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001276:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001278:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <MX_TIM2_Init+0x94>)
 800127a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800127e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001280:	4b19      	ldr	r3, [pc, #100]	; (80012e8 <MX_TIM2_Init+0x94>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001286:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <MX_TIM2_Init+0x94>)
 8001288:	2209      	movs	r2, #9
 800128a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128c:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <MX_TIM2_Init+0x94>)
 800128e:	2200      	movs	r2, #0
 8001290:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <MX_TIM2_Init+0x94>)
 8001294:	2200      	movs	r2, #0
 8001296:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001298:	4813      	ldr	r0, [pc, #76]	; (80012e8 <MX_TIM2_Init+0x94>)
 800129a:	f001 f953 	bl	8002544 <HAL_TIM_Base_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80012a4:	f000 f8a0 	bl	80013e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012ae:	f107 0308 	add.w	r3, r7, #8
 80012b2:	4619      	mov	r1, r3
 80012b4:	480c      	ldr	r0, [pc, #48]	; (80012e8 <MX_TIM2_Init+0x94>)
 80012b6:	f001 fae9 	bl	800288c <HAL_TIM_ConfigClockSource>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012c0:	f000 f892 	bl	80013e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c4:	2300      	movs	r3, #0
 80012c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012cc:	463b      	mov	r3, r7
 80012ce:	4619      	mov	r1, r3
 80012d0:	4805      	ldr	r0, [pc, #20]	; (80012e8 <MX_TIM2_Init+0x94>)
 80012d2:	f001 fcb1 	bl	8002c38 <HAL_TIMEx_MasterConfigSynchronization>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80012dc:	f000 f884 	bl	80013e8 <Error_Handler>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
<<<<<<< HEAD
 80013a8:	bf00      	nop
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	200000a8 	.word	0x200000a8

080013b4 <MX_GPIO_Init>:
=======
 80012e0:	bf00      	nop
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	200000a8 	.word	0x200000a8

080012ec <MX_GPIO_Init>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< HEAD
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ba:	f107 0310 	add.w	r3, r7, #16
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c8:	4b2f      	ldr	r3, [pc, #188]	; (8001488 <MX_GPIO_Init+0xd4>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	4a2e      	ldr	r2, [pc, #184]	; (8001488 <MX_GPIO_Init+0xd4>)
 80013ce:	f043 0310 	orr.w	r3, r3, #16
 80013d2:	6193      	str	r3, [r2, #24]
 80013d4:	4b2c      	ldr	r3, [pc, #176]	; (8001488 <MX_GPIO_Init+0xd4>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	f003 0310 	and.w	r3, r3, #16
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e0:	4b29      	ldr	r3, [pc, #164]	; (8001488 <MX_GPIO_Init+0xd4>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	4a28      	ldr	r2, [pc, #160]	; (8001488 <MX_GPIO_Init+0xd4>)
 80013e6:	f043 0304 	orr.w	r3, r3, #4
 80013ea:	6193      	str	r3, [r2, #24]
 80013ec:	4b26      	ldr	r3, [pc, #152]	; (8001488 <MX_GPIO_Init+0xd4>)
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	f003 0304 	and.w	r3, r3, #4
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f8:	4b23      	ldr	r3, [pc, #140]	; (8001488 <MX_GPIO_Init+0xd4>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	4a22      	ldr	r2, [pc, #136]	; (8001488 <MX_GPIO_Init+0xd4>)
 80013fe:	f043 0308 	orr.w	r3, r3, #8
 8001402:	6193      	str	r3, [r2, #24]
 8001404:	4b20      	ldr	r3, [pc, #128]	; (8001488 <MX_GPIO_Init+0xd4>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	f003 0308 	and.w	r3, r3, #8
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
 8001410:	2200      	movs	r2, #0
 8001412:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8001416:	481d      	ldr	r0, [pc, #116]	; (800148c <MX_GPIO_Init+0xd8>)
 8001418:	f000 fcdf 	bl	8001dda <HAL_GPIO_WritePin>
=======
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f2:	f107 0310 	add.w	r3, r7, #16
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001300:	4b2f      	ldr	r3, [pc, #188]	; (80013c0 <MX_GPIO_Init+0xd4>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	4a2e      	ldr	r2, [pc, #184]	; (80013c0 <MX_GPIO_Init+0xd4>)
 8001306:	f043 0310 	orr.w	r3, r3, #16
 800130a:	6193      	str	r3, [r2, #24]
 800130c:	4b2c      	ldr	r3, [pc, #176]	; (80013c0 <MX_GPIO_Init+0xd4>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	f003 0310 	and.w	r3, r3, #16
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001318:	4b29      	ldr	r3, [pc, #164]	; (80013c0 <MX_GPIO_Init+0xd4>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	4a28      	ldr	r2, [pc, #160]	; (80013c0 <MX_GPIO_Init+0xd4>)
 800131e:	f043 0304 	orr.w	r3, r3, #4
 8001322:	6193      	str	r3, [r2, #24]
 8001324:	4b26      	ldr	r3, [pc, #152]	; (80013c0 <MX_GPIO_Init+0xd4>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	f003 0304 	and.w	r3, r3, #4
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001330:	4b23      	ldr	r3, [pc, #140]	; (80013c0 <MX_GPIO_Init+0xd4>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	4a22      	ldr	r2, [pc, #136]	; (80013c0 <MX_GPIO_Init+0xd4>)
 8001336:	f043 0308 	orr.w	r3, r3, #8
 800133a:	6193      	str	r3, [r2, #24]
 800133c:	4b20      	ldr	r3, [pc, #128]	; (80013c0 <MX_GPIO_Init+0xd4>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	f003 0308 	and.w	r3, r3, #8
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
 8001348:	2200      	movs	r2, #0
 800134a:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800134e:	481d      	ldr	r0, [pc, #116]	; (80013c4 <MX_GPIO_Init+0xd8>)
 8001350:	f000 fcdf 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, P_1_Pin|P_2_Pin|P_3_Pin|P1_4_Pin
<<<<<<< HEAD
 800141c:	2200      	movs	r2, #0
 800141e:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8001422:	481b      	ldr	r0, [pc, #108]	; (8001490 <MX_GPIO_Init+0xdc>)
 8001424:	f000 fcd9 	bl	8001dda <HAL_GPIO_WritePin>
=======
 8001354:	2200      	movs	r2, #0
 8001356:	f643 71ff 	movw	r1, #16383	; 0x3fff
 800135a:	481b      	ldr	r0, [pc, #108]	; (80013c8 <MX_GPIO_Init+0xdc>)
 800135c:	f000 fcd9 	bl	8001d12 <HAL_GPIO_WritePin>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
                          |P1_5_Pin|P1_6_Pin|P1_7_Pin|P_4_Pin
                          |P_5_Pin|P_6_Pin|P_7_Pin|P1_1_Pin
                          |P1_2_Pin|P1_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
<<<<<<< HEAD
 8001428:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800142c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001432:	2301      	movs	r3, #1
 8001434:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001436:	f107 0310 	add.w	r3, r7, #16
 800143a:	4619      	mov	r1, r3
 800143c:	4815      	ldr	r0, [pc, #84]	; (8001494 <MX_GPIO_Init+0xe0>)
 800143e:	f000 fb3b 	bl	8001ab8 <HAL_GPIO_Init>
=======
 8001360:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001364:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800136a:	2301      	movs	r3, #1
 800136c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800136e:	f107 0310 	add.w	r3, r7, #16
 8001372:	4619      	mov	r1, r3
 8001374:	4815      	ldr	r0, [pc, #84]	; (80013cc <MX_GPIO_Init+0xe0>)
 8001376:	f000 fb3b 	bl	80019f0 <HAL_GPIO_Init>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a

  /*Configure GPIO pins : LED_RED_1_Pin LED_YELLOW_1_Pin LED_GREEN_1_Pin LED_RED_2_Pin
                           LED_YELLOW_2_Pin LED_GREEN_2_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
<<<<<<< HEAD
 8001442:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8001446:	613b      	str	r3, [r7, #16]
                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001448:	2301      	movs	r3, #1
 800144a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001450:	2302      	movs	r3, #2
 8001452:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001454:	f107 0310 	add.w	r3, r7, #16
 8001458:	4619      	mov	r1, r3
 800145a:	480c      	ldr	r0, [pc, #48]	; (800148c <MX_GPIO_Init+0xd8>)
 800145c:	f000 fb2c 	bl	8001ab8 <HAL_GPIO_Init>
=======
 800137a:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800137e:	613b      	str	r3, [r7, #16]
                          |LED_YELLOW_2_Pin|LED_GREEN_2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001380:	2301      	movs	r3, #1
 8001382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001388:	2302      	movs	r3, #2
 800138a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138c:	f107 0310 	add.w	r3, r7, #16
 8001390:	4619      	mov	r1, r3
 8001392:	480c      	ldr	r0, [pc, #48]	; (80013c4 <MX_GPIO_Init+0xd8>)
 8001394:	f000 fb2c 	bl	80019f0 <HAL_GPIO_Init>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a

  /*Configure GPIO pins : P_1_Pin P_2_Pin P_3_Pin P1_4_Pin
                           P1_5_Pin P1_6_Pin P1_7_Pin P_4_Pin
                           P_5_Pin P_6_Pin P_7_Pin P1_1_Pin
                           P1_2_Pin P1_3_Pin */
  GPIO_InitStruct.Pin = P_1_Pin|P_2_Pin|P_3_Pin|P1_4_Pin
<<<<<<< HEAD
 8001460:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8001464:	613b      	str	r3, [r7, #16]
=======
 8001398:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800139c:	613b      	str	r3, [r7, #16]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
                          |P1_5_Pin|P1_6_Pin|P1_7_Pin|P_4_Pin
                          |P_5_Pin|P_6_Pin|P_7_Pin|P1_1_Pin
                          |P1_2_Pin|P1_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
<<<<<<< HEAD
 8001466:	2301      	movs	r3, #1
 8001468:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146e:	2302      	movs	r3, #2
 8001470:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001472:	f107 0310 	add.w	r3, r7, #16
 8001476:	4619      	mov	r1, r3
 8001478:	4805      	ldr	r0, [pc, #20]	; (8001490 <MX_GPIO_Init+0xdc>)
 800147a:	f000 fb1d 	bl	8001ab8 <HAL_GPIO_Init>

}
 800147e:	bf00      	nop
 8001480:	3720      	adds	r7, #32
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40021000 	.word	0x40021000
 800148c:	40010800 	.word	0x40010800
 8001490:	40010c00 	.word	0x40010c00
 8001494:	40011000 	.word	0x40011000

08001498 <HAL_TIM_PeriodElapsedCallback>:
=======
 800139e:	2301      	movs	r3, #1
 80013a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2302      	movs	r3, #2
 80013a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013aa:	f107 0310 	add.w	r3, r7, #16
 80013ae:	4619      	mov	r1, r3
 80013b0:	4805      	ldr	r0, [pc, #20]	; (80013c8 <MX_GPIO_Init+0xdc>)
 80013b2:	f000 fb1d 	bl	80019f0 <HAL_GPIO_Init>

}
 80013b6:	bf00      	nop
 80013b8:	3720      	adds	r7, #32
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40021000 	.word	0x40021000
 80013c4:	40010800 	.word	0x40010800
 80013c8:	40010c00 	.word	0x40010c00
 80013cc:	40011000 	.word	0x40011000

080013d0 <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
<<<<<<< HEAD
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	timerRun();
 80014a0:	f000 f90a 	bl	80016b8 <timerRun>
	button_reading();
 80014a4:	f7fe fe52 	bl	800014c <button_reading>
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <Error_Handler>:
=======
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	timerRun();
 80013d8:	f000 f90a 	bl	80015f0 <timerRun>
	button_reading();
 80013dc:	f7fe feb6 	bl	800014c <button_reading>
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <Error_Handler>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
=======
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 80014b4:	b672      	cpsid	i
}
 80014b6:	bf00      	nop
=======
 80013ec:	b672      	cpsid	i
}
 80013ee:	bf00      	nop
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< HEAD
 80014b8:	e7fe      	b.n	80014b8 <Error_Handler+0x8>
	...

080014bc <HAL_MspInit>:
=======
 80013f0:	e7fe      	b.n	80013f0 <Error_Handler+0x8>
	...

080013f4 <HAL_MspInit>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
=======
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
<<<<<<< HEAD
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <HAL_MspInit+0x5c>)
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	4a14      	ldr	r2, [pc, #80]	; (8001518 <HAL_MspInit+0x5c>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	6193      	str	r3, [r2, #24]
 80014ce:	4b12      	ldr	r3, [pc, #72]	; (8001518 <HAL_MspInit+0x5c>)
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014da:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <HAL_MspInit+0x5c>)
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	4a0e      	ldr	r2, [pc, #56]	; (8001518 <HAL_MspInit+0x5c>)
 80014e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e4:	61d3      	str	r3, [r2, #28]
 80014e6:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <HAL_MspInit+0x5c>)
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
=======
 80013fa:	4b15      	ldr	r3, [pc, #84]	; (8001450 <HAL_MspInit+0x5c>)
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	4a14      	ldr	r2, [pc, #80]	; (8001450 <HAL_MspInit+0x5c>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6193      	str	r3, [r2, #24]
 8001406:	4b12      	ldr	r3, [pc, #72]	; (8001450 <HAL_MspInit+0x5c>)
 8001408:	699b      	ldr	r3, [r3, #24]
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001412:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <HAL_MspInit+0x5c>)
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	4a0e      	ldr	r2, [pc, #56]	; (8001450 <HAL_MspInit+0x5c>)
 8001418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800141c:	61d3      	str	r3, [r2, #28]
 800141e:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <HAL_MspInit+0x5c>)
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
<<<<<<< HEAD
 80014f2:	4b0a      	ldr	r3, [pc, #40]	; (800151c <HAL_MspInit+0x60>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	4a04      	ldr	r2, [pc, #16]	; (800151c <HAL_MspInit+0x60>)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	6053      	str	r3, [r2, #4]
=======
 800142a:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <HAL_MspInit+0x60>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	4a04      	ldr	r2, [pc, #16]	; (8001454 <HAL_MspInit+0x60>)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	6053      	str	r3, [r2, #4]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 800150e:	bf00      	nop
 8001510:	3714      	adds	r7, #20
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr
 8001518:	40021000 	.word	0x40021000
 800151c:	40010000 	.word	0x40010000

08001520 <HAL_TIM_Base_MspInit>:
=======
 8001446:	bf00      	nop
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr
 8001450:	40021000 	.word	0x40021000
 8001454:	40010000 	.word	0x40010000

08001458 <HAL_TIM_Base_MspInit>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
<<<<<<< HEAD
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001530:	d113      	bne.n	800155a <HAL_TIM_Base_MspInit+0x3a>
=======
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001468:	d113      	bne.n	8001492 <HAL_TIM_Base_MspInit+0x3a>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
<<<<<<< HEAD
 8001532:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <HAL_TIM_Base_MspInit+0x44>)
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	4a0b      	ldr	r2, [pc, #44]	; (8001564 <HAL_TIM_Base_MspInit+0x44>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	61d3      	str	r3, [r2, #28]
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <HAL_TIM_Base_MspInit+0x44>)
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800154a:	2200      	movs	r2, #0
 800154c:	2100      	movs	r1, #0
 800154e:	201c      	movs	r0, #28
 8001550:	f000 fa7b 	bl	8001a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001554:	201c      	movs	r0, #28
 8001556:	f000 fa94 	bl	8001a82 <HAL_NVIC_EnableIRQ>
=======
 800146a:	4b0c      	ldr	r3, [pc, #48]	; (800149c <HAL_TIM_Base_MspInit+0x44>)
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	4a0b      	ldr	r2, [pc, #44]	; (800149c <HAL_TIM_Base_MspInit+0x44>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	61d3      	str	r3, [r2, #28]
 8001476:	4b09      	ldr	r3, [pc, #36]	; (800149c <HAL_TIM_Base_MspInit+0x44>)
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001482:	2200      	movs	r2, #0
 8001484:	2100      	movs	r1, #0
 8001486:	201c      	movs	r0, #28
 8001488:	f000 fa7b 	bl	8001982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800148c:	201c      	movs	r0, #28
 800148e:	f000 fa94 	bl	80019ba <HAL_NVIC_EnableIRQ>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
<<<<<<< HEAD
 800155a:	bf00      	nop
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40021000 	.word	0x40021000

08001568 <NMI_Handler>:
=======
 8001492:	bf00      	nop
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40021000 	.word	0x40021000

080014a0 <NMI_Handler>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
=======
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< HEAD
 800156c:	e7fe      	b.n	800156c <NMI_Handler+0x4>

0800156e <HardFault_Handler>:
=======
 80014a4:	e7fe      	b.n	80014a4 <NMI_Handler+0x4>

080014a6 <HardFault_Handler>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0
=======
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8001572:	e7fe      	b.n	8001572 <HardFault_Handler+0x4>

08001574 <MemManage_Handler>:
=======
 80014aa:	e7fe      	b.n	80014aa <HardFault_Handler+0x4>

080014ac <MemManage_Handler>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
=======
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8001578:	e7fe      	b.n	8001578 <MemManage_Handler+0x4>

0800157a <BusFault_Handler>:
=======
 80014b0:	e7fe      	b.n	80014b0 <MemManage_Handler+0x4>

080014b2 <BusFault_Handler>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0
=======
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 800157e:	e7fe      	b.n	800157e <BusFault_Handler+0x4>

08001580 <UsageFault_Handler>:
=======
 80014b6:	e7fe      	b.n	80014b6 <BusFault_Handler+0x4>

080014b8 <UsageFault_Handler>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
=======
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8001584:	e7fe      	b.n	8001584 <UsageFault_Handler+0x4>

08001586 <SVC_Handler>:
=======
 80014bc:	e7fe      	b.n	80014bc <UsageFault_Handler+0x4>

080014be <SVC_Handler>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< HEAD
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0
=======
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< HEAD
 800158a:	bf00      	nop
 800158c:	46bd      	mov	sp, r7
 800158e:	bc80      	pop	{r7}
 8001590:	4770      	bx	lr

08001592 <DebugMon_Handler>:
=======
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr

080014ca <DebugMon_Handler>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0
=======
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 8001596:	bf00      	nop
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr

0800159e <PendSV_Handler>:
=======
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr

080014d6 <PendSV_Handler>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< HEAD
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0
=======
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< HEAD
 80015a2:	bf00      	nop
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr

080015aa <SysTick_Handler>:
=======
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr

080014e2 <SysTick_Handler>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< HEAD
 80015aa:	b580      	push	{r7, lr}
 80015ac:	af00      	add	r7, sp, #0
=======
 80014e2:	b580      	push	{r7, lr}
 80014e4:	af00      	add	r7, sp, #0
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
 80015ae:	f000 f959 	bl	8001864 <HAL_IncTick>
=======
 80014e6:	f000 f959 	bl	800179c <HAL_IncTick>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< HEAD
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
	...

080015b8 <TIM2_IRQHandler>:
=======
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <TIM2_IRQHandler>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
<<<<<<< HEAD
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
=======
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
<<<<<<< HEAD
 80015bc:	4802      	ldr	r0, [pc, #8]	; (80015c8 <TIM2_IRQHandler+0x10>)
 80015be:	f001 f8c1 	bl	8002744 <HAL_TIM_IRQHandler>
=======
 80014f4:	4802      	ldr	r0, [pc, #8]	; (8001500 <TIM2_IRQHandler+0x10>)
 80014f6:	f001 f8c1 	bl	800267c <HAL_TIM_IRQHandler>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
<<<<<<< HEAD
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	200000a8 	.word	0x200000a8

080015cc <SystemInit>:
=======
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	200000a8 	.word	0x200000a8

08001504 <SystemInit>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
<<<<<<< HEAD
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
=======
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< HEAD
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr

080015d8 <setBlink>:
=======
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr

08001510 <setBlink>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
int segment_counter=0;
int segment_flag=0;
int button_counter=0;
int button_flag=0;
void setBlink(int duration)
{
<<<<<<< HEAD
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	blink_counter=duration/10;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4a08      	ldr	r2, [pc, #32]	; (8001604 <setBlink+0x2c>)
 80015e4:	fb82 1203 	smull	r1, r2, r2, r3
 80015e8:	1092      	asrs	r2, r2, #2
 80015ea:	17db      	asrs	r3, r3, #31
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	4a06      	ldr	r2, [pc, #24]	; (8001608 <setBlink+0x30>)
 80015f0:	6013      	str	r3, [r2, #0]
	blink_flag=0;
 80015f2:	4b06      	ldr	r3, [pc, #24]	; (800160c <setBlink+0x34>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	66666667 	.word	0x66666667
 8001608:	20000078 	.word	0x20000078
 800160c:	20000074 	.word	0x20000074

08001610 <setTimer1>:
void setTimer1(int duration)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
	timer1_counter=duration/10;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a08      	ldr	r2, [pc, #32]	; (800163c <setTimer1+0x2c>)
 800161c:	fb82 1203 	smull	r1, r2, r2, r3
 8001620:	1092      	asrs	r2, r2, #2
 8001622:	17db      	asrs	r3, r3, #31
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	4a06      	ldr	r2, [pc, #24]	; (8001640 <setTimer1+0x30>)
 8001628:	6013      	str	r3, [r2, #0]
	timer1_flag=0;
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <setTimer1+0x34>)
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	66666667 	.word	0x66666667
 8001640:	20000070 	.word	0x20000070
 8001644:	2000006c 	.word	0x2000006c

08001648 <setTimer2>:
void setTimer2(int duration)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
	timer2_counter=duration/10;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a08      	ldr	r2, [pc, #32]	; (8001674 <setTimer2+0x2c>)
 8001654:	fb82 1203 	smull	r1, r2, r2, r3
 8001658:	1092      	asrs	r2, r2, #2
 800165a:	17db      	asrs	r3, r3, #31
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	4a06      	ldr	r2, [pc, #24]	; (8001678 <setTimer2+0x30>)
 8001660:	6013      	str	r3, [r2, #0]
	timer2_flag=0;
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <setTimer2+0x34>)
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	66666667 	.word	0x66666667
 8001678:	20000080 	.word	0x20000080
 800167c:	2000007c 	.word	0x2000007c

08001680 <setTimer3>:
void setTimer3(int duration)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
	segment_counter=duration/10;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a08      	ldr	r2, [pc, #32]	; (80016ac <setTimer3+0x2c>)
 800168c:	fb82 1203 	smull	r1, r2, r2, r3
 8001690:	1092      	asrs	r2, r2, #2
 8001692:	17db      	asrs	r3, r3, #31
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	4a06      	ldr	r2, [pc, #24]	; (80016b0 <setTimer3+0x30>)
 8001698:	6013      	str	r3, [r2, #0]
	segment_flag=0;
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <setTimer3+0x34>)
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bc80      	pop	{r7}
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	66666667 	.word	0x66666667
 80016b0:	20000084 	.word	0x20000084
 80016b4:	20000088 	.word	0x20000088

080016b8 <timerRun>:
=======
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	blink_counter=duration/10;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a08      	ldr	r2, [pc, #32]	; (800153c <setBlink+0x2c>)
 800151c:	fb82 1203 	smull	r1, r2, r2, r3
 8001520:	1092      	asrs	r2, r2, #2
 8001522:	17db      	asrs	r3, r3, #31
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	4a06      	ldr	r2, [pc, #24]	; (8001540 <setBlink+0x30>)
 8001528:	6013      	str	r3, [r2, #0]
	blink_flag=0;
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <setBlink+0x34>)
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	66666667 	.word	0x66666667
 8001540:	20000078 	.word	0x20000078
 8001544:	20000074 	.word	0x20000074

08001548 <setTimer1>:
void setTimer1(int duration)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	timer1_counter=duration/10;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a08      	ldr	r2, [pc, #32]	; (8001574 <setTimer1+0x2c>)
 8001554:	fb82 1203 	smull	r1, r2, r2, r3
 8001558:	1092      	asrs	r2, r2, #2
 800155a:	17db      	asrs	r3, r3, #31
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	4a06      	ldr	r2, [pc, #24]	; (8001578 <setTimer1+0x30>)
 8001560:	6013      	str	r3, [r2, #0]
	timer1_flag=0;
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <setTimer1+0x34>)
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	bc80      	pop	{r7}
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	66666667 	.word	0x66666667
 8001578:	20000070 	.word	0x20000070
 800157c:	2000006c 	.word	0x2000006c

08001580 <setTimer2>:
void setTimer2(int duration)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	timer2_counter=duration/10;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a08      	ldr	r2, [pc, #32]	; (80015ac <setTimer2+0x2c>)
 800158c:	fb82 1203 	smull	r1, r2, r2, r3
 8001590:	1092      	asrs	r2, r2, #2
 8001592:	17db      	asrs	r3, r3, #31
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	4a06      	ldr	r2, [pc, #24]	; (80015b0 <setTimer2+0x30>)
 8001598:	6013      	str	r3, [r2, #0]
	timer2_flag=0;
 800159a:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <setTimer2+0x34>)
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	66666667 	.word	0x66666667
 80015b0:	20000080 	.word	0x20000080
 80015b4:	2000007c 	.word	0x2000007c

080015b8 <setTimer3>:
void setTimer3(int duration)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	segment_counter=duration/10;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a08      	ldr	r2, [pc, #32]	; (80015e4 <setTimer3+0x2c>)
 80015c4:	fb82 1203 	smull	r1, r2, r2, r3
 80015c8:	1092      	asrs	r2, r2, #2
 80015ca:	17db      	asrs	r3, r3, #31
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	4a06      	ldr	r2, [pc, #24]	; (80015e8 <setTimer3+0x30>)
 80015d0:	6013      	str	r3, [r2, #0]
	segment_flag=0;
 80015d2:	4b06      	ldr	r3, [pc, #24]	; (80015ec <setTimer3+0x34>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	66666667 	.word	0x66666667
 80015e8:	20000084 	.word	0x20000084
 80015ec:	20000088 	.word	0x20000088

080015f0 <timerRun>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
{
	button_counter=duration/10;
	button_flag=0;
}
void timerRun()
{
<<<<<<< HEAD
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
	if(timer1_counter>0)
 80016bc:	4b29      	ldr	r3, [pc, #164]	; (8001764 <timerRun+0xac>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	dd0b      	ble.n	80016dc <timerRun+0x24>
	{
		timer1_counter--;
 80016c4:	4b27      	ldr	r3, [pc, #156]	; (8001764 <timerRun+0xac>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	3b01      	subs	r3, #1
 80016ca:	4a26      	ldr	r2, [pc, #152]	; (8001764 <timerRun+0xac>)
 80016cc:	6013      	str	r3, [r2, #0]
		if(timer1_counter<=0)
 80016ce:	4b25      	ldr	r3, [pc, #148]	; (8001764 <timerRun+0xac>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	dc02      	bgt.n	80016dc <timerRun+0x24>
		{
			timer1_flag=1;
 80016d6:	4b24      	ldr	r3, [pc, #144]	; (8001768 <timerRun+0xb0>)
 80016d8:	2201      	movs	r2, #1
 80016da:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter>0)
 80016dc:	4b23      	ldr	r3, [pc, #140]	; (800176c <timerRun+0xb4>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	dd0b      	ble.n	80016fc <timerRun+0x44>
		{
			timer2_counter--;
 80016e4:	4b21      	ldr	r3, [pc, #132]	; (800176c <timerRun+0xb4>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	3b01      	subs	r3, #1
 80016ea:	4a20      	ldr	r2, [pc, #128]	; (800176c <timerRun+0xb4>)
 80016ec:	6013      	str	r3, [r2, #0]
			if(timer2_counter<=0)
 80016ee:	4b1f      	ldr	r3, [pc, #124]	; (800176c <timerRun+0xb4>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	dc02      	bgt.n	80016fc <timerRun+0x44>
			{
				timer2_flag=1;
 80016f6:	4b1e      	ldr	r3, [pc, #120]	; (8001770 <timerRun+0xb8>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	601a      	str	r2, [r3, #0]
			}
		}
	if(segment_counter>0)
 80016fc:	4b1d      	ldr	r3, [pc, #116]	; (8001774 <timerRun+0xbc>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	dd0b      	ble.n	800171c <timerRun+0x64>
	{
		segment_counter--;
 8001704:	4b1b      	ldr	r3, [pc, #108]	; (8001774 <timerRun+0xbc>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	3b01      	subs	r3, #1
 800170a:	4a1a      	ldr	r2, [pc, #104]	; (8001774 <timerRun+0xbc>)
 800170c:	6013      	str	r3, [r2, #0]
		if(segment_counter<=0)
 800170e:	4b19      	ldr	r3, [pc, #100]	; (8001774 <timerRun+0xbc>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	dc02      	bgt.n	800171c <timerRun+0x64>
		{
			segment_flag=1;
 8001716:	4b18      	ldr	r3, [pc, #96]	; (8001778 <timerRun+0xc0>)
 8001718:	2201      	movs	r2, #1
 800171a:	601a      	str	r2, [r3, #0]
		}
	}
	if(blink_counter>0)
 800171c:	4b17      	ldr	r3, [pc, #92]	; (800177c <timerRun+0xc4>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	dd0b      	ble.n	800173c <timerRun+0x84>
	{
		blink_counter--;
 8001724:	4b15      	ldr	r3, [pc, #84]	; (800177c <timerRun+0xc4>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	3b01      	subs	r3, #1
 800172a:	4a14      	ldr	r2, [pc, #80]	; (800177c <timerRun+0xc4>)
 800172c:	6013      	str	r3, [r2, #0]
		if(blink_counter<=0)
 800172e:	4b13      	ldr	r3, [pc, #76]	; (800177c <timerRun+0xc4>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	dc02      	bgt.n	800173c <timerRun+0x84>
		{
			blink_flag=1;
 8001736:	4b12      	ldr	r3, [pc, #72]	; (8001780 <timerRun+0xc8>)
 8001738:	2201      	movs	r2, #1
 800173a:	601a      	str	r2, [r3, #0]
		}
	}
	if(button_counter>0)
 800173c:	4b11      	ldr	r3, [pc, #68]	; (8001784 <timerRun+0xcc>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	dd0b      	ble.n	800175c <timerRun+0xa4>
	{
		button_counter--;
 8001744:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <timerRun+0xcc>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	3b01      	subs	r3, #1
 800174a:	4a0e      	ldr	r2, [pc, #56]	; (8001784 <timerRun+0xcc>)
 800174c:	6013      	str	r3, [r2, #0]
		if(button_counter<=0)
 800174e:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <timerRun+0xcc>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2b00      	cmp	r3, #0
 8001754:	dc02      	bgt.n	800175c <timerRun+0xa4>
		{
			button_flag=1;
 8001756:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <timerRun+0xd0>)
 8001758:	2201      	movs	r2, #1
 800175a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr
 8001764:	20000070 	.word	0x20000070
 8001768:	2000006c 	.word	0x2000006c
 800176c:	20000080 	.word	0x20000080
 8001770:	2000007c 	.word	0x2000007c
 8001774:	20000084 	.word	0x20000084
 8001778:	20000088 	.word	0x20000088
 800177c:	20000078 	.word	0x20000078
 8001780:	20000074 	.word	0x20000074
 8001784:	2000008c 	.word	0x2000008c
 8001788:	20000090 	.word	0x20000090

0800178c <Reset_Handler>:
=======
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
	if(timer1_counter>0)
 80015f4:	4b29      	ldr	r3, [pc, #164]	; (800169c <timerRun+0xac>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	dd0b      	ble.n	8001614 <timerRun+0x24>
	{
		timer1_counter--;
 80015fc:	4b27      	ldr	r3, [pc, #156]	; (800169c <timerRun+0xac>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	3b01      	subs	r3, #1
 8001602:	4a26      	ldr	r2, [pc, #152]	; (800169c <timerRun+0xac>)
 8001604:	6013      	str	r3, [r2, #0]
		if(timer1_counter<=0)
 8001606:	4b25      	ldr	r3, [pc, #148]	; (800169c <timerRun+0xac>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	dc02      	bgt.n	8001614 <timerRun+0x24>
		{
			timer1_flag=1;
 800160e:	4b24      	ldr	r3, [pc, #144]	; (80016a0 <timerRun+0xb0>)
 8001610:	2201      	movs	r2, #1
 8001612:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter>0)
 8001614:	4b23      	ldr	r3, [pc, #140]	; (80016a4 <timerRun+0xb4>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	dd0b      	ble.n	8001634 <timerRun+0x44>
		{
			timer2_counter--;
 800161c:	4b21      	ldr	r3, [pc, #132]	; (80016a4 <timerRun+0xb4>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	3b01      	subs	r3, #1
 8001622:	4a20      	ldr	r2, [pc, #128]	; (80016a4 <timerRun+0xb4>)
 8001624:	6013      	str	r3, [r2, #0]
			if(timer2_counter<=0)
 8001626:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <timerRun+0xb4>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	dc02      	bgt.n	8001634 <timerRun+0x44>
			{
				timer2_flag=1;
 800162e:	4b1e      	ldr	r3, [pc, #120]	; (80016a8 <timerRun+0xb8>)
 8001630:	2201      	movs	r2, #1
 8001632:	601a      	str	r2, [r3, #0]
			}
		}
	if(segment_counter>0)
 8001634:	4b1d      	ldr	r3, [pc, #116]	; (80016ac <timerRun+0xbc>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	dd0b      	ble.n	8001654 <timerRun+0x64>
	{
		segment_counter--;
 800163c:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <timerRun+0xbc>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	3b01      	subs	r3, #1
 8001642:	4a1a      	ldr	r2, [pc, #104]	; (80016ac <timerRun+0xbc>)
 8001644:	6013      	str	r3, [r2, #0]
		if(segment_counter<=0)
 8001646:	4b19      	ldr	r3, [pc, #100]	; (80016ac <timerRun+0xbc>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	dc02      	bgt.n	8001654 <timerRun+0x64>
		{
			segment_flag=1;
 800164e:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <timerRun+0xc0>)
 8001650:	2201      	movs	r2, #1
 8001652:	601a      	str	r2, [r3, #0]
		}
	}
	if(blink_counter>0)
 8001654:	4b17      	ldr	r3, [pc, #92]	; (80016b4 <timerRun+0xc4>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	dd0b      	ble.n	8001674 <timerRun+0x84>
	{
		blink_counter--;
 800165c:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <timerRun+0xc4>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	3b01      	subs	r3, #1
 8001662:	4a14      	ldr	r2, [pc, #80]	; (80016b4 <timerRun+0xc4>)
 8001664:	6013      	str	r3, [r2, #0]
		if(blink_counter<=0)
 8001666:	4b13      	ldr	r3, [pc, #76]	; (80016b4 <timerRun+0xc4>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	dc02      	bgt.n	8001674 <timerRun+0x84>
		{
			blink_flag=1;
 800166e:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <timerRun+0xc8>)
 8001670:	2201      	movs	r2, #1
 8001672:	601a      	str	r2, [r3, #0]
		}
	}
	if(button_counter>0)
 8001674:	4b11      	ldr	r3, [pc, #68]	; (80016bc <timerRun+0xcc>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	dd0b      	ble.n	8001694 <timerRun+0xa4>
	{
		button_counter--;
 800167c:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <timerRun+0xcc>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	3b01      	subs	r3, #1
 8001682:	4a0e      	ldr	r2, [pc, #56]	; (80016bc <timerRun+0xcc>)
 8001684:	6013      	str	r3, [r2, #0]
		if(button_counter<=0)
 8001686:	4b0d      	ldr	r3, [pc, #52]	; (80016bc <timerRun+0xcc>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	dc02      	bgt.n	8001694 <timerRun+0xa4>
		{
			button_flag=1;
 800168e:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <timerRun+0xd0>)
 8001690:	2201      	movs	r2, #1
 8001692:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr
 800169c:	20000070 	.word	0x20000070
 80016a0:	2000006c 	.word	0x2000006c
 80016a4:	20000080 	.word	0x20000080
 80016a8:	2000007c 	.word	0x2000007c
 80016ac:	20000084 	.word	0x20000084
 80016b0:	20000088 	.word	0x20000088
 80016b4:	20000078 	.word	0x20000078
 80016b8:	20000074 	.word	0x20000074
 80016bc:	2000008c 	.word	0x2000008c
 80016c0:	20000090 	.word	0x20000090

080016c4 <Reset_Handler>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
<<<<<<< HEAD
 800178c:	480c      	ldr	r0, [pc, #48]	; (80017c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800178e:	490d      	ldr	r1, [pc, #52]	; (80017c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001790:	4a0d      	ldr	r2, [pc, #52]	; (80017c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001794:	e002      	b.n	800179c <LoopCopyDataInit>

08001796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800179a:	3304      	adds	r3, #4

0800179c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800179c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800179e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a0:	d3f9      	bcc.n	8001796 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017a2:	4a0a      	ldr	r2, [pc, #40]	; (80017cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017a4:	4c0a      	ldr	r4, [pc, #40]	; (80017d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a8:	e001      	b.n	80017ae <LoopFillZerobss>

080017aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017ac:	3204      	adds	r2, #4

080017ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b0:	d3fb      	bcc.n	80017aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017b2:	f7ff ff0b 	bl	80015cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017b6:	f001 fb0d 	bl	8002dd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017ba:	f7ff fd5f 	bl	800127c <main>
  bx lr
 80017be:	4770      	bx	lr
  ldr r0, =_sdata
 80017c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c4:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 80017c8:	08002e6c 	.word	0x08002e6c
  ldr r2, =_sbss
 80017cc:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 80017d0:	200000f4 	.word	0x200000f4

080017d4 <ADC1_2_IRQHandler>:
=======
 80016c4:	480c      	ldr	r0, [pc, #48]	; (80016f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016c6:	490d      	ldr	r1, [pc, #52]	; (80016fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016c8:	4a0d      	ldr	r2, [pc, #52]	; (8001700 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016cc:	e002      	b.n	80016d4 <LoopCopyDataInit>

080016ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016d2:	3304      	adds	r3, #4

080016d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d8:	d3f9      	bcc.n	80016ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016da:	4a0a      	ldr	r2, [pc, #40]	; (8001704 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016dc:	4c0a      	ldr	r4, [pc, #40]	; (8001708 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e0:	e001      	b.n	80016e6 <LoopFillZerobss>

080016e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e4:	3204      	adds	r2, #4

080016e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e8:	d3fb      	bcc.n	80016e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016ea:	f7ff ff0b 	bl	8001504 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016ee:	f001 fb0d 	bl	8002d0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016f2:	f7ff fd5f 	bl	80011b4 <main>
  bx lr
 80016f6:	4770      	bx	lr
  ldr r0, =_sdata
 80016f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016fc:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001700:	08002da4 	.word	0x08002da4
  ldr r2, =_sbss
 8001704:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001708:	200000f4 	.word	0x200000f4

0800170c <ADC1_2_IRQHandler>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
<<<<<<< HEAD
 80017d4:	e7fe      	b.n	80017d4 <ADC1_2_IRQHandler>
	...

080017d8 <HAL_Init>:
=======
 800170c:	e7fe      	b.n	800170c <ADC1_2_IRQHandler>
	...

08001710 <HAL_Init>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
=======
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <HAL_Init+0x28>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a07      	ldr	r2, [pc, #28]	; (8001800 <HAL_Init+0x28>)
 80017e2:	f043 0310 	orr.w	r3, r3, #16
 80017e6:	6013      	str	r3, [r2, #0]
=======
 8001714:	4b08      	ldr	r3, [pc, #32]	; (8001738 <HAL_Init+0x28>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a07      	ldr	r2, [pc, #28]	; (8001738 <HAL_Init+0x28>)
 800171a:	f043 0310 	orr.w	r3, r3, #16
 800171e:	6013      	str	r3, [r2, #0]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 80017e8:	2003      	movs	r0, #3
 80017ea:	f000 f923 	bl	8001a34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ee:	200f      	movs	r0, #15
 80017f0:	f000 f808 	bl	8001804 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017f4:	f7ff fe62 	bl	80014bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40022000 	.word	0x40022000

08001804 <HAL_InitTick>:
=======
 8001720:	2003      	movs	r0, #3
 8001722:	f000 f923 	bl	800196c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001726:	200f      	movs	r0, #15
 8001728:	f000 f808 	bl	800173c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800172c:	f7ff fe62 	bl	80013f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40022000 	.word	0x40022000

0800173c <HAL_InitTick>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800180c:	4b12      	ldr	r3, [pc, #72]	; (8001858 <HAL_InitTick+0x54>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	4b12      	ldr	r3, [pc, #72]	; (800185c <HAL_InitTick+0x58>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	4619      	mov	r1, r3
 8001816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800181a:	fbb3 f3f1 	udiv	r3, r3, r1
 800181e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001822:	4618      	mov	r0, r3
 8001824:	f000 f93b 	bl	8001a9e <HAL_SYSTICK_Config>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e00e      	b.n	8001850 <HAL_InitTick+0x4c>
=======
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001744:	4b12      	ldr	r3, [pc, #72]	; (8001790 <HAL_InitTick+0x54>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4b12      	ldr	r3, [pc, #72]	; (8001794 <HAL_InitTick+0x58>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	4619      	mov	r1, r3
 800174e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001752:	fbb3 f3f1 	udiv	r3, r3, r1
 8001756:	fbb2 f3f3 	udiv	r3, r2, r3
 800175a:	4618      	mov	r0, r3
 800175c:	f000 f93b 	bl	80019d6 <HAL_SYSTICK_Config>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e00e      	b.n	8001788 <HAL_InitTick+0x4c>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< HEAD
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b0f      	cmp	r3, #15
 8001836:	d80a      	bhi.n	800184e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001838:	2200      	movs	r2, #0
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	f04f 30ff 	mov.w	r0, #4294967295
 8001840:	f000 f903 	bl	8001a4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001844:	4a06      	ldr	r2, [pc, #24]	; (8001860 <HAL_InitTick+0x5c>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6013      	str	r3, [r2, #0]
=======
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b0f      	cmp	r3, #15
 800176e:	d80a      	bhi.n	8001786 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001770:	2200      	movs	r2, #0
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	f04f 30ff 	mov.w	r0, #4294967295
 8001778:	f000 f903 	bl	8001982 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800177c:	4a06      	ldr	r2, [pc, #24]	; (8001798 <HAL_InitTick+0x5c>)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6013      	str	r3, [r2, #0]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 800184a:	2300      	movs	r3, #0
 800184c:	e000      	b.n	8001850 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
}
 8001850:	4618      	mov	r0, r3
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000024 	.word	0x20000024
 800185c:	2000002c 	.word	0x2000002c
 8001860:	20000028 	.word	0x20000028

08001864 <HAL_IncTick>:
=======
 8001782:	2300      	movs	r3, #0
 8001784:	e000      	b.n	8001788 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
}
 8001788:	4618      	mov	r0, r3
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20000024 	.word	0x20000024
 8001794:	2000002c 	.word	0x2000002c
 8001798:	20000028 	.word	0x20000028

0800179c <HAL_IncTick>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001868:	4b05      	ldr	r3, [pc, #20]	; (8001880 <HAL_IncTick+0x1c>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	461a      	mov	r2, r3
 800186e:	4b05      	ldr	r3, [pc, #20]	; (8001884 <HAL_IncTick+0x20>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4413      	add	r3, r2
 8001874:	4a03      	ldr	r2, [pc, #12]	; (8001884 <HAL_IncTick+0x20>)
 8001876:	6013      	str	r3, [r2, #0]
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr
 8001880:	2000002c 	.word	0x2000002c
 8001884:	200000f0 	.word	0x200000f0

08001888 <HAL_GetTick>:
=======
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017a0:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <HAL_IncTick+0x1c>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	461a      	mov	r2, r3
 80017a6:	4b05      	ldr	r3, [pc, #20]	; (80017bc <HAL_IncTick+0x20>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4413      	add	r3, r2
 80017ac:	4a03      	ldr	r2, [pc, #12]	; (80017bc <HAL_IncTick+0x20>)
 80017ae:	6013      	str	r3, [r2, #0]
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr
 80017b8:	2000002c 	.word	0x2000002c
 80017bc:	200000f0 	.word	0x200000f0

080017c0 <HAL_GetTick>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  return uwTick;
 800188c:	4b02      	ldr	r3, [pc, #8]	; (8001898 <HAL_GetTick+0x10>)
 800188e:	681b      	ldr	r3, [r3, #0]
}
 8001890:	4618      	mov	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr
 8001898:	200000f0 	.word	0x200000f0

0800189c <__NVIC_SetPriorityGrouping>:
=======
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return uwTick;
 80017c4:	4b02      	ldr	r3, [pc, #8]	; (80017d0 <HAL_GetTick+0x10>)
 80017c6:	681b      	ldr	r3, [r3, #0]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr
 80017d0:	200000f0 	.word	0x200000f0

080017d4 <__NVIC_SetPriorityGrouping>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <__NVIC_SetPriorityGrouping+0x44>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018b8:	4013      	ands	r3, r2
 80018ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ce:	4a04      	ldr	r2, [pc, #16]	; (80018e0 <__NVIC_SetPriorityGrouping+0x44>)
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	60d3      	str	r3, [r2, #12]
}
 80018d4:	bf00      	nop
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <__NVIC_GetPriorityGrouping>:
=======
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f0:	4013      	ands	r3, r2
 80017f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001806:	4a04      	ldr	r2, [pc, #16]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	60d3      	str	r3, [r2, #12]
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_GetPriorityGrouping>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e8:	4b04      	ldr	r3, [pc, #16]	; (80018fc <__NVIC_GetPriorityGrouping+0x18>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	0a1b      	lsrs	r3, r3, #8
 80018ee:	f003 0307 	and.w	r3, r3, #7
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <__NVIC_EnableIRQ>:
=======
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <__NVIC_GetPriorityGrouping+0x18>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	f003 0307 	and.w	r3, r3, #7
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_EnableIRQ>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	2b00      	cmp	r3, #0
 8001910:	db0b      	blt.n	800192a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	f003 021f 	and.w	r2, r3, #31
 8001918:	4906      	ldr	r1, [pc, #24]	; (8001934 <__NVIC_EnableIRQ+0x34>)
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	095b      	lsrs	r3, r3, #5
 8001920:	2001      	movs	r0, #1
 8001922:	fa00 f202 	lsl.w	r2, r0, r2
 8001926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr
 8001934:	e000e100 	.word	0xe000e100

08001938 <__NVIC_SetPriority>:
=======
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	2b00      	cmp	r3, #0
 8001848:	db0b      	blt.n	8001862 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	f003 021f 	and.w	r2, r3, #31
 8001850:	4906      	ldr	r1, [pc, #24]	; (800186c <__NVIC_EnableIRQ+0x34>)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	095b      	lsrs	r3, r3, #5
 8001858:	2001      	movs	r0, #1
 800185a:	fa00 f202 	lsl.w	r2, r0, r2
 800185e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr
 800186c:	e000e100 	.word	0xe000e100

08001870 <__NVIC_SetPriority>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	6039      	str	r1, [r7, #0]
 8001942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001948:	2b00      	cmp	r3, #0
 800194a:	db0a      	blt.n	8001962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	b2da      	uxtb	r2, r3
 8001950:	490c      	ldr	r1, [pc, #48]	; (8001984 <__NVIC_SetPriority+0x4c>)
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	0112      	lsls	r2, r2, #4
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	440b      	add	r3, r1
 800195c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	6039      	str	r1, [r7, #0]
 800187a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800187c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001880:	2b00      	cmp	r3, #0
 8001882:	db0a      	blt.n	800189a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	b2da      	uxtb	r2, r3
 8001888:	490c      	ldr	r1, [pc, #48]	; (80018bc <__NVIC_SetPriority+0x4c>)
 800188a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188e:	0112      	lsls	r2, r2, #4
 8001890:	b2d2      	uxtb	r2, r2
 8001892:	440b      	add	r3, r1
 8001894:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 8001960:	e00a      	b.n	8001978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	b2da      	uxtb	r2, r3
 8001966:	4908      	ldr	r1, [pc, #32]	; (8001988 <__NVIC_SetPriority+0x50>)
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	3b04      	subs	r3, #4
 8001970:	0112      	lsls	r2, r2, #4
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	440b      	add	r3, r1
 8001976:	761a      	strb	r2, [r3, #24]
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	e000e100 	.word	0xe000e100
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <NVIC_EncodePriority>:
=======
 8001898:	e00a      	b.n	80018b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	b2da      	uxtb	r2, r3
 800189e:	4908      	ldr	r1, [pc, #32]	; (80018c0 <__NVIC_SetPriority+0x50>)
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	f003 030f 	and.w	r3, r3, #15
 80018a6:	3b04      	subs	r3, #4
 80018a8:	0112      	lsls	r2, r2, #4
 80018aa:	b2d2      	uxtb	r2, r2
 80018ac:	440b      	add	r3, r1
 80018ae:	761a      	strb	r2, [r3, #24]
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	e000e100 	.word	0xe000e100
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <NVIC_EncodePriority>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 800198c:	b480      	push	{r7}
 800198e:	b089      	sub	sp, #36	; 0x24
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	61fb      	str	r3, [r7, #28]
=======
 80018c4:	b480      	push	{r7}
 80018c6:	b089      	sub	sp, #36	; 0x24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	61fb      	str	r3, [r7, #28]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f1c3 0307 	rsb	r3, r3, #7
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	bf28      	it	cs
 80019aa:	2304      	movcs	r3, #4
 80019ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	3304      	adds	r3, #4
 80019b2:	2b06      	cmp	r3, #6
 80019b4:	d902      	bls.n	80019bc <NVIC_EncodePriority+0x30>
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	3b03      	subs	r3, #3
 80019ba:	e000      	b.n	80019be <NVIC_EncodePriority+0x32>
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c0:	f04f 32ff 	mov.w	r2, #4294967295
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43da      	mvns	r2, r3
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	401a      	ands	r2, r3
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019d4:	f04f 31ff 	mov.w	r1, #4294967295
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	fa01 f303 	lsl.w	r3, r1, r3
 80019de:	43d9      	mvns	r1, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e4:	4313      	orrs	r3, r2
         );
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3724      	adds	r7, #36	; 0x24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr

080019f0 <SysTick_Config>:
=======
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f1c3 0307 	rsb	r3, r3, #7
 80018de:	2b04      	cmp	r3, #4
 80018e0:	bf28      	it	cs
 80018e2:	2304      	movcs	r3, #4
 80018e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	3304      	adds	r3, #4
 80018ea:	2b06      	cmp	r3, #6
 80018ec:	d902      	bls.n	80018f4 <NVIC_EncodePriority+0x30>
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	3b03      	subs	r3, #3
 80018f2:	e000      	b.n	80018f6 <NVIC_EncodePriority+0x32>
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f8:	f04f 32ff 	mov.w	r2, #4294967295
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43da      	mvns	r2, r3
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	401a      	ands	r2, r3
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800190c:	f04f 31ff 	mov.w	r1, #4294967295
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	fa01 f303 	lsl.w	r3, r1, r3
 8001916:	43d9      	mvns	r1, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800191c:	4313      	orrs	r3, r2
         );
}
 800191e:	4618      	mov	r0, r3
 8001920:	3724      	adds	r7, #36	; 0x24
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr

08001928 <SysTick_Config>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< HEAD
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a00:	d301      	bcc.n	8001a06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a02:	2301      	movs	r3, #1
 8001a04:	e00f      	b.n	8001a26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a06:	4a0a      	ldr	r2, [pc, #40]	; (8001a30 <SysTick_Config+0x40>)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a0e:	210f      	movs	r1, #15
 8001a10:	f04f 30ff 	mov.w	r0, #4294967295
 8001a14:	f7ff ff90 	bl	8001938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a18:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <SysTick_Config+0x40>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a1e:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <SysTick_Config+0x40>)
 8001a20:	2207      	movs	r2, #7
 8001a22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	e000e010 	.word	0xe000e010

08001a34 <HAL_NVIC_SetPriorityGrouping>:
=======
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3b01      	subs	r3, #1
 8001934:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001938:	d301      	bcc.n	800193e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800193a:	2301      	movs	r3, #1
 800193c:	e00f      	b.n	800195e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800193e:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <SysTick_Config+0x40>)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3b01      	subs	r3, #1
 8001944:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001946:	210f      	movs	r1, #15
 8001948:	f04f 30ff 	mov.w	r0, #4294967295
 800194c:	f7ff ff90 	bl	8001870 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001950:	4b05      	ldr	r3, [pc, #20]	; (8001968 <SysTick_Config+0x40>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001956:	4b04      	ldr	r3, [pc, #16]	; (8001968 <SysTick_Config+0x40>)
 8001958:	2207      	movs	r2, #7
 800195a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	e000e010 	.word	0xe000e010

0800196c <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
=======
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff ff2d 	bl	800189c <__NVIC_SetPriorityGrouping>
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_NVIC_SetPriority>:
=======
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f7ff ff2d 	bl	80017d4 <__NVIC_SetPriorityGrouping>
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_NVIC_SetPriority>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b086      	sub	sp, #24
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	4603      	mov	r3, r0
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
 8001a56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]
=======
 8001982:	b580      	push	{r7, lr}
 8001984:	b086      	sub	sp, #24
 8001986:	af00      	add	r7, sp, #0
 8001988:	4603      	mov	r3, r0
 800198a:	60b9      	str	r1, [r7, #8]
 800198c:	607a      	str	r2, [r7, #4]
 800198e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 8001a5c:	f7ff ff42 	bl	80018e4 <__NVIC_GetPriorityGrouping>
 8001a60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	68b9      	ldr	r1, [r7, #8]
 8001a66:	6978      	ldr	r0, [r7, #20]
 8001a68:	f7ff ff90 	bl	800198c <NVIC_EncodePriority>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a72:	4611      	mov	r1, r2
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff ff5f 	bl	8001938 <__NVIC_SetPriority>
}
 8001a7a:	bf00      	nop
 8001a7c:	3718      	adds	r7, #24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_NVIC_EnableIRQ>:
=======
 8001994:	f7ff ff42 	bl	800181c <__NVIC_GetPriorityGrouping>
 8001998:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	68b9      	ldr	r1, [r7, #8]
 800199e:	6978      	ldr	r0, [r7, #20]
 80019a0:	f7ff ff90 	bl	80018c4 <NVIC_EncodePriority>
 80019a4:	4602      	mov	r2, r0
 80019a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019aa:	4611      	mov	r1, r2
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff ff5f 	bl	8001870 <__NVIC_SetPriority>
}
 80019b2:	bf00      	nop
 80019b4:	3718      	adds	r7, #24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_NVIC_EnableIRQ>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	4603      	mov	r3, r0
 8001a8a:	71fb      	strb	r3, [r7, #7]
=======
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	4603      	mov	r3, r0
 80019c2:	71fb      	strb	r3, [r7, #7]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 8001a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff ff35 	bl	8001900 <__NVIC_EnableIRQ>
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_SYSTICK_Config>:
=======
 80019c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff ff35 	bl	8001838 <__NVIC_EnableIRQ>
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_SYSTICK_Config>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff ffa2 	bl	80019f0 <SysTick_Config>
 8001aac:	4603      	mov	r3, r0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
	...

08001ab8 <HAL_GPIO_Init>:
=======
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b082      	sub	sp, #8
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff ffa2 	bl	8001928 <SysTick_Config>
 80019e4:	4603      	mov	r3, r0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
	...

080019f0 <HAL_GPIO_Init>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8001ab8:	b480      	push	{r7}
 8001aba:	b08b      	sub	sp, #44	; 0x2c
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24
=======
 80019f0:	b480      	push	{r7}
 80019f2:	b08b      	sub	sp, #44	; 0x2c
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019fa:	2300      	movs	r3, #0
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
<<<<<<< HEAD
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	623b      	str	r3, [r7, #32]
=======
 80019fe:	2300      	movs	r3, #0
 8001a00:	623b      	str	r3, [r7, #32]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
<<<<<<< HEAD
 8001aca:	e148      	b.n	8001d5e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001acc:	2201      	movs	r2, #1
 8001ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	69fa      	ldr	r2, [r7, #28]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	f040 8137 	bne.w	8001d58 <HAL_GPIO_Init+0x2a0>
=======
 8001a02:	e148      	b.n	8001c96 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a04:	2201      	movs	r2, #1
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	69fa      	ldr	r2, [r7, #28]
 8001a14:	4013      	ands	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	f040 8137 	bne.w	8001c90 <HAL_GPIO_Init+0x2a0>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
<<<<<<< HEAD
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	4aa3      	ldr	r2, [pc, #652]	; (8001d7c <HAL_GPIO_Init+0x2c4>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d05e      	beq.n	8001bb2 <HAL_GPIO_Init+0xfa>
 8001af4:	4aa1      	ldr	r2, [pc, #644]	; (8001d7c <HAL_GPIO_Init+0x2c4>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d875      	bhi.n	8001be6 <HAL_GPIO_Init+0x12e>
 8001afa:	4aa1      	ldr	r2, [pc, #644]	; (8001d80 <HAL_GPIO_Init+0x2c8>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d058      	beq.n	8001bb2 <HAL_GPIO_Init+0xfa>
 8001b00:	4a9f      	ldr	r2, [pc, #636]	; (8001d80 <HAL_GPIO_Init+0x2c8>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d86f      	bhi.n	8001be6 <HAL_GPIO_Init+0x12e>
 8001b06:	4a9f      	ldr	r2, [pc, #636]	; (8001d84 <HAL_GPIO_Init+0x2cc>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d052      	beq.n	8001bb2 <HAL_GPIO_Init+0xfa>
 8001b0c:	4a9d      	ldr	r2, [pc, #628]	; (8001d84 <HAL_GPIO_Init+0x2cc>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d869      	bhi.n	8001be6 <HAL_GPIO_Init+0x12e>
 8001b12:	4a9d      	ldr	r2, [pc, #628]	; (8001d88 <HAL_GPIO_Init+0x2d0>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d04c      	beq.n	8001bb2 <HAL_GPIO_Init+0xfa>
 8001b18:	4a9b      	ldr	r2, [pc, #620]	; (8001d88 <HAL_GPIO_Init+0x2d0>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d863      	bhi.n	8001be6 <HAL_GPIO_Init+0x12e>
 8001b1e:	4a9b      	ldr	r2, [pc, #620]	; (8001d8c <HAL_GPIO_Init+0x2d4>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d046      	beq.n	8001bb2 <HAL_GPIO_Init+0xfa>
 8001b24:	4a99      	ldr	r2, [pc, #612]	; (8001d8c <HAL_GPIO_Init+0x2d4>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d85d      	bhi.n	8001be6 <HAL_GPIO_Init+0x12e>
 8001b2a:	2b12      	cmp	r3, #18
 8001b2c:	d82a      	bhi.n	8001b84 <HAL_GPIO_Init+0xcc>
 8001b2e:	2b12      	cmp	r3, #18
 8001b30:	d859      	bhi.n	8001be6 <HAL_GPIO_Init+0x12e>
 8001b32:	a201      	add	r2, pc, #4	; (adr r2, 8001b38 <HAL_GPIO_Init+0x80>)
 8001b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b38:	08001bb3 	.word	0x08001bb3
 8001b3c:	08001b8d 	.word	0x08001b8d
 8001b40:	08001b9f 	.word	0x08001b9f
 8001b44:	08001be1 	.word	0x08001be1
 8001b48:	08001be7 	.word	0x08001be7
 8001b4c:	08001be7 	.word	0x08001be7
 8001b50:	08001be7 	.word	0x08001be7
 8001b54:	08001be7 	.word	0x08001be7
 8001b58:	08001be7 	.word	0x08001be7
 8001b5c:	08001be7 	.word	0x08001be7
 8001b60:	08001be7 	.word	0x08001be7
 8001b64:	08001be7 	.word	0x08001be7
 8001b68:	08001be7 	.word	0x08001be7
 8001b6c:	08001be7 	.word	0x08001be7
 8001b70:	08001be7 	.word	0x08001be7
 8001b74:	08001be7 	.word	0x08001be7
 8001b78:	08001be7 	.word	0x08001be7
 8001b7c:	08001b95 	.word	0x08001b95
 8001b80:	08001ba9 	.word	0x08001ba9
 8001b84:	4a82      	ldr	r2, [pc, #520]	; (8001d90 <HAL_GPIO_Init+0x2d8>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d013      	beq.n	8001bb2 <HAL_GPIO_Init+0xfa>
=======
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	4aa3      	ldr	r2, [pc, #652]	; (8001cb4 <HAL_GPIO_Init+0x2c4>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d05e      	beq.n	8001aea <HAL_GPIO_Init+0xfa>
 8001a2c:	4aa1      	ldr	r2, [pc, #644]	; (8001cb4 <HAL_GPIO_Init+0x2c4>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d875      	bhi.n	8001b1e <HAL_GPIO_Init+0x12e>
 8001a32:	4aa1      	ldr	r2, [pc, #644]	; (8001cb8 <HAL_GPIO_Init+0x2c8>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d058      	beq.n	8001aea <HAL_GPIO_Init+0xfa>
 8001a38:	4a9f      	ldr	r2, [pc, #636]	; (8001cb8 <HAL_GPIO_Init+0x2c8>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d86f      	bhi.n	8001b1e <HAL_GPIO_Init+0x12e>
 8001a3e:	4a9f      	ldr	r2, [pc, #636]	; (8001cbc <HAL_GPIO_Init+0x2cc>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d052      	beq.n	8001aea <HAL_GPIO_Init+0xfa>
 8001a44:	4a9d      	ldr	r2, [pc, #628]	; (8001cbc <HAL_GPIO_Init+0x2cc>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d869      	bhi.n	8001b1e <HAL_GPIO_Init+0x12e>
 8001a4a:	4a9d      	ldr	r2, [pc, #628]	; (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d04c      	beq.n	8001aea <HAL_GPIO_Init+0xfa>
 8001a50:	4a9b      	ldr	r2, [pc, #620]	; (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d863      	bhi.n	8001b1e <HAL_GPIO_Init+0x12e>
 8001a56:	4a9b      	ldr	r2, [pc, #620]	; (8001cc4 <HAL_GPIO_Init+0x2d4>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d046      	beq.n	8001aea <HAL_GPIO_Init+0xfa>
 8001a5c:	4a99      	ldr	r2, [pc, #612]	; (8001cc4 <HAL_GPIO_Init+0x2d4>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d85d      	bhi.n	8001b1e <HAL_GPIO_Init+0x12e>
 8001a62:	2b12      	cmp	r3, #18
 8001a64:	d82a      	bhi.n	8001abc <HAL_GPIO_Init+0xcc>
 8001a66:	2b12      	cmp	r3, #18
 8001a68:	d859      	bhi.n	8001b1e <HAL_GPIO_Init+0x12e>
 8001a6a:	a201      	add	r2, pc, #4	; (adr r2, 8001a70 <HAL_GPIO_Init+0x80>)
 8001a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a70:	08001aeb 	.word	0x08001aeb
 8001a74:	08001ac5 	.word	0x08001ac5
 8001a78:	08001ad7 	.word	0x08001ad7
 8001a7c:	08001b19 	.word	0x08001b19
 8001a80:	08001b1f 	.word	0x08001b1f
 8001a84:	08001b1f 	.word	0x08001b1f
 8001a88:	08001b1f 	.word	0x08001b1f
 8001a8c:	08001b1f 	.word	0x08001b1f
 8001a90:	08001b1f 	.word	0x08001b1f
 8001a94:	08001b1f 	.word	0x08001b1f
 8001a98:	08001b1f 	.word	0x08001b1f
 8001a9c:	08001b1f 	.word	0x08001b1f
 8001aa0:	08001b1f 	.word	0x08001b1f
 8001aa4:	08001b1f 	.word	0x08001b1f
 8001aa8:	08001b1f 	.word	0x08001b1f
 8001aac:	08001b1f 	.word	0x08001b1f
 8001ab0:	08001b1f 	.word	0x08001b1f
 8001ab4:	08001acd 	.word	0x08001acd
 8001ab8:	08001ae1 	.word	0x08001ae1
 8001abc:	4a82      	ldr	r2, [pc, #520]	; (8001cc8 <HAL_GPIO_Init+0x2d8>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d013      	beq.n	8001aea <HAL_GPIO_Init+0xfa>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
<<<<<<< HEAD
 8001b8a:	e02c      	b.n	8001be6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	623b      	str	r3, [r7, #32]
          break;
 8001b92:	e029      	b.n	8001be8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	3304      	adds	r3, #4
 8001b9a:	623b      	str	r3, [r7, #32]
          break;
 8001b9c:	e024      	b.n	8001be8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	3308      	adds	r3, #8
 8001ba4:	623b      	str	r3, [r7, #32]
          break;
 8001ba6:	e01f      	b.n	8001be8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	330c      	adds	r3, #12
 8001bae:	623b      	str	r3, [r7, #32]
          break;
 8001bb0:	e01a      	b.n	8001be8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d102      	bne.n	8001bc0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bba:	2304      	movs	r3, #4
 8001bbc:	623b      	str	r3, [r7, #32]
          break;
 8001bbe:	e013      	b.n	8001be8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d105      	bne.n	8001bd4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bc8:	2308      	movs	r3, #8
 8001bca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	69fa      	ldr	r2, [r7, #28]
 8001bd0:	611a      	str	r2, [r3, #16]
          break;
 8001bd2:	e009      	b.n	8001be8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bd4:	2308      	movs	r3, #8
 8001bd6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	69fa      	ldr	r2, [r7, #28]
 8001bdc:	615a      	str	r2, [r3, #20]
          break;
 8001bde:	e003      	b.n	8001be8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001be0:	2300      	movs	r3, #0
 8001be2:	623b      	str	r3, [r7, #32]
          break;
 8001be4:	e000      	b.n	8001be8 <HAL_GPIO_Init+0x130>
          break;
 8001be6:	bf00      	nop
=======
 8001ac2:	e02c      	b.n	8001b1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	623b      	str	r3, [r7, #32]
          break;
 8001aca:	e029      	b.n	8001b20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	623b      	str	r3, [r7, #32]
          break;
 8001ad4:	e024      	b.n	8001b20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	3308      	adds	r3, #8
 8001adc:	623b      	str	r3, [r7, #32]
          break;
 8001ade:	e01f      	b.n	8001b20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	330c      	adds	r3, #12
 8001ae6:	623b      	str	r3, [r7, #32]
          break;
 8001ae8:	e01a      	b.n	8001b20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d102      	bne.n	8001af8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001af2:	2304      	movs	r3, #4
 8001af4:	623b      	str	r3, [r7, #32]
          break;
 8001af6:	e013      	b.n	8001b20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d105      	bne.n	8001b0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b00:	2308      	movs	r3, #8
 8001b02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69fa      	ldr	r2, [r7, #28]
 8001b08:	611a      	str	r2, [r3, #16]
          break;
 8001b0a:	e009      	b.n	8001b20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b0c:	2308      	movs	r3, #8
 8001b0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69fa      	ldr	r2, [r7, #28]
 8001b14:	615a      	str	r2, [r3, #20]
          break;
 8001b16:	e003      	b.n	8001b20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	623b      	str	r3, [r7, #32]
          break;
 8001b1c:	e000      	b.n	8001b20 <HAL_GPIO_Init+0x130>
          break;
 8001b1e:	bf00      	nop
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
<<<<<<< HEAD
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	2bff      	cmp	r3, #255	; 0xff
 8001bec:	d801      	bhi.n	8001bf2 <HAL_GPIO_Init+0x13a>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	e001      	b.n	8001bf6 <HAL_GPIO_Init+0x13e>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	2bff      	cmp	r3, #255	; 0xff
 8001bfc:	d802      	bhi.n	8001c04 <HAL_GPIO_Init+0x14c>
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	e002      	b.n	8001c0a <HAL_GPIO_Init+0x152>
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	3b08      	subs	r3, #8
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	210f      	movs	r1, #15
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	fa01 f303 	lsl.w	r3, r1, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	401a      	ands	r2, r3
 8001c1c:	6a39      	ldr	r1, [r7, #32]
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	fa01 f303 	lsl.w	r3, r1, r3
 8001c24:	431a      	orrs	r2, r3
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	601a      	str	r2, [r3, #0]
=======
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	2bff      	cmp	r3, #255	; 0xff
 8001b24:	d801      	bhi.n	8001b2a <HAL_GPIO_Init+0x13a>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	e001      	b.n	8001b2e <HAL_GPIO_Init+0x13e>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	2bff      	cmp	r3, #255	; 0xff
 8001b34:	d802      	bhi.n	8001b3c <HAL_GPIO_Init+0x14c>
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	e002      	b.n	8001b42 <HAL_GPIO_Init+0x152>
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	3b08      	subs	r3, #8
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	210f      	movs	r1, #15
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	401a      	ands	r2, r3
 8001b54:	6a39      	ldr	r1, [r7, #32]
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	601a      	str	r2, [r3, #0]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
<<<<<<< HEAD
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f000 8090 	beq.w	8001d58 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c38:	4b56      	ldr	r3, [pc, #344]	; (8001d94 <HAL_GPIO_Init+0x2dc>)
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	4a55      	ldr	r2, [pc, #340]	; (8001d94 <HAL_GPIO_Init+0x2dc>)
 8001c3e:	f043 0301 	orr.w	r3, r3, #1
 8001c42:	6193      	str	r3, [r2, #24]
 8001c44:	4b53      	ldr	r3, [pc, #332]	; (8001d94 <HAL_GPIO_Init+0x2dc>)
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	60bb      	str	r3, [r7, #8]
 8001c4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c50:	4a51      	ldr	r2, [pc, #324]	; (8001d98 <HAL_GPIO_Init+0x2e0>)
 8001c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c54:	089b      	lsrs	r3, r3, #2
 8001c56:	3302      	adds	r3, #2
 8001c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c60:	f003 0303 	and.w	r3, r3, #3
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	220f      	movs	r2, #15
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	4013      	ands	r3, r2
 8001c72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4a49      	ldr	r2, [pc, #292]	; (8001d9c <HAL_GPIO_Init+0x2e4>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d00d      	beq.n	8001c98 <HAL_GPIO_Init+0x1e0>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a48      	ldr	r2, [pc, #288]	; (8001da0 <HAL_GPIO_Init+0x2e8>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d007      	beq.n	8001c94 <HAL_GPIO_Init+0x1dc>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a47      	ldr	r2, [pc, #284]	; (8001da4 <HAL_GPIO_Init+0x2ec>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d101      	bne.n	8001c90 <HAL_GPIO_Init+0x1d8>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	e004      	b.n	8001c9a <HAL_GPIO_Init+0x1e2>
 8001c90:	2303      	movs	r3, #3
 8001c92:	e002      	b.n	8001c9a <HAL_GPIO_Init+0x1e2>
 8001c94:	2301      	movs	r3, #1
 8001c96:	e000      	b.n	8001c9a <HAL_GPIO_Init+0x1e2>
 8001c98:	2300      	movs	r3, #0
 8001c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c9c:	f002 0203 	and.w	r2, r2, #3
 8001ca0:	0092      	lsls	r2, r2, #2
 8001ca2:	4093      	lsls	r3, r2
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001caa:	493b      	ldr	r1, [pc, #236]	; (8001d98 <HAL_GPIO_Init+0x2e0>)
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	089b      	lsrs	r3, r3, #2
 8001cb0:	3302      	adds	r3, #2
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
=======
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f000 8090 	beq.w	8001c90 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b70:	4b56      	ldr	r3, [pc, #344]	; (8001ccc <HAL_GPIO_Init+0x2dc>)
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	4a55      	ldr	r2, [pc, #340]	; (8001ccc <HAL_GPIO_Init+0x2dc>)
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	6193      	str	r3, [r2, #24]
 8001b7c:	4b53      	ldr	r3, [pc, #332]	; (8001ccc <HAL_GPIO_Init+0x2dc>)
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b88:	4a51      	ldr	r2, [pc, #324]	; (8001cd0 <HAL_GPIO_Init+0x2e0>)
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	089b      	lsrs	r3, r3, #2
 8001b8e:	3302      	adds	r3, #2
 8001b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	f003 0303 	and.w	r3, r3, #3
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	220f      	movs	r2, #15
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a49      	ldr	r2, [pc, #292]	; (8001cd4 <HAL_GPIO_Init+0x2e4>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d00d      	beq.n	8001bd0 <HAL_GPIO_Init+0x1e0>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a48      	ldr	r2, [pc, #288]	; (8001cd8 <HAL_GPIO_Init+0x2e8>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d007      	beq.n	8001bcc <HAL_GPIO_Init+0x1dc>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a47      	ldr	r2, [pc, #284]	; (8001cdc <HAL_GPIO_Init+0x2ec>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d101      	bne.n	8001bc8 <HAL_GPIO_Init+0x1d8>
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	e004      	b.n	8001bd2 <HAL_GPIO_Init+0x1e2>
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e002      	b.n	8001bd2 <HAL_GPIO_Init+0x1e2>
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e000      	b.n	8001bd2 <HAL_GPIO_Init+0x1e2>
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bd4:	f002 0203 	and.w	r2, r2, #3
 8001bd8:	0092      	lsls	r2, r2, #2
 8001bda:	4093      	lsls	r3, r2
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001be2:	493b      	ldr	r1, [pc, #236]	; (8001cd0 <HAL_GPIO_Init+0x2e0>)
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be6:	089b      	lsrs	r3, r3, #2
 8001be8:	3302      	adds	r3, #2
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
<<<<<<< HEAD
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d006      	beq.n	8001cd2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cc4:	4b38      	ldr	r3, [pc, #224]	; (8001da8 <HAL_GPIO_Init+0x2f0>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	4937      	ldr	r1, [pc, #220]	; (8001da8 <HAL_GPIO_Init+0x2f0>)
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	600b      	str	r3, [r1, #0]
 8001cd0:	e006      	b.n	8001ce0 <HAL_GPIO_Init+0x228>
=======
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d006      	beq.n	8001c0a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bfc:	4b38      	ldr	r3, [pc, #224]	; (8001ce0 <HAL_GPIO_Init+0x2f0>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4937      	ldr	r1, [pc, #220]	; (8001ce0 <HAL_GPIO_Init+0x2f0>)
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	600b      	str	r3, [r1, #0]
 8001c08:	e006      	b.n	8001c18 <HAL_GPIO_Init+0x228>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
<<<<<<< HEAD
 8001cd2:	4b35      	ldr	r3, [pc, #212]	; (8001da8 <HAL_GPIO_Init+0x2f0>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	4933      	ldr	r1, [pc, #204]	; (8001da8 <HAL_GPIO_Init+0x2f0>)
 8001cdc:	4013      	ands	r3, r2
 8001cde:	600b      	str	r3, [r1, #0]
=======
 8001c0a:	4b35      	ldr	r3, [pc, #212]	; (8001ce0 <HAL_GPIO_Init+0x2f0>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	43db      	mvns	r3, r3
 8001c12:	4933      	ldr	r1, [pc, #204]	; (8001ce0 <HAL_GPIO_Init+0x2f0>)
 8001c14:	4013      	ands	r3, r2
 8001c16:	600b      	str	r3, [r1, #0]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
<<<<<<< HEAD
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d006      	beq.n	8001cfa <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cec:	4b2e      	ldr	r3, [pc, #184]	; (8001da8 <HAL_GPIO_Init+0x2f0>)
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	492d      	ldr	r1, [pc, #180]	; (8001da8 <HAL_GPIO_Init+0x2f0>)
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	604b      	str	r3, [r1, #4]
 8001cf8:	e006      	b.n	8001d08 <HAL_GPIO_Init+0x250>
=======
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d006      	beq.n	8001c32 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c24:	4b2e      	ldr	r3, [pc, #184]	; (8001ce0 <HAL_GPIO_Init+0x2f0>)
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	492d      	ldr	r1, [pc, #180]	; (8001ce0 <HAL_GPIO_Init+0x2f0>)
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	604b      	str	r3, [r1, #4]
 8001c30:	e006      	b.n	8001c40 <HAL_GPIO_Init+0x250>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
<<<<<<< HEAD
 8001cfa:	4b2b      	ldr	r3, [pc, #172]	; (8001da8 <HAL_GPIO_Init+0x2f0>)
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	43db      	mvns	r3, r3
 8001d02:	4929      	ldr	r1, [pc, #164]	; (8001da8 <HAL_GPIO_Init+0x2f0>)
 8001d04:	4013      	ands	r3, r2
 8001d06:	604b      	str	r3, [r1, #4]
=======
 8001c32:	4b2b      	ldr	r3, [pc, #172]	; (8001ce0 <HAL_GPIO_Init+0x2f0>)
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	4929      	ldr	r1, [pc, #164]	; (8001ce0 <HAL_GPIO_Init+0x2f0>)
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	604b      	str	r3, [r1, #4]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
<<<<<<< HEAD
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d006      	beq.n	8001d22 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d14:	4b24      	ldr	r3, [pc, #144]	; (8001da8 <HAL_GPIO_Init+0x2f0>)
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	4923      	ldr	r1, [pc, #140]	; (8001da8 <HAL_GPIO_Init+0x2f0>)
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	608b      	str	r3, [r1, #8]
 8001d20:	e006      	b.n	8001d30 <HAL_GPIO_Init+0x278>
=======
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d006      	beq.n	8001c5a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c4c:	4b24      	ldr	r3, [pc, #144]	; (8001ce0 <HAL_GPIO_Init+0x2f0>)
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	4923      	ldr	r1, [pc, #140]	; (8001ce0 <HAL_GPIO_Init+0x2f0>)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	608b      	str	r3, [r1, #8]
 8001c58:	e006      	b.n	8001c68 <HAL_GPIO_Init+0x278>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
<<<<<<< HEAD
 8001d22:	4b21      	ldr	r3, [pc, #132]	; (8001da8 <HAL_GPIO_Init+0x2f0>)
 8001d24:	689a      	ldr	r2, [r3, #8]
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	491f      	ldr	r1, [pc, #124]	; (8001da8 <HAL_GPIO_Init+0x2f0>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	608b      	str	r3, [r1, #8]
=======
 8001c5a:	4b21      	ldr	r3, [pc, #132]	; (8001ce0 <HAL_GPIO_Init+0x2f0>)
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	43db      	mvns	r3, r3
 8001c62:	491f      	ldr	r1, [pc, #124]	; (8001ce0 <HAL_GPIO_Init+0x2f0>)
 8001c64:	4013      	ands	r3, r2
 8001c66:	608b      	str	r3, [r1, #8]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
<<<<<<< HEAD
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d006      	beq.n	8001d4a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d3c:	4b1a      	ldr	r3, [pc, #104]	; (8001da8 <HAL_GPIO_Init+0x2f0>)
 8001d3e:	68da      	ldr	r2, [r3, #12]
 8001d40:	4919      	ldr	r1, [pc, #100]	; (8001da8 <HAL_GPIO_Init+0x2f0>)
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	60cb      	str	r3, [r1, #12]
 8001d48:	e006      	b.n	8001d58 <HAL_GPIO_Init+0x2a0>
=======
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d006      	beq.n	8001c82 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c74:	4b1a      	ldr	r3, [pc, #104]	; (8001ce0 <HAL_GPIO_Init+0x2f0>)
 8001c76:	68da      	ldr	r2, [r3, #12]
 8001c78:	4919      	ldr	r1, [pc, #100]	; (8001ce0 <HAL_GPIO_Init+0x2f0>)
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	60cb      	str	r3, [r1, #12]
 8001c80:	e006      	b.n	8001c90 <HAL_GPIO_Init+0x2a0>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
<<<<<<< HEAD
 8001d4a:	4b17      	ldr	r3, [pc, #92]	; (8001da8 <HAL_GPIO_Init+0x2f0>)
 8001d4c:	68da      	ldr	r2, [r3, #12]
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	43db      	mvns	r3, r3
 8001d52:	4915      	ldr	r1, [pc, #84]	; (8001da8 <HAL_GPIO_Init+0x2f0>)
 8001d54:	4013      	ands	r3, r2
 8001d56:	60cb      	str	r3, [r1, #12]
=======
 8001c82:	4b17      	ldr	r3, [pc, #92]	; (8001ce0 <HAL_GPIO_Init+0x2f0>)
 8001c84:	68da      	ldr	r2, [r3, #12]
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	4915      	ldr	r1, [pc, #84]	; (8001ce0 <HAL_GPIO_Init+0x2f0>)
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	60cb      	str	r3, [r1, #12]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
        }
      }
    }

	position++;
<<<<<<< HEAD
 8001d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	fa22 f303 	lsr.w	r3, r2, r3
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f47f aeaf 	bne.w	8001acc <HAL_GPIO_Init+0x14>
  }
}
 8001d6e:	bf00      	nop
 8001d70:	bf00      	nop
 8001d72:	372c      	adds	r7, #44	; 0x2c
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	10320000 	.word	0x10320000
 8001d80:	10310000 	.word	0x10310000
 8001d84:	10220000 	.word	0x10220000
 8001d88:	10210000 	.word	0x10210000
 8001d8c:	10120000 	.word	0x10120000
 8001d90:	10110000 	.word	0x10110000
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40010000 	.word	0x40010000
 8001d9c:	40010800 	.word	0x40010800
 8001da0:	40010c00 	.word	0x40010c00
 8001da4:	40011000 	.word	0x40011000
 8001da8:	40010400 	.word	0x40010400

08001dac <HAL_GPIO_ReadPin>:
=======
 8001c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c92:	3301      	adds	r3, #1
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f47f aeaf 	bne.w	8001a04 <HAL_GPIO_Init+0x14>
  }
}
 8001ca6:	bf00      	nop
 8001ca8:	bf00      	nop
 8001caa:	372c      	adds	r7, #44	; 0x2c
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc80      	pop	{r7}
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	10320000 	.word	0x10320000
 8001cb8:	10310000 	.word	0x10310000
 8001cbc:	10220000 	.word	0x10220000
 8001cc0:	10210000 	.word	0x10210000
 8001cc4:	10120000 	.word	0x10120000
 8001cc8:	10110000 	.word	0x10110000
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	40010000 	.word	0x40010000
 8001cd4:	40010800 	.word	0x40010800
 8001cd8:	40010c00 	.word	0x40010c00
 8001cdc:	40011000 	.word	0x40011000
 8001ce0:	40010400 	.word	0x40010400

08001ce4 <HAL_GPIO_ReadPin>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	460b      	mov	r3, r1
 8001db6:	807b      	strh	r3, [r7, #2]
=======
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	460b      	mov	r3, r1
 8001cee:	807b      	strh	r3, [r7, #2]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
<<<<<<< HEAD
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	887b      	ldrh	r3, [r7, #2]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d002      	beq.n	8001dca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	73fb      	strb	r3, [r7, #15]
 8001dc8:	e001      	b.n	8001dce <HAL_GPIO_ReadPin+0x22>
=======
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	887b      	ldrh	r3, [r7, #2]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d002      	beq.n	8001d02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	73fb      	strb	r3, [r7, #15]
 8001d00:	e001      	b.n	8001d06 <HAL_GPIO_ReadPin+0x22>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
<<<<<<< HEAD
 8001dca:	2300      	movs	r3, #0
 8001dcc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr

08001dda <HAL_GPIO_WritePin>:
=======
 8001d02:	2300      	movs	r3, #0
 8001d04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc80      	pop	{r7}
 8001d10:	4770      	bx	lr

08001d12 <HAL_GPIO_WritePin>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
 8001de2:	460b      	mov	r3, r1
 8001de4:	807b      	strh	r3, [r7, #2]
 8001de6:	4613      	mov	r3, r2
 8001de8:	707b      	strb	r3, [r7, #1]
=======
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	807b      	strh	r3, [r7, #2]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	707b      	strb	r3, [r7, #1]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 8001dea:	787b      	ldrb	r3, [r7, #1]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d003      	beq.n	8001df8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001df0:	887a      	ldrh	r2, [r7, #2]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	611a      	str	r2, [r3, #16]
=======
 8001d22:	787b      	ldrb	r3, [r7, #1]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d28:	887a      	ldrh	r2, [r7, #2]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	611a      	str	r2, [r3, #16]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
<<<<<<< HEAD
 8001df6:	e003      	b.n	8001e00 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001df8:	887b      	ldrh	r3, [r7, #2]
 8001dfa:	041a      	lsls	r2, r3, #16
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	611a      	str	r2, [r3, #16]
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bc80      	pop	{r7}
 8001e08:	4770      	bx	lr

08001e0a <HAL_GPIO_TogglePin>:
=======
 8001d2e:	e003      	b.n	8001d38 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d30:	887b      	ldrh	r3, [r7, #2]
 8001d32:	041a      	lsls	r2, r3, #16
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	611a      	str	r2, [r3, #16]
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr

08001d42 <HAL_GPIO_TogglePin>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 8001e0a:	b480      	push	{r7}
 8001e0c:	b085      	sub	sp, #20
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
 8001e12:	460b      	mov	r3, r1
 8001e14:	807b      	strh	r3, [r7, #2]
=======
 8001d42:	b480      	push	{r7}
 8001d44:	b085      	sub	sp, #20
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	807b      	strh	r3, [r7, #2]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
<<<<<<< HEAD
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e1c:	887a      	ldrh	r2, [r7, #2]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	4013      	ands	r3, r2
 8001e22:	041a      	lsls	r2, r3, #16
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	43d9      	mvns	r1, r3
 8001e28:	887b      	ldrh	r3, [r7, #2]
 8001e2a:	400b      	ands	r3, r1
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	611a      	str	r2, [r3, #16]
}
 8001e32:	bf00      	nop
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr

08001e3c <HAL_RCC_OscConfig>:
=======
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d54:	887a      	ldrh	r2, [r7, #2]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	041a      	lsls	r2, r3, #16
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	43d9      	mvns	r1, r3
 8001d60:	887b      	ldrh	r3, [r7, #2]
 8001d62:	400b      	ands	r3, r1
 8001d64:	431a      	orrs	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	611a      	str	r2, [r3, #16]
}
 8001d6a:	bf00      	nop
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr

08001d74 <HAL_RCC_OscConfig>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
=======
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e26c      	b.n	8002328 <HAL_RCC_OscConfig+0x4ec>
=======
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e26c      	b.n	8002260 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f000 8087 	beq.w	8001f6a <HAL_RCC_OscConfig+0x12e>
=======
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f000 8087 	beq.w	8001ea2 <HAL_RCC_OscConfig+0x12e>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
<<<<<<< HEAD
 8001e5c:	4b92      	ldr	r3, [pc, #584]	; (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 030c 	and.w	r3, r3, #12
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	d00c      	beq.n	8001e82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e68:	4b8f      	ldr	r3, [pc, #572]	; (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 030c 	and.w	r3, r3, #12
 8001e70:	2b08      	cmp	r3, #8
 8001e72:	d112      	bne.n	8001e9a <HAL_RCC_OscConfig+0x5e>
 8001e74:	4b8c      	ldr	r3, [pc, #560]	; (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e80:	d10b      	bne.n	8001e9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e82:	4b89      	ldr	r3, [pc, #548]	; (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d06c      	beq.n	8001f68 <HAL_RCC_OscConfig+0x12c>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d168      	bne.n	8001f68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e246      	b.n	8002328 <HAL_RCC_OscConfig+0x4ec>
=======
 8001d94:	4b92      	ldr	r3, [pc, #584]	; (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 030c 	and.w	r3, r3, #12
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d00c      	beq.n	8001dba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001da0:	4b8f      	ldr	r3, [pc, #572]	; (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 030c 	and.w	r3, r3, #12
 8001da8:	2b08      	cmp	r3, #8
 8001daa:	d112      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x5e>
 8001dac:	4b8c      	ldr	r3, [pc, #560]	; (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001db8:	d10b      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dba:	4b89      	ldr	r3, [pc, #548]	; (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d06c      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x12c>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d168      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e246      	b.n	8002260 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ea2:	d106      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x76>
 8001ea4:	4b80      	ldr	r3, [pc, #512]	; (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a7f      	ldr	r2, [pc, #508]	; (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001eaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eae:	6013      	str	r3, [r2, #0]
 8001eb0:	e02e      	b.n	8001f10 <HAL_RCC_OscConfig+0xd4>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d10c      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x98>
 8001eba:	4b7b      	ldr	r3, [pc, #492]	; (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a7a      	ldr	r2, [pc, #488]	; (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ec4:	6013      	str	r3, [r2, #0]
 8001ec6:	4b78      	ldr	r3, [pc, #480]	; (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a77      	ldr	r2, [pc, #476]	; (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001ecc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ed0:	6013      	str	r3, [r2, #0]
 8001ed2:	e01d      	b.n	8001f10 <HAL_RCC_OscConfig+0xd4>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001edc:	d10c      	bne.n	8001ef8 <HAL_RCC_OscConfig+0xbc>
 8001ede:	4b72      	ldr	r3, [pc, #456]	; (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a71      	ldr	r2, [pc, #452]	; (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	4b6f      	ldr	r3, [pc, #444]	; (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a6e      	ldr	r2, [pc, #440]	; (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef4:	6013      	str	r3, [r2, #0]
 8001ef6:	e00b      	b.n	8001f10 <HAL_RCC_OscConfig+0xd4>
 8001ef8:	4b6b      	ldr	r3, [pc, #428]	; (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a6a      	ldr	r2, [pc, #424]	; (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f02:	6013      	str	r3, [r2, #0]
 8001f04:	4b68      	ldr	r3, [pc, #416]	; (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a67      	ldr	r2, [pc, #412]	; (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001f0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f0e:	6013      	str	r3, [r2, #0]
=======
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dda:	d106      	bne.n	8001dea <HAL_RCC_OscConfig+0x76>
 8001ddc:	4b80      	ldr	r3, [pc, #512]	; (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a7f      	ldr	r2, [pc, #508]	; (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001de2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001de6:	6013      	str	r3, [r2, #0]
 8001de8:	e02e      	b.n	8001e48 <HAL_RCC_OscConfig+0xd4>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10c      	bne.n	8001e0c <HAL_RCC_OscConfig+0x98>
 8001df2:	4b7b      	ldr	r3, [pc, #492]	; (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a7a      	ldr	r2, [pc, #488]	; (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001df8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dfc:	6013      	str	r3, [r2, #0]
 8001dfe:	4b78      	ldr	r3, [pc, #480]	; (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a77      	ldr	r2, [pc, #476]	; (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001e04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e08:	6013      	str	r3, [r2, #0]
 8001e0a:	e01d      	b.n	8001e48 <HAL_RCC_OscConfig+0xd4>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e14:	d10c      	bne.n	8001e30 <HAL_RCC_OscConfig+0xbc>
 8001e16:	4b72      	ldr	r3, [pc, #456]	; (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a71      	ldr	r2, [pc, #452]	; (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e20:	6013      	str	r3, [r2, #0]
 8001e22:	4b6f      	ldr	r3, [pc, #444]	; (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a6e      	ldr	r2, [pc, #440]	; (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e2c:	6013      	str	r3, [r2, #0]
 8001e2e:	e00b      	b.n	8001e48 <HAL_RCC_OscConfig+0xd4>
 8001e30:	4b6b      	ldr	r3, [pc, #428]	; (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a6a      	ldr	r2, [pc, #424]	; (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001e36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e3a:	6013      	str	r3, [r2, #0]
 8001e3c:	4b68      	ldr	r3, [pc, #416]	; (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a67      	ldr	r2, [pc, #412]	; (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001e42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e46:	6013      	str	r3, [r2, #0]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
<<<<<<< HEAD
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d013      	beq.n	8001f40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f18:	f7ff fcb6 	bl	8001888 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f20:	f7ff fcb2 	bl	8001888 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b64      	cmp	r3, #100	; 0x64
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e1fa      	b.n	8002328 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f32:	4b5d      	ldr	r3, [pc, #372]	; (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d0f0      	beq.n	8001f20 <HAL_RCC_OscConfig+0xe4>
 8001f3e:	e014      	b.n	8001f6a <HAL_RCC_OscConfig+0x12e>
=======
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d013      	beq.n	8001e78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e50:	f7ff fcb6 	bl	80017c0 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e58:	f7ff fcb2 	bl	80017c0 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b64      	cmp	r3, #100	; 0x64
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e1fa      	b.n	8002260 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6a:	4b5d      	ldr	r3, [pc, #372]	; (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d0f0      	beq.n	8001e58 <HAL_RCC_OscConfig+0xe4>
 8001e76:	e014      	b.n	8001ea2 <HAL_RCC_OscConfig+0x12e>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8001f40:	f7ff fca2 	bl	8001888 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f48:	f7ff fc9e 	bl	8001888 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b64      	cmp	r3, #100	; 0x64
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e1e6      	b.n	8002328 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f5a:	4b53      	ldr	r3, [pc, #332]	; (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f0      	bne.n	8001f48 <HAL_RCC_OscConfig+0x10c>
 8001f66:	e000      	b.n	8001f6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f68:	bf00      	nop
=======
 8001e78:	f7ff fca2 	bl	80017c0 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e80:	f7ff fc9e 	bl	80017c0 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b64      	cmp	r3, #100	; 0x64
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e1e6      	b.n	8002260 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e92:	4b53      	ldr	r3, [pc, #332]	; (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1f0      	bne.n	8001e80 <HAL_RCC_OscConfig+0x10c>
 8001e9e:	e000      	b.n	8001ea2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea0:	bf00      	nop
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d063      	beq.n	800203e <HAL_RCC_OscConfig+0x202>
=======
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d063      	beq.n	8001f76 <HAL_RCC_OscConfig+0x202>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
<<<<<<< HEAD
 8001f76:	4b4c      	ldr	r3, [pc, #304]	; (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f003 030c 	and.w	r3, r3, #12
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00b      	beq.n	8001f9a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f82:	4b49      	ldr	r3, [pc, #292]	; (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f003 030c 	and.w	r3, r3, #12
 8001f8a:	2b08      	cmp	r3, #8
 8001f8c:	d11c      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x18c>
 8001f8e:	4b46      	ldr	r3, [pc, #280]	; (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d116      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f9a:	4b43      	ldr	r3, [pc, #268]	; (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d005      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x176>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d001      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e1ba      	b.n	8002328 <HAL_RCC_OscConfig+0x4ec>
=======
 8001eae:	4b4c      	ldr	r3, [pc, #304]	; (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f003 030c 	and.w	r3, r3, #12
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00b      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001eba:	4b49      	ldr	r3, [pc, #292]	; (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f003 030c 	and.w	r3, r3, #12
 8001ec2:	2b08      	cmp	r3, #8
 8001ec4:	d11c      	bne.n	8001f00 <HAL_RCC_OscConfig+0x18c>
 8001ec6:	4b46      	ldr	r3, [pc, #280]	; (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d116      	bne.n	8001f00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ed2:	4b43      	ldr	r3, [pc, #268]	; (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d005      	beq.n	8001eea <HAL_RCC_OscConfig+0x176>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d001      	beq.n	8001eea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e1ba      	b.n	8002260 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8001fb2:	4b3d      	ldr	r3, [pc, #244]	; (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	4939      	ldr	r1, [pc, #228]	; (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fc6:	e03a      	b.n	800203e <HAL_RCC_OscConfig+0x202>
=======
 8001eea:	4b3d      	ldr	r3, [pc, #244]	; (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	4939      	ldr	r1, [pc, #228]	; (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001efe:	e03a      	b.n	8001f76 <HAL_RCC_OscConfig+0x202>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
<<<<<<< HEAD
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d020      	beq.n	8002012 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fd0:	4b36      	ldr	r3, [pc, #216]	; (80020ac <HAL_RCC_OscConfig+0x270>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd6:	f7ff fc57 	bl	8001888 <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fde:	f7ff fc53 	bl	8001888 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e19b      	b.n	8002328 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff0:	4b2d      	ldr	r3, [pc, #180]	; (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0f0      	beq.n	8001fde <HAL_RCC_OscConfig+0x1a2>
=======
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d020      	beq.n	8001f4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f08:	4b36      	ldr	r3, [pc, #216]	; (8001fe4 <HAL_RCC_OscConfig+0x270>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0e:	f7ff fc57 	bl	80017c0 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f16:	f7ff fc53 	bl	80017c0 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e19b      	b.n	8002260 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f28:	4b2d      	ldr	r3, [pc, #180]	; (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0f0      	beq.n	8001f16 <HAL_RCC_OscConfig+0x1a2>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8001ffc:	4b2a      	ldr	r3, [pc, #168]	; (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	695b      	ldr	r3, [r3, #20]
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	4927      	ldr	r1, [pc, #156]	; (80020a8 <HAL_RCC_OscConfig+0x26c>)
 800200c:	4313      	orrs	r3, r2
 800200e:	600b      	str	r3, [r1, #0]
 8002010:	e015      	b.n	800203e <HAL_RCC_OscConfig+0x202>
=======
 8001f34:	4b2a      	ldr	r3, [pc, #168]	; (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	4927      	ldr	r1, [pc, #156]	; (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	600b      	str	r3, [r1, #0]
 8001f48:	e015      	b.n	8001f76 <HAL_RCC_OscConfig+0x202>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 8002012:	4b26      	ldr	r3, [pc, #152]	; (80020ac <HAL_RCC_OscConfig+0x270>)
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002018:	f7ff fc36 	bl	8001888 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002020:	f7ff fc32 	bl	8001888 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e17a      	b.n	8002328 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002032:	4b1d      	ldr	r3, [pc, #116]	; (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f0      	bne.n	8002020 <HAL_RCC_OscConfig+0x1e4>
=======
 8001f4a:	4b26      	ldr	r3, [pc, #152]	; (8001fe4 <HAL_RCC_OscConfig+0x270>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f50:	f7ff fc36 	bl	80017c0 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f58:	f7ff fc32 	bl	80017c0 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e17a      	b.n	8002260 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f6a:	4b1d      	ldr	r3, [pc, #116]	; (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1f0      	bne.n	8001f58 <HAL_RCC_OscConfig+0x1e4>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0308 	and.w	r3, r3, #8
 8002046:	2b00      	cmp	r3, #0
 8002048:	d03a      	beq.n	80020c0 <HAL_RCC_OscConfig+0x284>
=======
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0308 	and.w	r3, r3, #8
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d03a      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x284>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
<<<<<<< HEAD
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d019      	beq.n	8002086 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002052:	4b17      	ldr	r3, [pc, #92]	; (80020b0 <HAL_RCC_OscConfig+0x274>)
 8002054:	2201      	movs	r2, #1
 8002056:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002058:	f7ff fc16 	bl	8001888 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002060:	f7ff fc12 	bl	8001888 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e15a      	b.n	8002328 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002072:	4b0d      	ldr	r3, [pc, #52]	; (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8002074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d0f0      	beq.n	8002060 <HAL_RCC_OscConfig+0x224>
=======
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d019      	beq.n	8001fbe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f8a:	4b17      	ldr	r3, [pc, #92]	; (8001fe8 <HAL_RCC_OscConfig+0x274>)
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f90:	f7ff fc16 	bl	80017c0 <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f98:	f7ff fc12 	bl	80017c0 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e15a      	b.n	8002260 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001faa:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d0f0      	beq.n	8001f98 <HAL_RCC_OscConfig+0x224>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
<<<<<<< HEAD
 800207e:	2001      	movs	r0, #1
 8002080:	f000 faa6 	bl	80025d0 <RCC_Delay>
 8002084:	e01c      	b.n	80020c0 <HAL_RCC_OscConfig+0x284>
=======
 8001fb6:	2001      	movs	r0, #1
 8001fb8:	f000 faa6 	bl	8002508 <RCC_Delay>
 8001fbc:	e01c      	b.n	8001ff8 <HAL_RCC_OscConfig+0x284>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 8002086:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <HAL_RCC_OscConfig+0x274>)
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800208c:	f7ff fbfc 	bl	8001888 <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002092:	e00f      	b.n	80020b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002094:	f7ff fbf8 	bl	8001888 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d908      	bls.n	80020b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e140      	b.n	8002328 <HAL_RCC_OscConfig+0x4ec>
 80020a6:	bf00      	nop
 80020a8:	40021000 	.word	0x40021000
 80020ac:	42420000 	.word	0x42420000
 80020b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b4:	4b9e      	ldr	r3, [pc, #632]	; (8002330 <HAL_RCC_OscConfig+0x4f4>)
 80020b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1e9      	bne.n	8002094 <HAL_RCC_OscConfig+0x258>
=======
 8001fbe:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <HAL_RCC_OscConfig+0x274>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc4:	f7ff fbfc 	bl	80017c0 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fca:	e00f      	b.n	8001fec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fcc:	f7ff fbf8 	bl	80017c0 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d908      	bls.n	8001fec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e140      	b.n	8002260 <HAL_RCC_OscConfig+0x4ec>
 8001fde:	bf00      	nop
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	42420000 	.word	0x42420000
 8001fe8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fec:	4b9e      	ldr	r3, [pc, #632]	; (8002268 <HAL_RCC_OscConfig+0x4f4>)
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1e9      	bne.n	8001fcc <HAL_RCC_OscConfig+0x258>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 80a6 	beq.w	800221a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ce:	2300      	movs	r3, #0
 80020d0:	75fb      	strb	r3, [r7, #23]
=======
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0304 	and.w	r3, r3, #4
 8002000:	2b00      	cmp	r3, #0
 8002002:	f000 80a6 	beq.w	8002152 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002006:	2300      	movs	r3, #0
 8002008:	75fb      	strb	r3, [r7, #23]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 80020d2:	4b97      	ldr	r3, [pc, #604]	; (8002330 <HAL_RCC_OscConfig+0x4f4>)
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10d      	bne.n	80020fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020de:	4b94      	ldr	r3, [pc, #592]	; (8002330 <HAL_RCC_OscConfig+0x4f4>)
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	4a93      	ldr	r2, [pc, #588]	; (8002330 <HAL_RCC_OscConfig+0x4f4>)
 80020e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e8:	61d3      	str	r3, [r2, #28]
 80020ea:	4b91      	ldr	r3, [pc, #580]	; (8002330 <HAL_RCC_OscConfig+0x4f4>)
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f2:	60bb      	str	r3, [r7, #8]
 80020f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020f6:	2301      	movs	r3, #1
 80020f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020fa:	4b8e      	ldr	r3, [pc, #568]	; (8002334 <HAL_RCC_OscConfig+0x4f8>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002102:	2b00      	cmp	r3, #0
 8002104:	d118      	bne.n	8002138 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002106:	4b8b      	ldr	r3, [pc, #556]	; (8002334 <HAL_RCC_OscConfig+0x4f8>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a8a      	ldr	r2, [pc, #552]	; (8002334 <HAL_RCC_OscConfig+0x4f8>)
 800210c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002110:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002112:	f7ff fbb9 	bl	8001888 <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002118:	e008      	b.n	800212c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800211a:	f7ff fbb5 	bl	8001888 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b64      	cmp	r3, #100	; 0x64
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e0fd      	b.n	8002328 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212c:	4b81      	ldr	r3, [pc, #516]	; (8002334 <HAL_RCC_OscConfig+0x4f8>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0f0      	beq.n	800211a <HAL_RCC_OscConfig+0x2de>
=======
 800200a:	4b97      	ldr	r3, [pc, #604]	; (8002268 <HAL_RCC_OscConfig+0x4f4>)
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10d      	bne.n	8002032 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002016:	4b94      	ldr	r3, [pc, #592]	; (8002268 <HAL_RCC_OscConfig+0x4f4>)
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	4a93      	ldr	r2, [pc, #588]	; (8002268 <HAL_RCC_OscConfig+0x4f4>)
 800201c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002020:	61d3      	str	r3, [r2, #28]
 8002022:	4b91      	ldr	r3, [pc, #580]	; (8002268 <HAL_RCC_OscConfig+0x4f4>)
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202a:	60bb      	str	r3, [r7, #8]
 800202c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800202e:	2301      	movs	r3, #1
 8002030:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002032:	4b8e      	ldr	r3, [pc, #568]	; (800226c <HAL_RCC_OscConfig+0x4f8>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203a:	2b00      	cmp	r3, #0
 800203c:	d118      	bne.n	8002070 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800203e:	4b8b      	ldr	r3, [pc, #556]	; (800226c <HAL_RCC_OscConfig+0x4f8>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a8a      	ldr	r2, [pc, #552]	; (800226c <HAL_RCC_OscConfig+0x4f8>)
 8002044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002048:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800204a:	f7ff fbb9 	bl	80017c0 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002052:	f7ff fbb5 	bl	80017c0 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b64      	cmp	r3, #100	; 0x64
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e0fd      	b.n	8002260 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002064:	4b81      	ldr	r3, [pc, #516]	; (800226c <HAL_RCC_OscConfig+0x4f8>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0f0      	beq.n	8002052 <HAL_RCC_OscConfig+0x2de>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d106      	bne.n	800214e <HAL_RCC_OscConfig+0x312>
 8002140:	4b7b      	ldr	r3, [pc, #492]	; (8002330 <HAL_RCC_OscConfig+0x4f4>)
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	4a7a      	ldr	r2, [pc, #488]	; (8002330 <HAL_RCC_OscConfig+0x4f4>)
 8002146:	f043 0301 	orr.w	r3, r3, #1
 800214a:	6213      	str	r3, [r2, #32]
 800214c:	e02d      	b.n	80021aa <HAL_RCC_OscConfig+0x36e>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10c      	bne.n	8002170 <HAL_RCC_OscConfig+0x334>
 8002156:	4b76      	ldr	r3, [pc, #472]	; (8002330 <HAL_RCC_OscConfig+0x4f4>)
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	4a75      	ldr	r2, [pc, #468]	; (8002330 <HAL_RCC_OscConfig+0x4f4>)
 800215c:	f023 0301 	bic.w	r3, r3, #1
 8002160:	6213      	str	r3, [r2, #32]
 8002162:	4b73      	ldr	r3, [pc, #460]	; (8002330 <HAL_RCC_OscConfig+0x4f4>)
 8002164:	6a1b      	ldr	r3, [r3, #32]
 8002166:	4a72      	ldr	r2, [pc, #456]	; (8002330 <HAL_RCC_OscConfig+0x4f4>)
 8002168:	f023 0304 	bic.w	r3, r3, #4
 800216c:	6213      	str	r3, [r2, #32]
 800216e:	e01c      	b.n	80021aa <HAL_RCC_OscConfig+0x36e>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	2b05      	cmp	r3, #5
 8002176:	d10c      	bne.n	8002192 <HAL_RCC_OscConfig+0x356>
 8002178:	4b6d      	ldr	r3, [pc, #436]	; (8002330 <HAL_RCC_OscConfig+0x4f4>)
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	4a6c      	ldr	r2, [pc, #432]	; (8002330 <HAL_RCC_OscConfig+0x4f4>)
 800217e:	f043 0304 	orr.w	r3, r3, #4
 8002182:	6213      	str	r3, [r2, #32]
 8002184:	4b6a      	ldr	r3, [pc, #424]	; (8002330 <HAL_RCC_OscConfig+0x4f4>)
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	4a69      	ldr	r2, [pc, #420]	; (8002330 <HAL_RCC_OscConfig+0x4f4>)
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	6213      	str	r3, [r2, #32]
 8002190:	e00b      	b.n	80021aa <HAL_RCC_OscConfig+0x36e>
 8002192:	4b67      	ldr	r3, [pc, #412]	; (8002330 <HAL_RCC_OscConfig+0x4f4>)
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	4a66      	ldr	r2, [pc, #408]	; (8002330 <HAL_RCC_OscConfig+0x4f4>)
 8002198:	f023 0301 	bic.w	r3, r3, #1
 800219c:	6213      	str	r3, [r2, #32]
 800219e:	4b64      	ldr	r3, [pc, #400]	; (8002330 <HAL_RCC_OscConfig+0x4f4>)
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	4a63      	ldr	r2, [pc, #396]	; (8002330 <HAL_RCC_OscConfig+0x4f4>)
 80021a4:	f023 0304 	bic.w	r3, r3, #4
 80021a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d015      	beq.n	80021de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b2:	f7ff fb69 	bl	8001888 <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b8:	e00a      	b.n	80021d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ba:	f7ff fb65 	bl	8001888 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e0ab      	b.n	8002328 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d0:	4b57      	ldr	r3, [pc, #348]	; (8002330 <HAL_RCC_OscConfig+0x4f4>)
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0ee      	beq.n	80021ba <HAL_RCC_OscConfig+0x37e>
 80021dc:	e014      	b.n	8002208 <HAL_RCC_OscConfig+0x3cc>
=======
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d106      	bne.n	8002086 <HAL_RCC_OscConfig+0x312>
 8002078:	4b7b      	ldr	r3, [pc, #492]	; (8002268 <HAL_RCC_OscConfig+0x4f4>)
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	4a7a      	ldr	r2, [pc, #488]	; (8002268 <HAL_RCC_OscConfig+0x4f4>)
 800207e:	f043 0301 	orr.w	r3, r3, #1
 8002082:	6213      	str	r3, [r2, #32]
 8002084:	e02d      	b.n	80020e2 <HAL_RCC_OscConfig+0x36e>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10c      	bne.n	80020a8 <HAL_RCC_OscConfig+0x334>
 800208e:	4b76      	ldr	r3, [pc, #472]	; (8002268 <HAL_RCC_OscConfig+0x4f4>)
 8002090:	6a1b      	ldr	r3, [r3, #32]
 8002092:	4a75      	ldr	r2, [pc, #468]	; (8002268 <HAL_RCC_OscConfig+0x4f4>)
 8002094:	f023 0301 	bic.w	r3, r3, #1
 8002098:	6213      	str	r3, [r2, #32]
 800209a:	4b73      	ldr	r3, [pc, #460]	; (8002268 <HAL_RCC_OscConfig+0x4f4>)
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	4a72      	ldr	r2, [pc, #456]	; (8002268 <HAL_RCC_OscConfig+0x4f4>)
 80020a0:	f023 0304 	bic.w	r3, r3, #4
 80020a4:	6213      	str	r3, [r2, #32]
 80020a6:	e01c      	b.n	80020e2 <HAL_RCC_OscConfig+0x36e>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	2b05      	cmp	r3, #5
 80020ae:	d10c      	bne.n	80020ca <HAL_RCC_OscConfig+0x356>
 80020b0:	4b6d      	ldr	r3, [pc, #436]	; (8002268 <HAL_RCC_OscConfig+0x4f4>)
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	4a6c      	ldr	r2, [pc, #432]	; (8002268 <HAL_RCC_OscConfig+0x4f4>)
 80020b6:	f043 0304 	orr.w	r3, r3, #4
 80020ba:	6213      	str	r3, [r2, #32]
 80020bc:	4b6a      	ldr	r3, [pc, #424]	; (8002268 <HAL_RCC_OscConfig+0x4f4>)
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	4a69      	ldr	r2, [pc, #420]	; (8002268 <HAL_RCC_OscConfig+0x4f4>)
 80020c2:	f043 0301 	orr.w	r3, r3, #1
 80020c6:	6213      	str	r3, [r2, #32]
 80020c8:	e00b      	b.n	80020e2 <HAL_RCC_OscConfig+0x36e>
 80020ca:	4b67      	ldr	r3, [pc, #412]	; (8002268 <HAL_RCC_OscConfig+0x4f4>)
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	4a66      	ldr	r2, [pc, #408]	; (8002268 <HAL_RCC_OscConfig+0x4f4>)
 80020d0:	f023 0301 	bic.w	r3, r3, #1
 80020d4:	6213      	str	r3, [r2, #32]
 80020d6:	4b64      	ldr	r3, [pc, #400]	; (8002268 <HAL_RCC_OscConfig+0x4f4>)
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	4a63      	ldr	r2, [pc, #396]	; (8002268 <HAL_RCC_OscConfig+0x4f4>)
 80020dc:	f023 0304 	bic.w	r3, r3, #4
 80020e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d015      	beq.n	8002116 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ea:	f7ff fb69 	bl	80017c0 <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f0:	e00a      	b.n	8002108 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020f2:	f7ff fb65 	bl	80017c0 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002100:	4293      	cmp	r3, r2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e0ab      	b.n	8002260 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002108:	4b57      	ldr	r3, [pc, #348]	; (8002268 <HAL_RCC_OscConfig+0x4f4>)
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0ee      	beq.n	80020f2 <HAL_RCC_OscConfig+0x37e>
 8002114:	e014      	b.n	8002140 <HAL_RCC_OscConfig+0x3cc>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 80021de:	f7ff fb53 	bl	8001888 <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e4:	e00a      	b.n	80021fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021e6:	f7ff fb4f 	bl	8001888 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e095      	b.n	8002328 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021fc:	4b4c      	ldr	r3, [pc, #304]	; (8002330 <HAL_RCC_OscConfig+0x4f4>)
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1ee      	bne.n	80021e6 <HAL_RCC_OscConfig+0x3aa>
=======
 8002116:	f7ff fb53 	bl	80017c0 <HAL_GetTick>
 800211a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800211c:	e00a      	b.n	8002134 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800211e:	f7ff fb4f 	bl	80017c0 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	f241 3288 	movw	r2, #5000	; 0x1388
 800212c:	4293      	cmp	r3, r2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e095      	b.n	8002260 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002134:	4b4c      	ldr	r3, [pc, #304]	; (8002268 <HAL_RCC_OscConfig+0x4f4>)
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1ee      	bne.n	800211e <HAL_RCC_OscConfig+0x3aa>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
<<<<<<< HEAD
 8002208:	7dfb      	ldrb	r3, [r7, #23]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d105      	bne.n	800221a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800220e:	4b48      	ldr	r3, [pc, #288]	; (8002330 <HAL_RCC_OscConfig+0x4f4>)
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	4a47      	ldr	r2, [pc, #284]	; (8002330 <HAL_RCC_OscConfig+0x4f4>)
 8002214:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002218:	61d3      	str	r3, [r2, #28]
=======
 8002140:	7dfb      	ldrb	r3, [r7, #23]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d105      	bne.n	8002152 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002146:	4b48      	ldr	r3, [pc, #288]	; (8002268 <HAL_RCC_OscConfig+0x4f4>)
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	4a47      	ldr	r2, [pc, #284]	; (8002268 <HAL_RCC_OscConfig+0x4f4>)
 800214c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002150:	61d3      	str	r3, [r2, #28]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 8081 	beq.w	8002326 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002224:	4b42      	ldr	r3, [pc, #264]	; (8002330 <HAL_RCC_OscConfig+0x4f4>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 030c 	and.w	r3, r3, #12
 800222c:	2b08      	cmp	r3, #8
 800222e:	d061      	beq.n	80022f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69db      	ldr	r3, [r3, #28]
 8002234:	2b02      	cmp	r3, #2
 8002236:	d146      	bne.n	80022c6 <HAL_RCC_OscConfig+0x48a>
=======
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 8081 	beq.w	800225e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800215c:	4b42      	ldr	r3, [pc, #264]	; (8002268 <HAL_RCC_OscConfig+0x4f4>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 030c 	and.w	r3, r3, #12
 8002164:	2b08      	cmp	r3, #8
 8002166:	d061      	beq.n	800222c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69db      	ldr	r3, [r3, #28]
 800216c:	2b02      	cmp	r3, #2
 800216e:	d146      	bne.n	80021fe <HAL_RCC_OscConfig+0x48a>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8002238:	4b3f      	ldr	r3, [pc, #252]	; (8002338 <HAL_RCC_OscConfig+0x4fc>)
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223e:	f7ff fb23 	bl	8001888 <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002246:	f7ff fb1f 	bl	8001888 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e067      	b.n	8002328 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002258:	4b35      	ldr	r3, [pc, #212]	; (8002330 <HAL_RCC_OscConfig+0x4f4>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1f0      	bne.n	8002246 <HAL_RCC_OscConfig+0x40a>
=======
 8002170:	4b3f      	ldr	r3, [pc, #252]	; (8002270 <HAL_RCC_OscConfig+0x4fc>)
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002176:	f7ff fb23 	bl	80017c0 <HAL_GetTick>
 800217a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800217c:	e008      	b.n	8002190 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800217e:	f7ff fb1f 	bl	80017c0 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e067      	b.n	8002260 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002190:	4b35      	ldr	r3, [pc, #212]	; (8002268 <HAL_RCC_OscConfig+0x4f4>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1f0      	bne.n	800217e <HAL_RCC_OscConfig+0x40a>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
<<<<<<< HEAD
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800226c:	d108      	bne.n	8002280 <HAL_RCC_OscConfig+0x444>
=======
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a4:	d108      	bne.n	80021b8 <HAL_RCC_OscConfig+0x444>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
<<<<<<< HEAD
 800226e:	4b30      	ldr	r3, [pc, #192]	; (8002330 <HAL_RCC_OscConfig+0x4f4>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	492d      	ldr	r1, [pc, #180]	; (8002330 <HAL_RCC_OscConfig+0x4f4>)
 800227c:	4313      	orrs	r3, r2
 800227e:	604b      	str	r3, [r1, #4]
=======
 80021a6:	4b30      	ldr	r3, [pc, #192]	; (8002268 <HAL_RCC_OscConfig+0x4f4>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	492d      	ldr	r1, [pc, #180]	; (8002268 <HAL_RCC_OscConfig+0x4f4>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	604b      	str	r3, [r1, #4]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< HEAD
 8002280:	4b2b      	ldr	r3, [pc, #172]	; (8002330 <HAL_RCC_OscConfig+0x4f4>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a19      	ldr	r1, [r3, #32]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002290:	430b      	orrs	r3, r1
 8002292:	4927      	ldr	r1, [pc, #156]	; (8002330 <HAL_RCC_OscConfig+0x4f4>)
 8002294:	4313      	orrs	r3, r2
 8002296:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002298:	4b27      	ldr	r3, [pc, #156]	; (8002338 <HAL_RCC_OscConfig+0x4fc>)
 800229a:	2201      	movs	r2, #1
 800229c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229e:	f7ff faf3 	bl	8001888 <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a6:	f7ff faef 	bl	8001888 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e037      	b.n	8002328 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022b8:	4b1d      	ldr	r3, [pc, #116]	; (8002330 <HAL_RCC_OscConfig+0x4f4>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0f0      	beq.n	80022a6 <HAL_RCC_OscConfig+0x46a>
 80022c4:	e02f      	b.n	8002326 <HAL_RCC_OscConfig+0x4ea>
=======
 80021b8:	4b2b      	ldr	r3, [pc, #172]	; (8002268 <HAL_RCC_OscConfig+0x4f4>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a19      	ldr	r1, [r3, #32]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c8:	430b      	orrs	r3, r1
 80021ca:	4927      	ldr	r1, [pc, #156]	; (8002268 <HAL_RCC_OscConfig+0x4f4>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021d0:	4b27      	ldr	r3, [pc, #156]	; (8002270 <HAL_RCC_OscConfig+0x4fc>)
 80021d2:	2201      	movs	r2, #1
 80021d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d6:	f7ff faf3 	bl	80017c0 <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021dc:	e008      	b.n	80021f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021de:	f7ff faef 	bl	80017c0 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e037      	b.n	8002260 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021f0:	4b1d      	ldr	r3, [pc, #116]	; (8002268 <HAL_RCC_OscConfig+0x4f4>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0f0      	beq.n	80021de <HAL_RCC_OscConfig+0x46a>
 80021fc:	e02f      	b.n	800225e <HAL_RCC_OscConfig+0x4ea>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 80022c6:	4b1c      	ldr	r3, [pc, #112]	; (8002338 <HAL_RCC_OscConfig+0x4fc>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022cc:	f7ff fadc 	bl	8001888 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d4:	f7ff fad8 	bl	8001888 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e020      	b.n	8002328 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e6:	4b12      	ldr	r3, [pc, #72]	; (8002330 <HAL_RCC_OscConfig+0x4f4>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1f0      	bne.n	80022d4 <HAL_RCC_OscConfig+0x498>
 80022f2:	e018      	b.n	8002326 <HAL_RCC_OscConfig+0x4ea>
=======
 80021fe:	4b1c      	ldr	r3, [pc, #112]	; (8002270 <HAL_RCC_OscConfig+0x4fc>)
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002204:	f7ff fadc 	bl	80017c0 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800220c:	f7ff fad8 	bl	80017c0 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e020      	b.n	8002260 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800221e:	4b12      	ldr	r3, [pc, #72]	; (8002268 <HAL_RCC_OscConfig+0x4f4>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f0      	bne.n	800220c <HAL_RCC_OscConfig+0x498>
 800222a:	e018      	b.n	800225e <HAL_RCC_OscConfig+0x4ea>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d101      	bne.n	8002300 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e013      	b.n	8002328 <HAL_RCC_OscConfig+0x4ec>
=======
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	69db      	ldr	r3, [r3, #28]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d101      	bne.n	8002238 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e013      	b.n	8002260 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
<<<<<<< HEAD
 8002300:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <HAL_RCC_OscConfig+0x4f4>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	429a      	cmp	r2, r3
 8002312:	d106      	bne.n	8002322 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800231e:	429a      	cmp	r2, r3
 8002320:	d001      	beq.n	8002326 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e000      	b.n	8002328 <HAL_RCC_OscConfig+0x4ec>
=======
 8002238:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <HAL_RCC_OscConfig+0x4f4>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	429a      	cmp	r2, r3
 800224a:	d106      	bne.n	800225a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002256:	429a      	cmp	r2, r3
 8002258:	d001      	beq.n	800225e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e000      	b.n	8002260 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
        }
      }
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40021000 	.word	0x40021000
 8002334:	40007000 	.word	0x40007000
 8002338:	42420060 	.word	0x42420060

0800233c <HAL_RCC_ClockConfig>:
=======
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3718      	adds	r7, #24
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40021000 	.word	0x40021000
 800226c:	40007000 	.word	0x40007000
 8002270:	42420060 	.word	0x42420060

08002274 <HAL_RCC_ClockConfig>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
=======
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e0d0      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1b6>
=======
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d101      	bne.n	8002288 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e0d0      	b.n	800242a <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8002350:	4b6a      	ldr	r3, [pc, #424]	; (80024fc <HAL_RCC_ClockConfig+0x1c0>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	d910      	bls.n	8002380 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235e:	4b67      	ldr	r3, [pc, #412]	; (80024fc <HAL_RCC_ClockConfig+0x1c0>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f023 0207 	bic.w	r2, r3, #7
 8002366:	4965      	ldr	r1, [pc, #404]	; (80024fc <HAL_RCC_ClockConfig+0x1c0>)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	4313      	orrs	r3, r2
 800236c:	600b      	str	r3, [r1, #0]
=======
 8002288:	4b6a      	ldr	r3, [pc, #424]	; (8002434 <HAL_RCC_ClockConfig+0x1c0>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0307 	and.w	r3, r3, #7
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	429a      	cmp	r2, r3
 8002294:	d910      	bls.n	80022b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002296:	4b67      	ldr	r3, [pc, #412]	; (8002434 <HAL_RCC_ClockConfig+0x1c0>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f023 0207 	bic.w	r2, r3, #7
 800229e:	4965      	ldr	r1, [pc, #404]	; (8002434 <HAL_RCC_ClockConfig+0x1c0>)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	600b      	str	r3, [r1, #0]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 800236e:	4b63      	ldr	r3, [pc, #396]	; (80024fc <HAL_RCC_ClockConfig+0x1c0>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	429a      	cmp	r2, r3
 800237a:	d001      	beq.n	8002380 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e0b8      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1b6>
=======
 80022a6:	4b63      	ldr	r3, [pc, #396]	; (8002434 <HAL_RCC_ClockConfig+0x1c0>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0307 	and.w	r3, r3, #7
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d001      	beq.n	80022b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e0b8      	b.n	800242a <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d020      	beq.n	80023ce <HAL_RCC_ClockConfig+0x92>
=======
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d020      	beq.n	8002306 <HAL_RCC_ClockConfig+0x92>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b00      	cmp	r3, #0
 8002396:	d005      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002398:	4b59      	ldr	r3, [pc, #356]	; (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	4a58      	ldr	r2, [pc, #352]	; (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 800239e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0308 	and.w	r3, r3, #8
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d005      	beq.n	80023bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023b0:	4b53      	ldr	r3, [pc, #332]	; (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	4a52      	ldr	r2, [pc, #328]	; (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80023b6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023ba:	6053      	str	r3, [r2, #4]
=======
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0304 	and.w	r3, r3, #4
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d005      	beq.n	80022dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022d0:	4b59      	ldr	r3, [pc, #356]	; (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	4a58      	ldr	r2, [pc, #352]	; (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 80022d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0308 	and.w	r3, r3, #8
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d005      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022e8:	4b53      	ldr	r3, [pc, #332]	; (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	4a52      	ldr	r2, [pc, #328]	; (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 80022ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022f2:	6053      	str	r3, [r2, #4]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 80023bc:	4b50      	ldr	r3, [pc, #320]	; (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	494d      	ldr	r1, [pc, #308]	; (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	604b      	str	r3, [r1, #4]
=======
 80022f4:	4b50      	ldr	r3, [pc, #320]	; (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	494d      	ldr	r1, [pc, #308]	; (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 8002302:	4313      	orrs	r3, r2
 8002304:	604b      	str	r3, [r1, #4]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d040      	beq.n	800245c <HAL_RCC_ClockConfig+0x120>
=======
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d040      	beq.n	8002394 <HAL_RCC_ClockConfig+0x120>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d107      	bne.n	80023f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e2:	4b47      	ldr	r3, [pc, #284]	; (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d115      	bne.n	800241a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e07f      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1b6>
=======
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d107      	bne.n	800232a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231a:	4b47      	ldr	r3, [pc, #284]	; (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d115      	bne.n	8002352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e07f      	b.n	800242a <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< HEAD
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d107      	bne.n	800240a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023fa:	4b41      	ldr	r3, [pc, #260]	; (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d109      	bne.n	800241a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e073      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1b6>
=======
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b02      	cmp	r3, #2
 8002330:	d107      	bne.n	8002342 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002332:	4b41      	ldr	r3, [pc, #260]	; (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d109      	bne.n	8002352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e073      	b.n	800242a <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 800240a:	4b3d      	ldr	r3, [pc, #244]	; (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e06b      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800241a:	4b39      	ldr	r3, [pc, #228]	; (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f023 0203 	bic.w	r2, r3, #3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	4936      	ldr	r1, [pc, #216]	; (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 8002428:	4313      	orrs	r3, r2
 800242a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800242c:	f7ff fa2c 	bl	8001888 <HAL_GetTick>
 8002430:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002432:	e00a      	b.n	800244a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002434:	f7ff fa28 	bl	8001888 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002442:	4293      	cmp	r3, r2
 8002444:	d901      	bls.n	800244a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e053      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244a:	4b2d      	ldr	r3, [pc, #180]	; (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 020c 	and.w	r2, r3, #12
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	429a      	cmp	r2, r3
 800245a:	d1eb      	bne.n	8002434 <HAL_RCC_ClockConfig+0xf8>
=======
 8002342:	4b3d      	ldr	r3, [pc, #244]	; (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e06b      	b.n	800242a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002352:	4b39      	ldr	r3, [pc, #228]	; (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f023 0203 	bic.w	r2, r3, #3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	4936      	ldr	r1, [pc, #216]	; (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 8002360:	4313      	orrs	r3, r2
 8002362:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002364:	f7ff fa2c 	bl	80017c0 <HAL_GetTick>
 8002368:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800236a:	e00a      	b.n	8002382 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800236c:	f7ff fa28 	bl	80017c0 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	f241 3288 	movw	r2, #5000	; 0x1388
 800237a:	4293      	cmp	r3, r2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e053      	b.n	800242a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002382:	4b2d      	ldr	r3, [pc, #180]	; (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f003 020c 	and.w	r2, r3, #12
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	429a      	cmp	r2, r3
 8002392:	d1eb      	bne.n	800236c <HAL_RCC_ClockConfig+0xf8>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 800245c:	4b27      	ldr	r3, [pc, #156]	; (80024fc <HAL_RCC_ClockConfig+0x1c0>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	429a      	cmp	r2, r3
 8002468:	d210      	bcs.n	800248c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246a:	4b24      	ldr	r3, [pc, #144]	; (80024fc <HAL_RCC_ClockConfig+0x1c0>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f023 0207 	bic.w	r2, r3, #7
 8002472:	4922      	ldr	r1, [pc, #136]	; (80024fc <HAL_RCC_ClockConfig+0x1c0>)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	4313      	orrs	r3, r2
 8002478:	600b      	str	r3, [r1, #0]
=======
 8002394:	4b27      	ldr	r3, [pc, #156]	; (8002434 <HAL_RCC_ClockConfig+0x1c0>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d210      	bcs.n	80023c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a2:	4b24      	ldr	r3, [pc, #144]	; (8002434 <HAL_RCC_ClockConfig+0x1c0>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f023 0207 	bic.w	r2, r3, #7
 80023aa:	4922      	ldr	r1, [pc, #136]	; (8002434 <HAL_RCC_ClockConfig+0x1c0>)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	600b      	str	r3, [r1, #0]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 800247a:	4b20      	ldr	r3, [pc, #128]	; (80024fc <HAL_RCC_ClockConfig+0x1c0>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	429a      	cmp	r2, r3
 8002486:	d001      	beq.n	800248c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e032      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1b6>
=======
 80023b2:	4b20      	ldr	r3, [pc, #128]	; (8002434 <HAL_RCC_ClockConfig+0x1c0>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d001      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e032      	b.n	800242a <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b00      	cmp	r3, #0
 8002496:	d008      	beq.n	80024aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002498:	4b19      	ldr	r3, [pc, #100]	; (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	4916      	ldr	r1, [pc, #88]	; (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	604b      	str	r3, [r1, #4]
=======
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d008      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023d0:	4b19      	ldr	r3, [pc, #100]	; (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	4916      	ldr	r1, [pc, #88]	; (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	604b      	str	r3, [r1, #4]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d009      	beq.n	80024ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024b6:	4b12      	ldr	r3, [pc, #72]	; (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	490e      	ldr	r1, [pc, #56]	; (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	604b      	str	r3, [r1, #4]
=======
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0308 	and.w	r3, r3, #8
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d009      	beq.n	8002402 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023ee:	4b12      	ldr	r3, [pc, #72]	; (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	490e      	ldr	r1, [pc, #56]	; (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	604b      	str	r3, [r1, #4]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
 80024ca:	f000 f821 	bl	8002510 <HAL_RCC_GetSysClockFreq>
 80024ce:	4602      	mov	r2, r0
 80024d0:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <HAL_RCC_ClockConfig+0x1c4>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	091b      	lsrs	r3, r3, #4
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	490a      	ldr	r1, [pc, #40]	; (8002504 <HAL_RCC_ClockConfig+0x1c8>)
 80024dc:	5ccb      	ldrb	r3, [r1, r3]
 80024de:	fa22 f303 	lsr.w	r3, r2, r3
 80024e2:	4a09      	ldr	r2, [pc, #36]	; (8002508 <HAL_RCC_ClockConfig+0x1cc>)
 80024e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024e6:	4b09      	ldr	r3, [pc, #36]	; (800250c <HAL_RCC_ClockConfig+0x1d0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff f98a 	bl	8001804 <HAL_InitTick>

  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40022000 	.word	0x40022000
 8002500:	40021000 	.word	0x40021000
 8002504:	08002e54 	.word	0x08002e54
 8002508:	20000024 	.word	0x20000024
 800250c:	20000028 	.word	0x20000028

08002510 <HAL_RCC_GetSysClockFreq>:
=======
 8002402:	f000 f821 	bl	8002448 <HAL_RCC_GetSysClockFreq>
 8002406:	4602      	mov	r2, r0
 8002408:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	091b      	lsrs	r3, r3, #4
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	490a      	ldr	r1, [pc, #40]	; (800243c <HAL_RCC_ClockConfig+0x1c8>)
 8002414:	5ccb      	ldrb	r3, [r1, r3]
 8002416:	fa22 f303 	lsr.w	r3, r2, r3
 800241a:	4a09      	ldr	r2, [pc, #36]	; (8002440 <HAL_RCC_ClockConfig+0x1cc>)
 800241c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800241e:	4b09      	ldr	r3, [pc, #36]	; (8002444 <HAL_RCC_ClockConfig+0x1d0>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff f98a 	bl	800173c <HAL_InitTick>

  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40022000 	.word	0x40022000
 8002438:	40021000 	.word	0x40021000
 800243c:	08002d8c 	.word	0x08002d8c
 8002440:	20000024 	.word	0x20000024
 8002444:	20000028 	.word	0x20000028

08002448 <HAL_RCC_GetSysClockFreq>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 8002510:	b490      	push	{r4, r7}
 8002512:	b08a      	sub	sp, #40	; 0x28
 8002514:	af00      	add	r7, sp, #0
=======
 8002448:	b490      	push	{r4, r7}
 800244a:	b08a      	sub	sp, #40	; 0x28
 800244c:	af00      	add	r7, sp, #0
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
<<<<<<< HEAD
 8002516:	4b2a      	ldr	r3, [pc, #168]	; (80025c0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002518:	1d3c      	adds	r4, r7, #4
 800251a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800251c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
=======
 800244e:	4b2a      	ldr	r3, [pc, #168]	; (80024f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002450:	1d3c      	adds	r4, r7, #4
 8002452:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002454:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
<<<<<<< HEAD
 8002520:	f240 2301 	movw	r3, #513	; 0x201
 8002524:	803b      	strh	r3, [r7, #0]
=======
 8002458:	f240 2301 	movw	r3, #513	; 0x201
 800245c:	803b      	strh	r3, [r7, #0]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
<<<<<<< HEAD
 8002526:	2300      	movs	r3, #0
 8002528:	61fb      	str	r3, [r7, #28]
 800252a:	2300      	movs	r3, #0
 800252c:	61bb      	str	r3, [r7, #24]
 800252e:	2300      	movs	r3, #0
 8002530:	627b      	str	r3, [r7, #36]	; 0x24
 8002532:	2300      	movs	r3, #0
 8002534:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002536:	2300      	movs	r3, #0
 8002538:	623b      	str	r3, [r7, #32]
=======
 800245e:	2300      	movs	r3, #0
 8002460:	61fb      	str	r3, [r7, #28]
 8002462:	2300      	movs	r3, #0
 8002464:	61bb      	str	r3, [r7, #24]
 8002466:	2300      	movs	r3, #0
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800246e:	2300      	movs	r3, #0
 8002470:	623b      	str	r3, [r7, #32]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
<<<<<<< HEAD
 800253a:	4b22      	ldr	r3, [pc, #136]	; (80025c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	f003 030c 	and.w	r3, r3, #12
 8002546:	2b04      	cmp	r3, #4
 8002548:	d002      	beq.n	8002550 <HAL_RCC_GetSysClockFreq+0x40>
 800254a:	2b08      	cmp	r3, #8
 800254c:	d003      	beq.n	8002556 <HAL_RCC_GetSysClockFreq+0x46>
 800254e:	e02d      	b.n	80025ac <HAL_RCC_GetSysClockFreq+0x9c>
=======
 8002472:	4b22      	ldr	r3, [pc, #136]	; (80024fc <HAL_RCC_GetSysClockFreq+0xb4>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f003 030c 	and.w	r3, r3, #12
 800247e:	2b04      	cmp	r3, #4
 8002480:	d002      	beq.n	8002488 <HAL_RCC_GetSysClockFreq+0x40>
 8002482:	2b08      	cmp	r3, #8
 8002484:	d003      	beq.n	800248e <HAL_RCC_GetSysClockFreq+0x46>
 8002486:	e02d      	b.n	80024e4 <HAL_RCC_GetSysClockFreq+0x9c>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 8002550:	4b1d      	ldr	r3, [pc, #116]	; (80025c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002552:	623b      	str	r3, [r7, #32]
      break;
 8002554:	e02d      	b.n	80025b2 <HAL_RCC_GetSysClockFreq+0xa2>
=======
 8002488:	4b1d      	ldr	r3, [pc, #116]	; (8002500 <HAL_RCC_GetSysClockFreq+0xb8>)
 800248a:	623b      	str	r3, [r7, #32]
      break;
 800248c:	e02d      	b.n	80024ea <HAL_RCC_GetSysClockFreq+0xa2>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
<<<<<<< HEAD
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	0c9b      	lsrs	r3, r3, #18
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002562:	4413      	add	r3, r2
 8002564:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002568:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d013      	beq.n	800259c <HAL_RCC_GetSysClockFreq+0x8c>
=======
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	0c9b      	lsrs	r3, r3, #18
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800249a:	4413      	add	r3, r2
 800249c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80024a0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d013      	beq.n	80024d4 <HAL_RCC_GetSysClockFreq+0x8c>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
<<<<<<< HEAD
 8002574:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	0c5b      	lsrs	r3, r3, #17
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002582:	4413      	add	r3, r2
 8002584:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002588:	61bb      	str	r3, [r7, #24]
=======
 80024ac:	4b13      	ldr	r3, [pc, #76]	; (80024fc <HAL_RCC_GetSysClockFreq+0xb4>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	0c5b      	lsrs	r3, r3, #17
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80024ba:	4413      	add	r3, r2
 80024bc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80024c0:	61bb      	str	r3, [r7, #24]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
<<<<<<< HEAD
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	4a0e      	ldr	r2, [pc, #56]	; (80025c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800258e:	fb02 f203 	mul.w	r2, r2, r3
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	fbb2 f3f3 	udiv	r3, r2, r3
 8002598:	627b      	str	r3, [r7, #36]	; 0x24
 800259a:	e004      	b.n	80025a6 <HAL_RCC_GetSysClockFreq+0x96>
=======
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	4a0e      	ldr	r2, [pc, #56]	; (8002500 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024c6:	fb02 f203 	mul.w	r2, r2, r3
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24
 80024d2:	e004      	b.n	80024de <HAL_RCC_GetSysClockFreq+0x96>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
<<<<<<< HEAD
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	4a0b      	ldr	r2, [pc, #44]	; (80025cc <HAL_RCC_GetSysClockFreq+0xbc>)
 80025a0:	fb02 f303 	mul.w	r3, r2, r3
 80025a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	623b      	str	r3, [r7, #32]
      break;
 80025aa:	e002      	b.n	80025b2 <HAL_RCC_GetSysClockFreq+0xa2>
=======
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	4a0b      	ldr	r2, [pc, #44]	; (8002504 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024d8:	fb02 f303 	mul.w	r3, r2, r3
 80024dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	623b      	str	r3, [r7, #32]
      break;
 80024e2:	e002      	b.n	80024ea <HAL_RCC_GetSysClockFreq+0xa2>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 80025ac:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025ae:	623b      	str	r3, [r7, #32]
      break;
 80025b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025b2:	6a3b      	ldr	r3, [r7, #32]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3728      	adds	r7, #40	; 0x28
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc90      	pop	{r4, r7}
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	08002e44 	.word	0x08002e44
 80025c4:	40021000 	.word	0x40021000
 80025c8:	007a1200 	.word	0x007a1200
 80025cc:	003d0900 	.word	0x003d0900

080025d0 <RCC_Delay>:
=======
 80024e4:	4b06      	ldr	r3, [pc, #24]	; (8002500 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024e6:	623b      	str	r3, [r7, #32]
      break;
 80024e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024ea:	6a3b      	ldr	r3, [r7, #32]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3728      	adds	r7, #40	; 0x28
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bc90      	pop	{r4, r7}
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	08002d7c 	.word	0x08002d7c
 80024fc:	40021000 	.word	0x40021000
 8002500:	007a1200 	.word	0x007a1200
 8002504:	003d0900 	.word	0x003d0900

08002508 <RCC_Delay>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
<<<<<<< HEAD
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025d8:	4b0a      	ldr	r3, [pc, #40]	; (8002604 <RCC_Delay+0x34>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a0a      	ldr	r2, [pc, #40]	; (8002608 <RCC_Delay+0x38>)
 80025de:	fba2 2303 	umull	r2, r3, r2, r3
 80025e2:	0a5b      	lsrs	r3, r3, #9
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	fb02 f303 	mul.w	r3, r2, r3
 80025ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025ec:	bf00      	nop
  }
  while (Delay --);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	1e5a      	subs	r2, r3, #1
 80025f2:	60fa      	str	r2, [r7, #12]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1f9      	bne.n	80025ec <RCC_Delay+0x1c>
}
 80025f8:	bf00      	nop
 80025fa:	bf00      	nop
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr
 8002604:	20000024 	.word	0x20000024
 8002608:	10624dd3 	.word	0x10624dd3

0800260c <HAL_TIM_Base_Init>:
=======
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002510:	4b0a      	ldr	r3, [pc, #40]	; (800253c <RCC_Delay+0x34>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a0a      	ldr	r2, [pc, #40]	; (8002540 <RCC_Delay+0x38>)
 8002516:	fba2 2303 	umull	r2, r3, r2, r3
 800251a:	0a5b      	lsrs	r3, r3, #9
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	fb02 f303 	mul.w	r3, r2, r3
 8002522:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002524:	bf00      	nop
  }
  while (Delay --);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	1e5a      	subs	r2, r3, #1
 800252a:	60fa      	str	r2, [r7, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1f9      	bne.n	8002524 <RCC_Delay+0x1c>
}
 8002530:	bf00      	nop
 8002532:	bf00      	nop
 8002534:	3714      	adds	r7, #20
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr
 800253c:	20000024 	.word	0x20000024
 8002540:	10624dd3 	.word	0x10624dd3

08002544 <HAL_TIM_Base_Init>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e041      	b.n	80026a2 <HAL_TIM_Base_Init+0x96>
=======
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e041      	b.n	80025da <HAL_TIM_Base_Init+0x96>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d106      	bne.n	8002638 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d106      	bne.n	8002570 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7fe ff74 	bl	8001520 <HAL_TIM_Base_MspInit>
=======
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f7fe ff74 	bl	8001458 <HAL_TIM_Base_MspInit>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2202      	movs	r2, #2
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3304      	adds	r3, #4
 8002648:	4619      	mov	r1, r3
 800264a:	4610      	mov	r0, r2
 800264c:	f000 fa6a 	bl	8002b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <HAL_TIM_Base_Start_IT>:
=======
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2202      	movs	r2, #2
 8002574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3304      	adds	r3, #4
 8002580:	4619      	mov	r1, r3
 8002582:	4610      	mov	r0, r2
 8002584:	f000 fa6a 	bl	8002a5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <HAL_TIM_Base_Start_IT>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
=======
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< HEAD
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d001      	beq.n	80026c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e035      	b.n	8002730 <HAL_TIM_Base_Start_IT+0x84>
=======
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d001      	beq.n	80025fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e035      	b.n	8002668 <HAL_TIM_Base_Start_IT+0x84>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2202      	movs	r2, #2
 80026c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68da      	ldr	r2, [r3, #12]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f042 0201 	orr.w	r2, r2, #1
 80026da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a16      	ldr	r2, [pc, #88]	; (800273c <HAL_TIM_Base_Start_IT+0x90>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d009      	beq.n	80026fa <HAL_TIM_Base_Start_IT+0x4e>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ee:	d004      	beq.n	80026fa <HAL_TIM_Base_Start_IT+0x4e>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a12      	ldr	r2, [pc, #72]	; (8002740 <HAL_TIM_Base_Start_IT+0x94>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d111      	bne.n	800271e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2b06      	cmp	r3, #6
 800270a:	d010      	beq.n	800272e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 0201 	orr.w	r2, r2, #1
 800271a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800271c:	e007      	b.n	800272e <HAL_TIM_Base_Start_IT+0x82>
=======
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2202      	movs	r2, #2
 8002600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68da      	ldr	r2, [r3, #12]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 0201 	orr.w	r2, r2, #1
 8002612:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a16      	ldr	r2, [pc, #88]	; (8002674 <HAL_TIM_Base_Start_IT+0x90>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d009      	beq.n	8002632 <HAL_TIM_Base_Start_IT+0x4e>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002626:	d004      	beq.n	8002632 <HAL_TIM_Base_Start_IT+0x4e>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a12      	ldr	r2, [pc, #72]	; (8002678 <HAL_TIM_Base_Start_IT+0x94>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d111      	bne.n	8002656 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2b06      	cmp	r3, #6
 8002642:	d010      	beq.n	8002666 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f042 0201 	orr.w	r2, r2, #1
 8002652:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002654:	e007      	b.n	8002666 <HAL_TIM_Base_Start_IT+0x82>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f042 0201 	orr.w	r2, r2, #1
 800272c:	601a      	str	r2, [r3, #0]
=======
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f042 0201 	orr.w	r2, r2, #1
 8002664:	601a      	str	r2, [r3, #0]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	bc80      	pop	{r7}
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	40012c00 	.word	0x40012c00
 8002740:	40000400 	.word	0x40000400

08002744 <HAL_TIM_IRQHandler>:
=======
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	40012c00 	.word	0x40012c00
 8002678:	40000400 	.word	0x40000400

0800267c <HAL_TIM_IRQHandler>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b02      	cmp	r3, #2
 8002758:	d122      	bne.n	80027a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b02      	cmp	r3, #2
 8002766:	d11b      	bne.n	80027a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f06f 0202 	mvn.w	r2, #2
 8002770:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2201      	movs	r2, #1
 8002776:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_TIM_IRQHandler+0x4a>
=======
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b02      	cmp	r3, #2
 8002690:	d122      	bne.n	80026d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b02      	cmp	r3, #2
 800269e:	d11b      	bne.n	80026d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f06f 0202 	mvn.w	r2, #2
 80026a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2201      	movs	r2, #1
 80026ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_TIM_IRQHandler+0x4a>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 f9b1 	bl	8002aee <HAL_TIM_IC_CaptureCallback>
 800278c:	e005      	b.n	800279a <HAL_TIM_IRQHandler+0x56>
=======
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f9b1 	bl	8002a26 <HAL_TIM_IC_CaptureCallback>
 80026c4:	e005      	b.n	80026d2 <HAL_TIM_IRQHandler+0x56>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 f9a4 	bl	8002adc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 f9b3 	bl	8002b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	771a      	strb	r2, [r3, #28]
=======
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f9a4 	bl	8002a14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 f9b3 	bl	8002a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	771a      	strb	r2, [r3, #28]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
<<<<<<< HEAD
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	d122      	bne.n	80027f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b04      	cmp	r3, #4
 80027ba:	d11b      	bne.n	80027f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f06f 0204 	mvn.w	r2, #4
 80027c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2202      	movs	r2, #2
 80027ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_TIM_IRQHandler+0x9e>
=======
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	f003 0304 	and.w	r3, r3, #4
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	d122      	bne.n	800272c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	2b04      	cmp	r3, #4
 80026f2:	d11b      	bne.n	800272c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f06f 0204 	mvn.w	r2, #4
 80026fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2202      	movs	r2, #2
 8002702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_TIM_IRQHandler+0x9e>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 f987 	bl	8002aee <HAL_TIM_IC_CaptureCallback>
 80027e0:	e005      	b.n	80027ee <HAL_TIM_IRQHandler+0xaa>
=======
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f987 	bl	8002a26 <HAL_TIM_IC_CaptureCallback>
 8002718:	e005      	b.n	8002726 <HAL_TIM_IRQHandler+0xaa>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f97a 	bl	8002adc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 f989 	bl	8002b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	771a      	strb	r2, [r3, #28]
=======
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 f97a 	bl	8002a14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 f989 	bl	8002a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	771a      	strb	r2, [r3, #28]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
<<<<<<< HEAD
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b08      	cmp	r3, #8
 8002800:	d122      	bne.n	8002848 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	f003 0308 	and.w	r3, r3, #8
 800280c:	2b08      	cmp	r3, #8
 800280e:	d11b      	bne.n	8002848 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f06f 0208 	mvn.w	r2, #8
 8002818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2204      	movs	r2, #4
 800281e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_TIM_IRQHandler+0xf2>
=======
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b08      	cmp	r3, #8
 8002738:	d122      	bne.n	8002780 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	f003 0308 	and.w	r3, r3, #8
 8002744:	2b08      	cmp	r3, #8
 8002746:	d11b      	bne.n	8002780 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f06f 0208 	mvn.w	r2, #8
 8002750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2204      	movs	r2, #4
 8002756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <HAL_TIM_IRQHandler+0xf2>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f95d 	bl	8002aee <HAL_TIM_IC_CaptureCallback>
 8002834:	e005      	b.n	8002842 <HAL_TIM_IRQHandler+0xfe>
=======
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 f95d 	bl	8002a26 <HAL_TIM_IC_CaptureCallback>
 800276c:	e005      	b.n	800277a <HAL_TIM_IRQHandler+0xfe>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f950 	bl	8002adc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 f95f 	bl	8002b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	771a      	strb	r2, [r3, #28]
=======
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 f950 	bl	8002a14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 f95f 	bl	8002a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	771a      	strb	r2, [r3, #28]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
<<<<<<< HEAD
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	f003 0310 	and.w	r3, r3, #16
 8002852:	2b10      	cmp	r3, #16
 8002854:	d122      	bne.n	800289c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	f003 0310 	and.w	r3, r3, #16
 8002860:	2b10      	cmp	r3, #16
 8002862:	d11b      	bne.n	800289c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f06f 0210 	mvn.w	r2, #16
 800286c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2208      	movs	r2, #8
 8002872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_TIM_IRQHandler+0x146>
=======
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	f003 0310 	and.w	r3, r3, #16
 800278a:	2b10      	cmp	r3, #16
 800278c:	d122      	bne.n	80027d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	f003 0310 	and.w	r3, r3, #16
 8002798:	2b10      	cmp	r3, #16
 800279a:	d11b      	bne.n	80027d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f06f 0210 	mvn.w	r2, #16
 80027a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2208      	movs	r2, #8
 80027aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_TIM_IRQHandler+0x146>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f933 	bl	8002aee <HAL_TIM_IC_CaptureCallback>
 8002888:	e005      	b.n	8002896 <HAL_TIM_IRQHandler+0x152>
=======
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 f933 	bl	8002a26 <HAL_TIM_IC_CaptureCallback>
 80027c0:	e005      	b.n	80027ce <HAL_TIM_IRQHandler+0x152>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f926 	bl	8002adc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 f935 	bl	8002b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	771a      	strb	r2, [r3, #28]
=======
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f926 	bl	8002a14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f000 f935 	bl	8002a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	771a      	strb	r2, [r3, #28]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
<<<<<<< HEAD
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d10e      	bne.n	80028c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d107      	bne.n	80028c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f06f 0201 	mvn.w	r2, #1
 80028c0:	611a      	str	r2, [r3, #16]
=======
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d10e      	bne.n	8002800 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d107      	bne.n	8002800 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f06f 0201 	mvn.w	r2, #1
 80027f8:	611a      	str	r2, [r3, #16]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< HEAD
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7fe fde8 	bl	8001498 <HAL_TIM_PeriodElapsedCallback>
=======
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7fe fde8 	bl	80013d0 <HAL_TIM_PeriodElapsedCallback>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
<<<<<<< HEAD
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d2:	2b80      	cmp	r3, #128	; 0x80
 80028d4:	d10e      	bne.n	80028f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e0:	2b80      	cmp	r3, #128	; 0x80
 80028e2:	d107      	bne.n	80028f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028ec:	611a      	str	r2, [r3, #16]
=======
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800280a:	2b80      	cmp	r3, #128	; 0x80
 800280c:	d10e      	bne.n	800282c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002818:	2b80      	cmp	r3, #128	; 0x80
 800281a:	d107      	bne.n	800282c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002824:	611a      	str	r2, [r3, #16]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< HEAD
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 fa67 	bl	8002dc2 <HAL_TIMEx_BreakCallback>
=======
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 fa67 	bl	8002cfa <HAL_TIMEx_BreakCallback>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
<<<<<<< HEAD
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028fe:	2b40      	cmp	r3, #64	; 0x40
 8002900:	d10e      	bne.n	8002920 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800290c:	2b40      	cmp	r3, #64	; 0x40
 800290e:	d107      	bne.n	8002920 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002918:	611a      	str	r2, [r3, #16]
=======
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002836:	2b40      	cmp	r3, #64	; 0x40
 8002838:	d10e      	bne.n	8002858 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002844:	2b40      	cmp	r3, #64	; 0x40
 8002846:	d107      	bne.n	8002858 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002850:	611a      	str	r2, [r3, #16]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< HEAD
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f8f9 	bl	8002b12 <HAL_TIM_TriggerCallback>
=======
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f8f9 	bl	8002a4a <HAL_TIM_TriggerCallback>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
<<<<<<< HEAD
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	f003 0320 	and.w	r3, r3, #32
 800292a:	2b20      	cmp	r3, #32
 800292c:	d10e      	bne.n	800294c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	f003 0320 	and.w	r3, r3, #32
 8002938:	2b20      	cmp	r3, #32
 800293a:	d107      	bne.n	800294c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f06f 0220 	mvn.w	r2, #32
 8002944:	611a      	str	r2, [r3, #16]
=======
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	f003 0320 	and.w	r3, r3, #32
 8002862:	2b20      	cmp	r3, #32
 8002864:	d10e      	bne.n	8002884 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	f003 0320 	and.w	r3, r3, #32
 8002870:	2b20      	cmp	r3, #32
 8002872:	d107      	bne.n	8002884 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f06f 0220 	mvn.w	r2, #32
 800287c:	611a      	str	r2, [r3, #16]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< HEAD
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 fa32 	bl	8002db0 <HAL_TIMEx_CommutCallback>
=======
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 fa32 	bl	8002ce8 <HAL_TIMEx_CommutCallback>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 800294c:	bf00      	nop
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_TIM_ConfigClockSource>:
=======
 8002884:	bf00      	nop
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <HAL_TIM_ConfigClockSource>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
<<<<<<< HEAD
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
=======
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002964:	2b01      	cmp	r3, #1
 8002966:	d101      	bne.n	800296c <HAL_TIM_ConfigClockSource+0x18>
 8002968:	2302      	movs	r3, #2
 800296a:	e0b3      	b.n	8002ad4 <HAL_TIM_ConfigClockSource+0x180>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2202      	movs	r2, #2
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800289c:	2b01      	cmp	r3, #1
 800289e:	d101      	bne.n	80028a4 <HAL_TIM_ConfigClockSource+0x18>
 80028a0:	2302      	movs	r3, #2
 80028a2:	e0b3      	b.n	8002a0c <HAL_TIM_ConfigClockSource+0x180>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2202      	movs	r2, #2
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
<<<<<<< HEAD
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800298a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002992:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029a4:	d03e      	beq.n	8002a24 <HAL_TIM_ConfigClockSource+0xd0>
 80029a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029aa:	f200 8087 	bhi.w	8002abc <HAL_TIM_ConfigClockSource+0x168>
 80029ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029b2:	f000 8085 	beq.w	8002ac0 <HAL_TIM_ConfigClockSource+0x16c>
 80029b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ba:	d87f      	bhi.n	8002abc <HAL_TIM_ConfigClockSource+0x168>
 80029bc:	2b70      	cmp	r3, #112	; 0x70
 80029be:	d01a      	beq.n	80029f6 <HAL_TIM_ConfigClockSource+0xa2>
 80029c0:	2b70      	cmp	r3, #112	; 0x70
 80029c2:	d87b      	bhi.n	8002abc <HAL_TIM_ConfigClockSource+0x168>
 80029c4:	2b60      	cmp	r3, #96	; 0x60
 80029c6:	d050      	beq.n	8002a6a <HAL_TIM_ConfigClockSource+0x116>
 80029c8:	2b60      	cmp	r3, #96	; 0x60
 80029ca:	d877      	bhi.n	8002abc <HAL_TIM_ConfigClockSource+0x168>
 80029cc:	2b50      	cmp	r3, #80	; 0x50
 80029ce:	d03c      	beq.n	8002a4a <HAL_TIM_ConfigClockSource+0xf6>
 80029d0:	2b50      	cmp	r3, #80	; 0x50
 80029d2:	d873      	bhi.n	8002abc <HAL_TIM_ConfigClockSource+0x168>
 80029d4:	2b40      	cmp	r3, #64	; 0x40
 80029d6:	d058      	beq.n	8002a8a <HAL_TIM_ConfigClockSource+0x136>
 80029d8:	2b40      	cmp	r3, #64	; 0x40
 80029da:	d86f      	bhi.n	8002abc <HAL_TIM_ConfigClockSource+0x168>
 80029dc:	2b30      	cmp	r3, #48	; 0x30
 80029de:	d064      	beq.n	8002aaa <HAL_TIM_ConfigClockSource+0x156>
 80029e0:	2b30      	cmp	r3, #48	; 0x30
 80029e2:	d86b      	bhi.n	8002abc <HAL_TIM_ConfigClockSource+0x168>
 80029e4:	2b20      	cmp	r3, #32
 80029e6:	d060      	beq.n	8002aaa <HAL_TIM_ConfigClockSource+0x156>
 80029e8:	2b20      	cmp	r3, #32
 80029ea:	d867      	bhi.n	8002abc <HAL_TIM_ConfigClockSource+0x168>
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d05c      	beq.n	8002aaa <HAL_TIM_ConfigClockSource+0x156>
 80029f0:	2b10      	cmp	r3, #16
 80029f2:	d05a      	beq.n	8002aaa <HAL_TIM_ConfigClockSource+0x156>
=======
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80028c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028dc:	d03e      	beq.n	800295c <HAL_TIM_ConfigClockSource+0xd0>
 80028de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028e2:	f200 8087 	bhi.w	80029f4 <HAL_TIM_ConfigClockSource+0x168>
 80028e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ea:	f000 8085 	beq.w	80029f8 <HAL_TIM_ConfigClockSource+0x16c>
 80028ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028f2:	d87f      	bhi.n	80029f4 <HAL_TIM_ConfigClockSource+0x168>
 80028f4:	2b70      	cmp	r3, #112	; 0x70
 80028f6:	d01a      	beq.n	800292e <HAL_TIM_ConfigClockSource+0xa2>
 80028f8:	2b70      	cmp	r3, #112	; 0x70
 80028fa:	d87b      	bhi.n	80029f4 <HAL_TIM_ConfigClockSource+0x168>
 80028fc:	2b60      	cmp	r3, #96	; 0x60
 80028fe:	d050      	beq.n	80029a2 <HAL_TIM_ConfigClockSource+0x116>
 8002900:	2b60      	cmp	r3, #96	; 0x60
 8002902:	d877      	bhi.n	80029f4 <HAL_TIM_ConfigClockSource+0x168>
 8002904:	2b50      	cmp	r3, #80	; 0x50
 8002906:	d03c      	beq.n	8002982 <HAL_TIM_ConfigClockSource+0xf6>
 8002908:	2b50      	cmp	r3, #80	; 0x50
 800290a:	d873      	bhi.n	80029f4 <HAL_TIM_ConfigClockSource+0x168>
 800290c:	2b40      	cmp	r3, #64	; 0x40
 800290e:	d058      	beq.n	80029c2 <HAL_TIM_ConfigClockSource+0x136>
 8002910:	2b40      	cmp	r3, #64	; 0x40
 8002912:	d86f      	bhi.n	80029f4 <HAL_TIM_ConfigClockSource+0x168>
 8002914:	2b30      	cmp	r3, #48	; 0x30
 8002916:	d064      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0x156>
 8002918:	2b30      	cmp	r3, #48	; 0x30
 800291a:	d86b      	bhi.n	80029f4 <HAL_TIM_ConfigClockSource+0x168>
 800291c:	2b20      	cmp	r3, #32
 800291e:	d060      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0x156>
 8002920:	2b20      	cmp	r3, #32
 8002922:	d867      	bhi.n	80029f4 <HAL_TIM_ConfigClockSource+0x168>
 8002924:	2b00      	cmp	r3, #0
 8002926:	d05c      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0x156>
 8002928:	2b10      	cmp	r3, #16
 800292a:	d05a      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0x156>
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
<<<<<<< HEAD
 80029f4:	e062      	b.n	8002abc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6818      	ldr	r0, [r3, #0]
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	6899      	ldr	r1, [r3, #8]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	f000 f95c 	bl	8002cc2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a18:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	609a      	str	r2, [r3, #8]
      break;
 8002a22:	e04e      	b.n	8002ac2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6818      	ldr	r0, [r3, #0]
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	6899      	ldr	r1, [r3, #8]
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	f000 f945 	bl	8002cc2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689a      	ldr	r2, [r3, #8]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a46:	609a      	str	r2, [r3, #8]
      break;
 8002a48:	e03b      	b.n	8002ac2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6818      	ldr	r0, [r3, #0]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	6859      	ldr	r1, [r3, #4]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	461a      	mov	r2, r3
 8002a58:	f000 f8bc 	bl	8002bd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2150      	movs	r1, #80	; 0x50
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 f913 	bl	8002c8e <TIM_ITRx_SetConfig>
      break;
 8002a68:	e02b      	b.n	8002ac2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6818      	ldr	r0, [r3, #0]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	6859      	ldr	r1, [r3, #4]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	461a      	mov	r2, r3
 8002a78:	f000 f8da 	bl	8002c30 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2160      	movs	r1, #96	; 0x60
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 f903 	bl	8002c8e <TIM_ITRx_SetConfig>
      break;
 8002a88:	e01b      	b.n	8002ac2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6818      	ldr	r0, [r3, #0]
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	6859      	ldr	r1, [r3, #4]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	461a      	mov	r2, r3
 8002a98:	f000 f89c 	bl	8002bd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2140      	movs	r1, #64	; 0x40
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 f8f3 	bl	8002c8e <TIM_ITRx_SetConfig>
      break;
 8002aa8:	e00b      	b.n	8002ac2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4610      	mov	r0, r2
 8002ab6:	f000 f8ea 	bl	8002c8e <TIM_ITRx_SetConfig>
        break;
 8002aba:	e002      	b.n	8002ac2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002abc:	bf00      	nop
 8002abe:	e000      	b.n	8002ac2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ac0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <HAL_TIM_OC_DelayElapsedCallback>:
=======
 800292c:	e062      	b.n	80029f4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6818      	ldr	r0, [r3, #0]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	6899      	ldr	r1, [r3, #8]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	f000 f95c 	bl	8002bfa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002950:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	609a      	str	r2, [r3, #8]
      break;
 800295a:	e04e      	b.n	80029fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6818      	ldr	r0, [r3, #0]
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	6899      	ldr	r1, [r3, #8]
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	f000 f945 	bl	8002bfa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800297e:	609a      	str	r2, [r3, #8]
      break;
 8002980:	e03b      	b.n	80029fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6818      	ldr	r0, [r3, #0]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	6859      	ldr	r1, [r3, #4]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	461a      	mov	r2, r3
 8002990:	f000 f8bc 	bl	8002b0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2150      	movs	r1, #80	; 0x50
 800299a:	4618      	mov	r0, r3
 800299c:	f000 f913 	bl	8002bc6 <TIM_ITRx_SetConfig>
      break;
 80029a0:	e02b      	b.n	80029fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6818      	ldr	r0, [r3, #0]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	6859      	ldr	r1, [r3, #4]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	461a      	mov	r2, r3
 80029b0:	f000 f8da 	bl	8002b68 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2160      	movs	r1, #96	; 0x60
 80029ba:	4618      	mov	r0, r3
 80029bc:	f000 f903 	bl	8002bc6 <TIM_ITRx_SetConfig>
      break;
 80029c0:	e01b      	b.n	80029fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6818      	ldr	r0, [r3, #0]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	6859      	ldr	r1, [r3, #4]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	461a      	mov	r2, r3
 80029d0:	f000 f89c 	bl	8002b0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2140      	movs	r1, #64	; 0x40
 80029da:	4618      	mov	r0, r3
 80029dc:	f000 f8f3 	bl	8002bc6 <TIM_ITRx_SetConfig>
      break;
 80029e0:	e00b      	b.n	80029fa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4619      	mov	r1, r3
 80029ec:	4610      	mov	r0, r2
 80029ee:	f000 f8ea 	bl	8002bc6 <TIM_ITRx_SetConfig>
        break;
 80029f2:	e002      	b.n	80029fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80029f4:	bf00      	nop
 80029f6:	e000      	b.n	80029fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80029f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
=======
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr

08002aee <HAL_TIM_IC_CaptureCallback>:
=======
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bc80      	pop	{r7}
 8002a24:	4770      	bx	lr

08002a26 <HAL_TIM_IC_CaptureCallback>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8002aee:	b480      	push	{r7}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
=======
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bc80      	pop	{r7}
 8002afe:	4770      	bx	lr

08002b00 <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr

08002a38 <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
=======
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bc80      	pop	{r7}
 8002b10:	4770      	bx	lr

08002b12 <HAL_TIM_TriggerCallback>:
=======
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bc80      	pop	{r7}
 8002a48:	4770      	bx	lr

08002a4a <HAL_TIM_TriggerCallback>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
=======
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr

08002b24 <TIM_Base_SetConfig>:
=======
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr

08002a5c <TIM_Base_SetConfig>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a25      	ldr	r2, [pc, #148]	; (8002bcc <TIM_Base_SetConfig+0xa8>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d007      	beq.n	8002b4c <TIM_Base_SetConfig+0x28>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b42:	d003      	beq.n	8002b4c <TIM_Base_SetConfig+0x28>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a22      	ldr	r2, [pc, #136]	; (8002bd0 <TIM_Base_SetConfig+0xac>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d108      	bne.n	8002b5e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a1a      	ldr	r2, [pc, #104]	; (8002bcc <TIM_Base_SetConfig+0xa8>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d007      	beq.n	8002b76 <TIM_Base_SetConfig+0x52>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b6c:	d003      	beq.n	8002b76 <TIM_Base_SetConfig+0x52>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a17      	ldr	r2, [pc, #92]	; (8002bd0 <TIM_Base_SetConfig+0xac>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d108      	bne.n	8002b88 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	60fb      	str	r3, [r7, #12]
=======
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a25      	ldr	r2, [pc, #148]	; (8002b04 <TIM_Base_SetConfig+0xa8>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d007      	beq.n	8002a84 <TIM_Base_SetConfig+0x28>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a7a:	d003      	beq.n	8002a84 <TIM_Base_SetConfig+0x28>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a22      	ldr	r2, [pc, #136]	; (8002b08 <TIM_Base_SetConfig+0xac>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d108      	bne.n	8002a96 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a1a      	ldr	r2, [pc, #104]	; (8002b04 <TIM_Base_SetConfig+0xa8>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d007      	beq.n	8002aae <TIM_Base_SetConfig+0x52>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa4:	d003      	beq.n	8002aae <TIM_Base_SetConfig+0x52>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a17      	ldr	r2, [pc, #92]	; (8002b08 <TIM_Base_SetConfig+0xac>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d108      	bne.n	8002ac0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ab4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	60fb      	str	r3, [r7, #12]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a07      	ldr	r2, [pc, #28]	; (8002bcc <TIM_Base_SetConfig+0xa8>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d103      	bne.n	8002bbc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	691a      	ldr	r2, [r3, #16]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a07      	ldr	r2, [pc, #28]	; (8002b04 <TIM_Base_SetConfig+0xa8>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d103      	bne.n	8002af4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	691a      	ldr	r2, [r3, #16]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	615a      	str	r2, [r3, #20]
}
 8002bc2:	bf00      	nop
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bc80      	pop	{r7}
 8002bca:	4770      	bx	lr
 8002bcc:	40012c00 	.word	0x40012c00
 8002bd0:	40000400 	.word	0x40000400

08002bd4 <TIM_TI1_ConfigInputStage>:
=======
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	615a      	str	r2, [r3, #20]
}
 8002afa:	bf00      	nop
 8002afc:	3714      	adds	r7, #20
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr
 8002b04:	40012c00 	.word	0x40012c00
 8002b08:	40000400 	.word	0x40000400

08002b0c <TIM_TI1_ConfigInputStage>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8002bd4:	b480      	push	{r7}
 8002bd6:	b087      	sub	sp, #28
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
=======
 8002b0c:	b480      	push	{r7}
 8002b0e:	b087      	sub	sp, #28
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6a1b      	ldr	r3, [r3, #32]
 8002be4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	f023 0201 	bic.w	r2, r3, #1
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	011b      	lsls	r3, r3, #4
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	f023 030a 	bic.w	r3, r3, #10
 8002c10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	621a      	str	r2, [r3, #32]
}
 8002c26:	bf00      	nop
 8002c28:	371c      	adds	r7, #28
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr

08002c30 <TIM_TI2_ConfigInputStage>:
=======
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	f023 0201 	bic.w	r2, r3, #1
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	011b      	lsls	r3, r3, #4
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f023 030a 	bic.w	r3, r3, #10
 8002b48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	621a      	str	r2, [r3, #32]
}
 8002b5e:	bf00      	nop
 8002b60:	371c      	adds	r7, #28
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr

08002b68 <TIM_TI2_ConfigInputStage>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8002c30:	b480      	push	{r7}
 8002c32:	b087      	sub	sp, #28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
=======
 8002b68:	b480      	push	{r7}
 8002b6a:	b087      	sub	sp, #28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< HEAD
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	f023 0210 	bic.w	r2, r3, #16
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c5a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	031b      	lsls	r3, r3, #12
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c6c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	011b      	lsls	r3, r3, #4
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	621a      	str	r2, [r3, #32]
}
 8002c84:	bf00      	nop
 8002c86:	371c      	adds	r7, #28
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bc80      	pop	{r7}
 8002c8c:	4770      	bx	lr

08002c8e <TIM_ITRx_SetConfig>:
=======
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	f023 0210 	bic.w	r2, r3, #16
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b92:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	031b      	lsls	r3, r3, #12
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ba4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	011b      	lsls	r3, r3, #4
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	621a      	str	r2, [r3, #32]
}
 8002bbc:	bf00      	nop
 8002bbe:	371c      	adds	r7, #28
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bc80      	pop	{r7}
 8002bc4:	4770      	bx	lr

08002bc6 <TIM_ITRx_SetConfig>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
<<<<<<< HEAD
 8002c8e:	b480      	push	{r7}
 8002c90:	b085      	sub	sp, #20
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
 8002c96:	6039      	str	r1, [r7, #0]
=======
 8002bc6:	b480      	push	{r7}
 8002bc8:	b085      	sub	sp, #20
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
 8002bce:	6039      	str	r1, [r7, #0]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
<<<<<<< HEAD
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ca4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	f043 0307 	orr.w	r3, r3, #7
 8002cb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	609a      	str	r2, [r3, #8]
}
 8002cb8:	bf00      	nop
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr

08002cc2 <TIM_ETR_SetConfig>:
=======
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	f043 0307 	orr.w	r3, r3, #7
 8002be8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	609a      	str	r2, [r3, #8]
}
 8002bf0:	bf00      	nop
 8002bf2:	3714      	adds	r7, #20
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bc80      	pop	{r7}
 8002bf8:	4770      	bx	lr

08002bfa <TIM_ETR_SetConfig>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
<<<<<<< HEAD
 8002cc2:	b480      	push	{r7}
 8002cc4:	b087      	sub	sp, #28
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	60f8      	str	r0, [r7, #12]
 8002cca:	60b9      	str	r1, [r7, #8]
 8002ccc:	607a      	str	r2, [r7, #4]
 8002cce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cdc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	021a      	lsls	r2, r3, #8
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	609a      	str	r2, [r3, #8]
}
 8002cf6:	bf00      	nop
 8002cf8:	371c      	adds	r7, #28
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr

08002d00 <HAL_TIMEx_MasterConfigSynchronization>:
=======
 8002bfa:	b480      	push	{r7}
 8002bfc:	b087      	sub	sp, #28
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	60f8      	str	r0, [r7, #12]
 8002c02:	60b9      	str	r1, [r7, #8]
 8002c04:	607a      	str	r2, [r7, #4]
 8002c06:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c14:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	021a      	lsls	r2, r3, #8
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	609a      	str	r2, [r3, #8]
}
 8002c2e:	bf00      	nop
 8002c30:	371c      	adds	r7, #28
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr

08002c38 <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< HEAD
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
=======
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d101      	bne.n	8002d18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d14:	2302      	movs	r3, #2
 8002d16:	e041      	b.n	8002d9c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2202      	movs	r2, #2
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a14      	ldr	r2, [pc, #80]	; (8002da8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d009      	beq.n	8002d70 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d64:	d004      	beq.n	8002d70 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a10      	ldr	r2, [pc, #64]	; (8002dac <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d10c      	bne.n	8002d8a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	609a      	str	r2, [r3, #8]
=======
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e041      	b.n	8002cd4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a14      	ldr	r2, [pc, #80]	; (8002ce0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d009      	beq.n	8002ca8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c9c:	d004      	beq.n	8002ca8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a10      	ldr	r2, [pc, #64]	; (8002ce4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d10c      	bne.n	8002cc2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	68ba      	ldr	r2, [r7, #8]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68ba      	ldr	r2, [r7, #8]
 8002cc0:	609a      	str	r2, [r3, #8]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc80      	pop	{r7}
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	40012c00 	.word	0x40012c00
 8002dac:	40000400 	.word	0x40000400

08002db0 <HAL_TIMEx_CommutCallback>:
=======
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3714      	adds	r7, #20
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc80      	pop	{r7}
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	40012c00 	.word	0x40012c00
 8002ce4:	40000400 	.word	0x40000400

08002ce8 <HAL_TIMEx_CommutCallback>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
=======
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr

08002dc2 <HAL_TIMEx_BreakCallback>:
=======
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bc80      	pop	{r7}
 8002cf8:	4770      	bx	lr

08002cfa <HAL_TIMEx_BreakCallback>:
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8002dc2:	b480      	push	{r7}
 8002dc4:	b083      	sub	sp, #12
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
=======
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr

08002dd4 <__libc_init_array>:
 8002dd4:	b570      	push	{r4, r5, r6, lr}
 8002dd6:	2600      	movs	r6, #0
 8002dd8:	4d0c      	ldr	r5, [pc, #48]	; (8002e0c <__libc_init_array+0x38>)
 8002dda:	4c0d      	ldr	r4, [pc, #52]	; (8002e10 <__libc_init_array+0x3c>)
 8002ddc:	1b64      	subs	r4, r4, r5
 8002dde:	10a4      	asrs	r4, r4, #2
 8002de0:	42a6      	cmp	r6, r4
 8002de2:	d109      	bne.n	8002df8 <__libc_init_array+0x24>
 8002de4:	f000 f822 	bl	8002e2c <_init>
 8002de8:	2600      	movs	r6, #0
 8002dea:	4d0a      	ldr	r5, [pc, #40]	; (8002e14 <__libc_init_array+0x40>)
 8002dec:	4c0a      	ldr	r4, [pc, #40]	; (8002e18 <__libc_init_array+0x44>)
 8002dee:	1b64      	subs	r4, r4, r5
 8002df0:	10a4      	asrs	r4, r4, #2
 8002df2:	42a6      	cmp	r6, r4
 8002df4:	d105      	bne.n	8002e02 <__libc_init_array+0x2e>
 8002df6:	bd70      	pop	{r4, r5, r6, pc}
 8002df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dfc:	4798      	blx	r3
 8002dfe:	3601      	adds	r6, #1
 8002e00:	e7ee      	b.n	8002de0 <__libc_init_array+0xc>
 8002e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e06:	4798      	blx	r3
 8002e08:	3601      	adds	r6, #1
 8002e0a:	e7f2      	b.n	8002df2 <__libc_init_array+0x1e>
 8002e0c:	08002e64 	.word	0x08002e64
 8002e10:	08002e64 	.word	0x08002e64
 8002e14:	08002e64 	.word	0x08002e64
 8002e18:	08002e68 	.word	0x08002e68

08002e1c <memset>:
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	4402      	add	r2, r0
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d100      	bne.n	8002e26 <memset+0xa>
 8002e24:	4770      	bx	lr
 8002e26:	f803 1b01 	strb.w	r1, [r3], #1
 8002e2a:	e7f9      	b.n	8002e20 <memset+0x4>

08002e2c <_init>:
 8002e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e2e:	bf00      	nop
 8002e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e32:	bc08      	pop	{r3}
 8002e34:	469e      	mov	lr, r3
 8002e36:	4770      	bx	lr

08002e38 <_fini>:
 8002e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e3a:	bf00      	nop
 8002e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e3e:	bc08      	pop	{r3}
 8002e40:	469e      	mov	lr, r3
 8002e42:	4770      	bx	lr
=======
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr

08002d0c <__libc_init_array>:
 8002d0c:	b570      	push	{r4, r5, r6, lr}
 8002d0e:	2600      	movs	r6, #0
 8002d10:	4d0c      	ldr	r5, [pc, #48]	; (8002d44 <__libc_init_array+0x38>)
 8002d12:	4c0d      	ldr	r4, [pc, #52]	; (8002d48 <__libc_init_array+0x3c>)
 8002d14:	1b64      	subs	r4, r4, r5
 8002d16:	10a4      	asrs	r4, r4, #2
 8002d18:	42a6      	cmp	r6, r4
 8002d1a:	d109      	bne.n	8002d30 <__libc_init_array+0x24>
 8002d1c:	f000 f822 	bl	8002d64 <_init>
 8002d20:	2600      	movs	r6, #0
 8002d22:	4d0a      	ldr	r5, [pc, #40]	; (8002d4c <__libc_init_array+0x40>)
 8002d24:	4c0a      	ldr	r4, [pc, #40]	; (8002d50 <__libc_init_array+0x44>)
 8002d26:	1b64      	subs	r4, r4, r5
 8002d28:	10a4      	asrs	r4, r4, #2
 8002d2a:	42a6      	cmp	r6, r4
 8002d2c:	d105      	bne.n	8002d3a <__libc_init_array+0x2e>
 8002d2e:	bd70      	pop	{r4, r5, r6, pc}
 8002d30:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d34:	4798      	blx	r3
 8002d36:	3601      	adds	r6, #1
 8002d38:	e7ee      	b.n	8002d18 <__libc_init_array+0xc>
 8002d3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d3e:	4798      	blx	r3
 8002d40:	3601      	adds	r6, #1
 8002d42:	e7f2      	b.n	8002d2a <__libc_init_array+0x1e>
 8002d44:	08002d9c 	.word	0x08002d9c
 8002d48:	08002d9c 	.word	0x08002d9c
 8002d4c:	08002d9c 	.word	0x08002d9c
 8002d50:	08002da0 	.word	0x08002da0

08002d54 <memset>:
 8002d54:	4603      	mov	r3, r0
 8002d56:	4402      	add	r2, r0
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d100      	bne.n	8002d5e <memset+0xa>
 8002d5c:	4770      	bx	lr
 8002d5e:	f803 1b01 	strb.w	r1, [r3], #1
 8002d62:	e7f9      	b.n	8002d58 <memset+0x4>

08002d64 <_init>:
 8002d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d66:	bf00      	nop
 8002d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d6a:	bc08      	pop	{r3}
 8002d6c:	469e      	mov	lr, r3
 8002d6e:	4770      	bx	lr

08002d70 <_fini>:
 8002d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d72:	bf00      	nop
 8002d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d76:	bc08      	pop	{r3}
 8002d78:	469e      	mov	lr, r3
 8002d7a:	4770      	bx	lr
>>>>>>> 4bd073b1315bc73c952aa0a7a7689454f7abb63a
