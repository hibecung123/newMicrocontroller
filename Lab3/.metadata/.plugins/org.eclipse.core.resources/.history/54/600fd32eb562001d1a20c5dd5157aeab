/*
 * fsm_automatic.c
 *
 *  Created on: Nov 2, 2022
 *      Author: HELLO SON
 */

#include "fsm_automatic.h"
#include "global.h"
#include "timer.h"

#define RED 0
#define AMBER 1
#define GREEN 2

#define button1 0
#define button2 1
#define button3 2

static uint8_t lightbufferMod[3]={1,1,1};
static uint8_t lightbufferRun[3]={5,2,3};
static uint8_t mode;

int time1=0;
int time2=0;
int indexled=0;
int initial_flag=0;
void initial()
{
	status=AUTO_RED;
	status2=AUTO_GREEN;
	time1=4;
	time2=3;
	setTimer1(1000);
	mode=1;
	setTimer3(500);
	updatebuffer(time1, time2);
}

void  traffic()
{
	if(status==AUTO_RED)
	{
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, RESET);
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
		if(time1==0)
		{
			status=AUTO_GREEN;
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
			HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, RESET);
			time1=lightbufferRun[2];
		}
	}
	else if(status==AUTO_YELLOW)
	{
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, RESET);
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
		if(time1==0)
		{
			status=AUTO_RED;
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, RESET);
			HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
			time1=lightbufferRun[0];
		}
	}
	else if(status==AUTO_GREEN)
	{
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, RESET);
		if(time1==0)
		{
			status=AUTO_YELLOW;
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
			HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, RESET);
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
			time1=lightbufferRun[1];
		}
	}
	if(status2==AUTO_RED)
	{
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, RESET);
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
		if(time2==0)
		{
			status2=AUTO_GREEN;
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
			HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, RESET);
			time2=lightbufferRun[2];
		}
	}
	else if(status2==AUTO_YELLOW)
	{
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, RESET);
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
		if(time2==0)
		{
			status2=AUTO_RED;
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, RESET);
			HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
			time2=lightbufferRun[0];
		}
	}
	else if(status2==AUTO_GREEN)
	{
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, RESET);
		if(time2==0)
		{
			status2=AUTO_YELLOW;
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
			HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, RESET);
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
			time2=lightbufferRun[1];
		}
	}
	if((mode==1) &&(timer1_flag==1))
	{
		time1--;
		time2--;
		setTimer1(1000);
	}
}
void  increasedTime(uint8_t led)
{
	lightbufferMod[led]++;
	if(lightbufferMod[led]>99)
	{
		lightbufferMod[led]=1;
	}
}
void updateMode()
{
	mode++;
	if(mode>3) mode=1;
}
void copyModtoRun()
{
	for(int i=0;i<3;i++)
	{
		lightbufferRun[i]=lightbufferMod[i];
	}
}
void blinkLed(uint8_t led)
{
	if((mode!=1)&&(blink_flag==1))
	{
		if(led==RED)
		{
			HAL_GPIO_TogglePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin);
			HAL_GPIO_TogglePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin);
			HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
			HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
		}
		else if(led==AMBER)
		{
			HAL_GPIO_TogglePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin);
			HAL_GPIO_TogglePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin);
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
			HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
			HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
		}
		else if(led==GREEN)
		{
			HAL_GPIO_TogglePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin);
			HAL_GPIO_TogglePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin);
			HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
			HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
			HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
			HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
		}
		setBlink(500);
	}
}
void fsm_automatic()
{

	if(is_button_pressed(button3))
	{
		copyModtoRun();
		mode=1;
		indexled=0;
		time1=lightbufferRun[0];
		time2=lightbufferRun[2];
		status=AUTO_RED;
		status2=AUTO_GREEN;
	}
	if(is_button_pressed(button1))
	{
		updateMode();
		indexled=0;
	}
	switch(mode)
	{
	case 1:
		if(initial_flag==1)
		{
			initial_flag=0;
			status=AUTO_RED;
			status2=AUTO_GREEN;
			time1=lightbufferRun[0];
			time2=lightbufferRun[2];
			indexled=0;
			setTimer1(1000);
			lightbufferMod[0]=1;
			lightbufferMod[1]=1;
			lightbufferMod[2]=1;
		}
		else
			{traffic();}
		updatebuffer(time1, time2);
		break;
	case 2:
		blinkLed(RED);
		setTimer2(5000);
		initial_flag=1;
		if(is_button_pressed(2))
		{
			status=MAN_RED;
			status2=MAN_RED;
			setTimer2(5000);
			increasedTime(0);
		}
		if(timer2_flag==1)
		{
			status=AUTO_RED;
			status2=AUTO_GREEN;
			mode=1;
		}
		updatebuffer(mode, lightbufferMod[1]);
		break;
	case 3:
		blinkLed(AMBER);
		setTimer2(5000);
		initial_flag=1;
		if(is_button_pressed(2))
		{
			status=MAN_YELLOW;
			status2=MAN_YELLOW;
			setTimer2(5000);
			increasedTime(1);
		}
		if(timer2_flag==1)
		{
			status=AUTO_RED;
			status2=AUTO_GREEN;
			mode=1;
		}
		updatebuffer(mode, lightbufferMod[1]);
		break;
	case 4:
		blinkLed(GREEN);
		setTimer2(5000);
		initial_flag=1;
		if(is_button_pressed(2))
		{
			status=MAN_GREEN;
			status2=MAN_GREEN;
			setTimer2(5000);
			increasedTime(2);
		}
		if(timer2_flag==1)
		{
			status=AUTO_RED;
			status2=AUTO_GREEN;
			mode=1;
		}
		updatebuffer(mode, lightbufferMod[2]);
		break;
	}
	if(segment_flag==1)
	{
	update7SEG(indexled++);
	if(indexled>1)
	{
		indexled=0;
	}
	setTimer3(500);
	}
}

